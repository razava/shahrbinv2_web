[{"D:\\projects\\shahrbin-admin\\src\\index.js":"1","D:\\projects\\shahrbin-admin\\src\\reportWebVitals.js":"2","D:\\projects\\shahrbin-admin\\src\\App.js":"3","D:\\projects\\shahrbin-admin\\src\\Layout.js":"4","D:\\projects\\shahrbin-admin\\src\\helperFuncs.js":"5","D:\\projects\\shahrbin-admin\\src\\store\\context.js":"6","D:\\projects\\shahrbin-admin\\src\\components\\screens\\NotFound.js":"7","D:\\projects\\shahrbin-admin\\src\\components\\screens\\RegisterReport.js":"8","D:\\projects\\shahrbin-admin\\src\\components\\screens\\NewIdeas.js":"9","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Poll.js":"10","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Reports.js":"11","D:\\projects\\shahrbin-admin\\src\\components\\screens\\NewReports.js":"12","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Polls.js":"13","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Contractors.js":"14","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\Header.js":"15","D:\\projects\\shahrbin-admin\\src\\components\\commons\\authorization\\AuthorizeRoute.js":"16","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Comments.js":"17","D:\\projects\\shahrbin-admin\\src\\apiCalls.js":"18","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportCard.js":"19","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportDialog.js":"20","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Avatar.js":"21","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\MyPieChart.js":"22","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Button.js":"23","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\ChooseSubject.js":"24","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\RegisterUserDialog.js":"25","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\AddAttachments.js":"26","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Textarea.js":"27","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\RolesDialog.js":"28","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ProfileDialog.js":"29","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\TextInput.js":"30","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DialogToggler.js":"31","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Loader.js":"32","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DropdownWrapper.js":"33","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\MyDataTable.js":"34","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\SelectBox.js":"35","D:\\projects\\shahrbin-admin\\src\\components\\commons\\map\\OlMapContainer.js":"36","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\EditorContainer.js":"37","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Title.js":"38","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\SelectOnMapDialog.js":"39","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useMakeRequest.js":"40","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\RegisterForm.js":"41","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Tabs.js":"42","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\NewReportsTable.js":"43","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\MyBarChart.js":"44","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\CitizenInfo.js":"45","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportHistory.js":"46","D:\\projects\\shahrbin-admin\\src\\components\\commons\\map\\ShowOnMap.js":"47","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\SubjectDialog.js":"48","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ProfileForm.js":"49","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\Referral.js":"50","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportDetails.js":"51","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useClick.js":"52","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Dropdown.js":"53","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useAddLisener.js":"54","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Filters.js":"55","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\MultiSelectBox.js":"56","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Tab.js":"57","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\LazyLoadWrapper.jsx":"58","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ConfirmReportDialog.js":"59","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useSignalR.js":"60","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ShowAttachments.js":"61","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\TransitionForm.js":"62","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\FiltersAccordion.js":"63","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Date\\DatePicker.js":"64","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\AttachItem.js":"65","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DateInput.js":"66","D:\\projects\\shahrbin-admin\\src\\components\\screens\\AddCategory.js":"67","D:\\projects\\shahrbin-admin\\src\\components\\commons\\map\\ScatterMap.js":"68","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddCategoryDialog.js":"69","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\CategoryForm.js":"70","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\StageForm.js":"71","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\ScatterMapAccordion.js":"72","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\SideBar.js":"73","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\SideLink.js":"74","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\constants.js":"75","D:\\projects\\shahrbin-admin\\src\\store\\AppContext.js":"76","D:\\projects\\shahrbin-admin\\src\\store\\reducer.js":"77","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\NoData\\NoData.js":"78","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\MultiSelect.js":"79","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\TreeSystem.js":"80","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\TreeItem.js":"81","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\CheckBox\\CheckBox.js":"82","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Processes.js":"83","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddProcessDialog.js":"84","D:\\projects\\shahrbin-admin\\src\\components\\screens\\OrganizationalUnits.js":"85","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddOrganizationalUnit.js":"86","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Violations.js":"87","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ViolationDialog.js":"88","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\NavigatableDialog.js":"89","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\RegionsDialog.js":"90","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Logo.js":"91","D:\\projects\\shahrbin-admin\\src\\components\\screens\\QuickAccess.js":"92","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Mode\\Mode.js":"93","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\TableActions.js":"94","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\EditReportDialog.js":"95","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\IsIdentityVisible.js":"96","D:\\projects\\shahrbin-admin\\src\\components\\commons\\Charts\\BarChart.js":"97","D:\\projects\\shahrbin-admin\\src\\components\\commons\\Charts\\PieChart.js":"98","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useResize.js":"99","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\MoreDetails.js":"100","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddQuickAccessDialog.js":"101","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ChangePasswordDialog.js":"102","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Radio\\Radio.js":"103","D:\\projects\\shahrbin-admin\\src\\components\\screens\\CreatePoll.js":"104","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Infos.js":"105","D:\\projects\\shahrbin-admin\\src\\components\\screens\\ManageUsers.js":"106","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Login.js":"107","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\NavBar.js":"108","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\SideBarToggle.js":"109","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\CurrentDate.js":"110","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DropDown\\DropDownItem.js":"111","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Accordion\\Accordion.js":"112","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Icon\\Icon.js":"113","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Brands.js":"114","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Layout\\LayoutScrollable.js":"115","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Table\\TableHeader.js":"116","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Tabs\\TabLabel.js":"117","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Table\\TableHeaderAction.js":"118","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Login\\LoginForm.js":"119","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Attachment\\AttachmentToggle.js":"120","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\FilterDialog.js":"121","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Badge\\Badge.js":"122","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Attachment\\AddAttachment.js":"123","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Progress\\PageProgress.js":"124","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\DialogButtons.js":"125","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ConfirmDialog.js":"126","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Loader\\Indetermine.js":"127","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Excel\\Excel.js":"128","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\CheckBox\\CheckBoxGroup.js":"129","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useInitials.js":"130","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Search.js":"131","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Complaints.js":"132","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ComplaintDialog.js":"133","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ComplaintDetails.js":"134","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\ComplaintReferral.js":"135","D:\\projects\\shahrbin-admin\\src\\components\\screens\\ComplaintsCategories.js":"136","D:\\projects\\shahrbin-admin\\src\\components\\screens\\ComplaintsUnits.js":"137","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddComplaintCategoryDialog.js":"138","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddComplaintUnitDialog.js":"139","D:\\projects\\shahrbin-admin\\src\\components\\screens\\AllComplaints.js":"140","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ComplaintHistory.js":"141","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\TimeSelect.js":"142"},{"size":1083,"mtime":1663667318238,"results":"143","hashOfConfig":"144"},{"size":362,"mtime":499162500000,"results":"145","hashOfConfig":"144"},{"size":5570,"mtime":1686827826434,"results":"146","hashOfConfig":"144"},{"size":430,"mtime":1662633601915,"results":"147","hashOfConfig":"144"},{"size":30312,"mtime":1687621230070,"results":"148","hashOfConfig":"144"},{"size":162,"mtime":1622620880185,"results":"149","hashOfConfig":"150"},{"size":253,"mtime":1663667318213,"results":"151","hashOfConfig":"144"},{"size":12899,"mtime":1682951362468,"results":"152","hashOfConfig":"144"},{"size":1446,"mtime":1611749149191,"results":"153","hashOfConfig":"150"},{"size":1660,"mtime":1663667318215,"results":"154","hashOfConfig":"144"},{"size":5895,"mtime":1673347598499,"results":"155","hashOfConfig":"144"},{"size":5526,"mtime":1686829038885,"results":"156","hashOfConfig":"144"},{"size":6668,"mtime":1663667318217,"results":"157","hashOfConfig":"144"},{"size":4891,"mtime":1674556889147,"results":"158","hashOfConfig":"144"},{"size":6257,"mtime":1687621380932,"results":"159","hashOfConfig":"144"},{"size":1788,"mtime":1684076766918,"results":"160","hashOfConfig":"144"},{"size":8675,"mtime":1674556889132,"results":"161","hashOfConfig":"144"},{"size":44197,"mtime":1687621299809,"results":"162","hashOfConfig":"144"},{"size":586,"mtime":1624274085702,"results":"163","hashOfConfig":"144"},{"size":3559,"mtime":1684078811951,"results":"164","hashOfConfig":"144"},{"size":1378,"mtime":1662633602917,"results":"165","hashOfConfig":"144"},{"size":1693,"mtime":1662633603008,"results":"166","hashOfConfig":"144"},{"size":1440,"mtime":1662633603681,"results":"167","hashOfConfig":"144"},{"size":2440,"mtime":1633345941591,"results":"168","hashOfConfig":"150"},{"size":933,"mtime":1618387645347,"results":"169","hashOfConfig":"150"},{"size":1114,"mtime":1630249470764,"results":"170","hashOfConfig":"144"},{"size":1212,"mtime":1670849288649,"results":"171","hashOfConfig":"144"},{"size":2457,"mtime":1662633603341,"results":"172","hashOfConfig":"144"},{"size":1284,"mtime":1637743878675,"results":"173","hashOfConfig":"150"},{"size":4797,"mtime":1686841355579,"results":"174","hashOfConfig":"144"},{"size":5091,"mtime":1684084404544,"results":"175","hashOfConfig":"144"},{"size":572,"mtime":1663667318192,"results":"176","hashOfConfig":"144"},{"size":2197,"mtime":1642792023675,"results":"177","hashOfConfig":"144"},{"size":1962,"mtime":1686829665043,"results":"178","hashOfConfig":"144"},{"size":3794,"mtime":1674913941729,"results":"179","hashOfConfig":"144"},{"size":3695,"mtime":1674556889021,"results":"180","hashOfConfig":"144"},{"size":2626,"mtime":1620736434206,"results":"181","hashOfConfig":"144"},{"size":555,"mtime":1611640079410,"results":"182","hashOfConfig":"144"},{"size":5229,"mtime":1682951362213,"results":"183","hashOfConfig":"144"},{"size":2188,"mtime":1682951362288,"results":"184","hashOfConfig":"144"},{"size":7193,"mtime":1682951362227,"results":"185","hashOfConfig":"144"},{"size":1666,"mtime":1662633603978,"results":"186","hashOfConfig":"144"},{"size":8141,"mtime":1684258102734,"results":"187","hashOfConfig":"144"},{"size":3156,"mtime":1641651592933,"results":"188","hashOfConfig":"150"},{"size":1484,"mtime":1684078789809,"results":"189","hashOfConfig":"144"},{"size":3489,"mtime":1686828377118,"results":"190","hashOfConfig":"144"},{"size":1194,"mtime":1621229940655,"results":"191","hashOfConfig":"150"},{"size":6578,"mtime":1630235220045,"results":"192","hashOfConfig":"150"},{"size":5951,"mtime":1662633603065,"results":"193","hashOfConfig":"144"},{"size":1676,"mtime":1662633603583,"results":"194","hashOfConfig":"144"},{"size":2464,"mtime":1641902279514,"results":"195","hashOfConfig":"144"},{"size":919,"mtime":1663667318195,"results":"196","hashOfConfig":"144"},{"size":2368,"mtime":1662633603737,"results":"197","hashOfConfig":"144"},{"size":820,"mtime":1663667318193,"results":"198","hashOfConfig":"144"},{"size":1923,"mtime":1662633603748,"results":"199","hashOfConfig":"144"},{"size":2241,"mtime":1630228137983,"results":"200","hashOfConfig":"144"},{"size":496,"mtime":1617531624690,"results":"201","hashOfConfig":"144"},{"size":561,"mtime":1623079632834,"results":"202","hashOfConfig":"144"},{"size":9569,"mtime":1662633602935,"results":"203","hashOfConfig":"144"},{"size":1898,"mtime":1663667318199,"results":"204","hashOfConfig":"144"},{"size":1963,"mtime":1662633603126,"results":"205","hashOfConfig":"144"},{"size":8223,"mtime":1684079813837,"results":"206","hashOfConfig":"144"},{"size":774,"mtime":1641919486333,"results":"207","hashOfConfig":"150"},{"size":4610,"mtime":1664014201574,"results":"208","hashOfConfig":"144"},{"size":3498,"mtime":1662633602812,"results":"209","hashOfConfig":"144"},{"size":1224,"mtime":1630326312690,"results":"210","hashOfConfig":"150"},{"size":6028,"mtime":1663667318201,"results":"211","hashOfConfig":"144"},{"size":3601,"mtime":1641898653726,"results":"212","hashOfConfig":"144"},{"size":7775,"mtime":1682951362136,"results":"213","hashOfConfig":"144"},{"size":15807,"mtime":1633950694964,"results":"214","hashOfConfig":"144"},{"size":5786,"mtime":1633946534219,"results":"215","hashOfConfig":"144"},{"size":679,"mtime":1630072307591,"results":"216","hashOfConfig":"150"},{"size":677,"mtime":1663667318184,"results":"217","hashOfConfig":"144"},{"size":3694,"mtime":1663667318187,"results":"218","hashOfConfig":"144"},{"size":3689,"mtime":1686827934273,"results":"219","hashOfConfig":"144"},{"size":1079,"mtime":1682951362495,"results":"220","hashOfConfig":"144"},{"size":703,"mtime":1663667318242,"results":"221","hashOfConfig":"144"},{"size":690,"mtime":1664026488332,"results":"222","hashOfConfig":"144"},{"size":10428,"mtime":1684261202028,"results":"223","hashOfConfig":"144"},{"size":7085,"mtime":1684260866665,"results":"224","hashOfConfig":"144"},{"size":2240,"mtime":1637756481445,"results":"225","hashOfConfig":"144"},{"size":698,"mtime":1662633603683,"results":"226","hashOfConfig":"144"},{"size":5169,"mtime":1663667318218,"results":"227","hashOfConfig":"144"},{"size":3797,"mtime":1662633603230,"results":"228","hashOfConfig":"144"},{"size":5403,"mtime":1663667318214,"results":"229","hashOfConfig":"144"},{"size":5975,"mtime":1662633603184,"results":"230","hashOfConfig":"144"},{"size":6714,"mtime":1664706022677,"results":"231","hashOfConfig":"144"},{"size":3990,"mtime":1645873392032,"results":"232","hashOfConfig":"144"},{"size":6920,"mtime":1662633603879,"results":"233","hashOfConfig":"144"},{"size":4140,"mtime":1662633603339,"results":"234","hashOfConfig":"144"},{"size":343,"mtime":1633947135254,"results":"235","hashOfConfig":"150"},{"size":5429,"mtime":1663667318231,"results":"236","hashOfConfig":"144"},{"size":3041,"mtime":1637754550234,"results":"237","hashOfConfig":"150"},{"size":2117,"mtime":1641286053919,"results":"238","hashOfConfig":"144"},{"size":10032,"mtime":1682951362179,"results":"239","hashOfConfig":"144"},{"size":1176,"mtime":1662633603764,"results":"240","hashOfConfig":"144"},{"size":3207,"mtime":1663694685147,"results":"241","hashOfConfig":"144"},{"size":1961,"mtime":1663694129238,"results":"242","hashOfConfig":"144"},{"size":565,"mtime":1663667318198,"results":"243","hashOfConfig":"144"},{"size":3780,"mtime":1662633602973,"results":"244","hashOfConfig":"144"},{"size":5722,"mtime":1662633603246,"results":"245","hashOfConfig":"144"},{"size":3776,"mtime":1662633603265,"results":"246","hashOfConfig":"144"},{"size":1621,"mtime":1662633603930,"results":"247","hashOfConfig":"144"},{"size":13646,"mtime":1663667318205,"results":"248","hashOfConfig":"144"},{"size":8909,"mtime":1682951362326,"results":"249","hashOfConfig":"144"},{"size":8567,"mtime":1675002595632,"results":"250","hashOfConfig":"144"},{"size":1113,"mtime":1682951362347,"results":"251","hashOfConfig":"144"},{"size":2656,"mtime":1674556889042,"results":"252","hashOfConfig":"144"},{"size":2240,"mtime":1663667318186,"results":"253","hashOfConfig":"144"},{"size":2378,"mtime":1662633602945,"results":"254","hashOfConfig":"144"},{"size":600,"mtime":1662633603736,"results":"255","hashOfConfig":"144"},{"size":2101,"mtime":1662633603646,"results":"256","hashOfConfig":"144"},{"size":382,"mtime":1662633603749,"results":"257","hashOfConfig":"144"},{"size":1087,"mtime":1687621055400,"results":"258","hashOfConfig":"144"},{"size":430,"mtime":1662633603790,"results":"259","hashOfConfig":"144"},{"size":317,"mtime":1662633603138,"results":"260","hashOfConfig":"144"},{"size":360,"mtime":1662633603980,"results":"261","hashOfConfig":"144"},{"size":443,"mtime":1662633603151,"results":"262","hashOfConfig":"144"},{"size":4325,"mtime":1687621120779,"results":"263","hashOfConfig":"144"},{"size":1581,"mtime":1684083928336,"results":"264","hashOfConfig":"144"},{"size":12067,"mtime":1682951362211,"results":"265","hashOfConfig":"144"},{"size":388,"mtime":1662633603664,"results":"266","hashOfConfig":"144"},{"size":3205,"mtime":1684083968772,"results":"267","hashOfConfig":"144"},{"size":393,"mtime":1662633603898,"results":"268","hashOfConfig":"144"},{"size":1490,"mtime":1662633603268,"results":"269","hashOfConfig":"144"},{"size":538,"mtime":1662633603267,"results":"270","hashOfConfig":"144"},{"size":286,"mtime":1662633603814,"results":"271","hashOfConfig":"144"},{"size":283,"mtime":1662633603739,"results":"272","hashOfConfig":"144"},{"size":1563,"mtime":1662633603695,"results":"273","hashOfConfig":"144"},{"size":2204,"mtime":1687095259270,"results":"274","hashOfConfig":"144"},{"size":621,"mtime":1664025846003,"results":"275","hashOfConfig":"144"},{"size":4636,"mtime":1686829752584,"results":"276","hashOfConfig":"144"},{"size":2705,"mtime":1686828857632,"results":"277","hashOfConfig":"144"},{"size":2214,"mtime":1686830729051,"results":"278","hashOfConfig":"144"},{"size":5763,"mtime":1686843553053,"results":"279","hashOfConfig":"144"},{"size":5584,"mtime":1684261817086,"results":"280","hashOfConfig":"144"},{"size":5495,"mtime":1684265075853,"results":"281","hashOfConfig":"144"},{"size":4034,"mtime":1684261668897,"results":"282","hashOfConfig":"144"},{"size":5928,"mtime":1684265696366,"results":"283","hashOfConfig":"144"},{"size":3623,"mtime":1686828213848,"results":"284","hashOfConfig":"144"},{"size":3106,"mtime":1686828812965,"results":"285","hashOfConfig":"144"},{"size":2332,"mtime":1686843230381,"results":"286","hashOfConfig":"144"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},"1gvo649",{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"289"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},"1mq83q2",{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"289"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307","usedDeprecatedRules":"289"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"310"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"313","usedDeprecatedRules":"289"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"316","usedDeprecatedRules":"289"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"289"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"322","usedDeprecatedRules":"289"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"289"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"289"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"289"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"345","usedDeprecatedRules":"289"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"351"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"289"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"364"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"289"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370","usedDeprecatedRules":"289"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"375","usedDeprecatedRules":"289"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"289"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"289"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"289"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"289"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"289"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"289"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"289"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"289"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"407"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"301"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417","usedDeprecatedRules":"351"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420","usedDeprecatedRules":"289"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"289"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"289"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"289"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"289"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"289"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"289"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"289"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"289"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"289"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456","usedDeprecatedRules":"289"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"460"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"289"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"289"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"289"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"289"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477","usedDeprecatedRules":"289"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480","usedDeprecatedRules":"289"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483","usedDeprecatedRules":"289"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"460"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"289"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"289"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"289"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"289"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"289"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"289"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"289"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"525","usedDeprecatedRules":"289"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"528","usedDeprecatedRules":"289"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"531","usedDeprecatedRules":"289"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"460"},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"289"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"460"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"289"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"289"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"289"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"289"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"289"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"289"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572","usedDeprecatedRules":"289"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"289"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578","usedDeprecatedRules":"289"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"289"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"289"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"289"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"289"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"289"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"289"},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"289"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"638","usedDeprecatedRules":"289"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"289"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"289"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"289"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"289"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"289"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"289"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"289"},"D:\\projects\\shahrbin-admin\\src\\index.js",[],["663","664"],"D:\\projects\\shahrbin-admin\\src\\reportWebVitals.js",[],"D:\\projects\\shahrbin-admin\\src\\App.js",[],"D:\\projects\\shahrbin-admin\\src\\Layout.js",[],"D:\\projects\\shahrbin-admin\\src\\helperFuncs.js",["665","666","667","668","669","670"],"import React from \"react\";\r\nimport moment from \"moment-jalaali\";\r\nimport { createTheme } from \"react-data-table-component\";\r\nimport { toast } from \"react-toastify\";\r\nimport axios from \"axios\";\r\nimport NoData from \"./components/helpers/NoData/NoData\";\r\nimport { CommonAPI } from \"./apiCalls\";\r\nimport dayjs from \"dayjs\";\r\nimport utc from \"dayjs/plugin/utc\";\r\nimport jalaliday from \"jalaliday\";\r\n\r\nmoment.loadPersian({ usePersianDigits: true });\r\ndayjs.extend(jalaliday);\r\ndayjs.extend(utc);\r\n\r\nconst MAX_SIZE = 10 * 1024 * 1024;\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nexport const mapUrlToNav = (location, replace) => {\r\n  const area = location.pathname.replace(replace, \"\");\r\n  if (area === \"/home\") return { home: true };\r\n  if (area === \"/newReports\") return { newReports: true };\r\n  if (area === \"/new-ideas\") return { newIdeas: true };\r\n  else if (area === \"/reports\") return { reports: true };\r\n  else if (area === \"/manageUsers\") return { manageUsers: true };\r\n  else if (area === \"/registerReport\") return { registerReport: true };\r\n  else if (area === \"/wallet\") return { wallet: true };\r\n  else if (area === \"/warrants\") return { warrants: true };\r\n  else if (area === \"/ideas\") return { ideas: true };\r\n  else if (area === \"/polls\") return { polls: true };\r\n  else if (area === \"/managers\") return { managers: true };\r\n  else if (area === \"/setting\") return { setting: true };\r\n  else if (area === \"/dashboard\") return { dashboard: true };\r\n  else if (area === \"/mayors\") return { mayors: true };\r\n  else if (area === \"/contractors\") return { contractors: true };\r\n  else if (area === \"/citizens\") return { citizens: true };\r\n  else if (area === \"/executives\") return { executives: true };\r\n  else if (area === \"/admanagers\") return { admanagers: true };\r\n  else if (area === \"/not-addressed\") return { notAddressed: true };\r\n  else if (area === \"/infos\") return { infos: true };\r\n  else if (area === \"/createPoll\") return { createPoll: true };\r\n  else if (area === \"/comments\") return { comments: true };\r\n  else if (area === \"/categories\") return { categories: true };\r\n  else if (area === \"/processes\") return { processes: true };\r\n  else if (area === \"/violations\") return { violations: true };\r\n  else if (area === \"/quickAccess\") return { quickAccess: true };\r\n  else if (area === \"/allComplaints\") return { allComplaints: true };\r\n  else if (area === \"/complaints\") return { complaints: true };\r\n  else if (area === \"/organizationalUnits\")\r\n    return { organizationalUnits: true };\r\n  return {};\r\n};\r\n\r\nconst persianNumbers = [\"۰\", \"۱\", \"۲\", \"۳\", \"۴\", \"۵\", \"۶\", \"۷\", \"۸\", \"۹\"];\r\nconst persianRegex = [\r\n  /۰/g,\r\n  /۱/g,\r\n  /۲/g,\r\n  /۳/g,\r\n  /۴/g,\r\n  /۵/g,\r\n  /۶/g,\r\n  /۷/g,\r\n  /۸/g,\r\n  /۹/g,\r\n];\r\nconst latinRegex = [/0/g, /1/g, /2/g, /3/g, /4/g, /5/g, /6/g, /7/g, /8/g, /9/g];\r\nconst latinNumbers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\r\n\r\nexport const format = (num) => {\r\n  if (num < 1) return num;\r\n  const formatted = (\"\" + num).split(\".\");\r\n  const integer = formatted[0].replace(\r\n    /(\\d)(?=(?:\\d{3})+(?:\\.|$))|(\\.\\d\\d?)\\d*$/g,\r\n    function (m, s1, s2) {\r\n      return s2 || s1 + \",\";\r\n    }\r\n  );\r\n  const float = formatted[1] ? \".\" + formatted[1] : \"\";\r\n  return integer + float;\r\n};\r\n\r\nexport const deFormatt = (value) => (\"\" + value).replace(/,/g, \"\");\r\n\r\nexport const fixDigit = (num = \"\", toLatin = false) => {\r\n  if (toLatin) {\r\n    for (let i = 0; i < 10; i++) {\r\n      num = num.toString().replace(persianRegex[i], latinNumbers[i]);\r\n    }\r\n  } else {\r\n    for (let i = 0; i < 10; i++) {\r\n      num = num.toString().replace(latinRegex[i], persianNumbers[i]);\r\n    }\r\n  }\r\n  return num;\r\n};\r\n\r\nconst customStyles = {\r\n  pagination: {\r\n    style: {\r\n      \"justify-content\": \"flex-start\",\r\n    },\r\n  },\r\n};\r\n\r\nexport const dataTableProps = {\r\n  customStyles,\r\n  paginationComponentOptions: {\r\n    rowsPerPageText: \"تعداد سطر در هر صفحه\",\r\n    rangeSeparatorText: \"از\",\r\n  },\r\n  pagination: true,\r\n  paginationServer: true,\r\n  paginationIconNext: (\r\n    <span className=\"pagination-icon\">\r\n      <i className=\"fas fa-angle-left\"></i>\r\n    </span>\r\n  ),\r\n  paginationIconPrevious: (\r\n    <span className=\"pagination-icon\">\r\n      <i className=\"fas fa-angle-right\"></i>\r\n    </span>\r\n  ),\r\n  paginationIconFirstPage: (\r\n    <span className=\"pagination-icon\">\r\n      <i className=\"fas fa-angle-double-right\"></i>\r\n    </span>\r\n  ),\r\n  paginationIconLastPage: (\r\n    <span className=\"pagination-icon\">\r\n      <i className=\"fas fa-angle-double-left\"></i>\r\n    </span>\r\n  ),\r\n  progressComponent: <div className=\"loader text-primary\"></div>,\r\n};\r\n\r\nexport const tableLightTheme = () =>\r\n  createTheme(\"light\", {\r\n    text: {\r\n      primary: \"var(--text)\",\r\n    },\r\n    sortFocus: {\r\n      default: \"#777777\",\r\n    },\r\n    background: {\r\n      default: \"var(--bg)\",\r\n    },\r\n    button: {\r\n      default: \"var(--btnBg)\",\r\n      disabled: \"var(--white)\",\r\n    },\r\n    action: {\r\n      button: \"var(--text)\",\r\n      hover: \"var(--mute)\",\r\n      disabled: \"var(--white)\",\r\n    },\r\n  });\r\n\r\nexport const tableDarkTheme = () =>\r\n  createTheme(\"dark\", {\r\n    text: {\r\n      primary: \"var(--white)\",\r\n    },\r\n    sortFocus: {\r\n      default: \"#777777\",\r\n    },\r\n    background: {\r\n      default: \"var(--dark)\",\r\n    },\r\n    button: {\r\n      default: \"var(--white)\",\r\n      disabled: \"var(--white)\",\r\n    },\r\n    action: {\r\n      button: \"var(--white)\",\r\n      hover: \"var(--mute)\",\r\n      disabled: \"var(--white)\",\r\n    },\r\n  });\r\n\r\nexport const reportColumn = [\r\n  {\r\n    name: \"شماره رهگیری\",\r\n    cell: (row) => <span>{doesExist(row.trackingNumber)}</span>,\r\n  },\r\n  {\r\n    name: \"زیر‌گروه موضوعی\",\r\n    grow: 2,\r\n    cell: (row) => <span>{doesExist(row.category && row.category.title)}</span>,\r\n  },\r\n  {\r\n    name: \"آخرین وضعیت\",\r\n    cell: (row) => <span>{doesExist(row.lastStatus)}</span>,\r\n  },\r\n  {\r\n    name: \"تاریخ ایجاد\",\r\n    grow: 1,\r\n    cell: (row) => <span>{convertserverTimeToDateString(row.sent)}</span>,\r\n  },\r\n];\r\n\r\nexport const complaintColumn = [\r\n  {\r\n    name: \"شماره رهگیری\",\r\n    cell: (row) => <span>{doesExist(row.trackingNumber)}</span>,\r\n  },\r\n  {\r\n    name: \"زیر‌گروه موضوعی\",\r\n    grow: 2,\r\n    cell: (row) => <span>{doesExist(row.category && row.category.title)}</span>,\r\n  },\r\n  {\r\n    name: \"واحد\",\r\n    cell: (row) => <span>{doesExist(row.currentUnit?.title)}</span>,\r\n  },\r\n  {\r\n    name: \"تاریخ ایجاد\",\r\n    grow: 1,\r\n    cell: (row) => <span>{convertserverTimeToDateString(row.created)}</span>,\r\n  },\r\n];\r\n\r\nexport const ideaColumn = [\r\n  {\r\n    name: \"شماره ایده\",\r\n    cell: (row) => <span>{fixDigit(row.ideaId)}</span>,\r\n  },\r\n  {\r\n    name: \"شهروند\",\r\n    cell: (row) => <span>{fixDigit(row.username)}</span>,\r\n  },\r\n  {\r\n    name: \"عنوان\",\r\n    cell: (row) => <span>{fixDigit(row.title)}</span>,\r\n  },\r\n  {\r\n    name: \"گروه\",\r\n    grow: 2,\r\n    cell: (row) => <span>{fixDigit(row.subjectGroup)}</span>,\r\n  },\r\n  {\r\n    name: \"تاریخ ایجاد\",\r\n    grow: 2,\r\n    cell: (row) => (\r\n      <span>{moment(new Date(row.createdAt)).format(\"jYYYY/jMM/jDD\")}</span>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const convertserverTimeToDateString = (\r\n  dateString,\r\n  format = \"DD MMMM YYYY ساعت HH:mm\"\r\n) => {\r\n  if (!dateString) return \"---\";\r\n  return dayjs\r\n    .utc(dateString)\r\n    .local()\r\n    .calendar(\"jalali\")\r\n    .locale(\"fa\")\r\n    .format(format);\r\n};\r\n\r\nexport const isParent = (parents, child) =>\r\n  Array.from(parents).filter((parent) => parent === child).length > 0\r\n    ? true\r\n    : false;\r\n\r\nexport const dateToTimeString = (date) => {\r\n  const dateObject = new Date(date);\r\n  const hour = dateObject.getHours();\r\n  const minute = dateObject.getMinutes();\r\n  const seconds = dateObject.getSeconds();\r\n  return fixDigit(\r\n    `${hour < 10 ? \"0\" + hour : hour}:${minute < 10 ? \"0\" + minute : minute}:${\r\n      seconds < 10 ? \"0\" + seconds : seconds\r\n    }`\r\n  );\r\n};\r\n\r\nexport const overrideStrings = {\r\n  selectSomeItems: \"انتخاب کنید...\",\r\n  allItemsAreSelected: \"تمام گزینه ها انتخاب شده اند.\",\r\n  selectAll: \"انتخاب همه\",\r\n  search: \"جستجو\",\r\n  clearSearch: \"پاک کردن جستجو\",\r\n};\r\n\r\nexport const isFunction = (functionToCheck) => {\r\n  return (\r\n    functionToCheck && {}.toString.call(functionToCheck) === \"[object Function]\"\r\n  );\r\n};\r\n\r\nexport const saveToLocalStorage = (key, value) => {\r\n  if (window !== undefined) {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  }\r\n};\r\n\r\nexport const getFromLocalStorage = (key) => {\r\n  if (window !== undefined) {\r\n    const data = JSON.parse(localStorage.getItem(key));\r\n    return data;\r\n  }\r\n};\r\n\r\nexport const removeFromLocalStorage = (key) => {\r\n  if (window !== undefined) {\r\n    localStorage.removeItem(key);\r\n  }\r\n};\r\n\r\nexport const logout = (callback) => {\r\n  removeFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n  removeFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN_EXPIRATION);\r\n  removeFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_USER_ROLES);\r\n  removeFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_INSTANCE_ID);\r\n  callback();\r\n};\r\n\r\nexport const signUserIn = (res, history) => {\r\n  saveToLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN, res.data.token);\r\n  saveToLocalStorage(\r\n    constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN_EXPIRATION,\r\n    res.data.expiration\r\n  );\r\n  saveToLocalStorage(constants.SHAHRBIN_MANAGEMENT_USER_ROLES, res.data.roles);\r\n  saveToLocalStorage(\r\n    constants.SHAHRBIN_MANAGEMENT_LOGIN_TIME,\r\n    res.data.currentTime\r\n  );\r\n  const roles = res.data.roles;\r\n  // const to = isManager(res.data.roles) ? appRoutes.infos : appRoutes.newReports;\r\n  const to = hasRole([\"Mayor\", \"Manager\", \"Admin\"], roles)\r\n    ? \"/admin/infos\"\r\n    : hasRole([\"ComplaintInspector\"], roles)\r\n    ? \"/admin/complaints\"\r\n    : hasRole([\"ComplaintAdmin\"], roles)\r\n    ? \"/admin/complaints-categories\"\r\n    : \"/admin/newReports\";\r\n  history.push(to);\r\n};\r\n\r\nexport const isManager = (userRoles) =>\r\n  hasRole([\"Mayor\", \"Manager\", \"Admin\"], userRoles);\r\n\r\nexport const getLoginDestination = (roles) => {\r\n  console.log(roles);\r\n  const to = hasRole([\"Mayor\", \"Manager\", \"Admin\"], roles)\r\n    ? \"/admin/infos\"\r\n    : hasRole([\"ComplaintInspector\"], roles)\r\n    ? \"/admin/complaints\"\r\n    : hasRole([\"ComplaintAdmin\"], roles)\r\n    ? \"/admin/complaints-categories\"\r\n    : \"/admin/newReports\";\r\n  return to;\r\n};\r\n\r\nexport const getUserRoles = () =>\r\n  getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_USER_ROLES);\r\n\r\nexport const requiredFields = (fields) => {\r\n  const keys = Object.keys(fields);\r\n  let isEmpty = {};\r\n  keys.forEach((key, i) => {\r\n    if (!!fields[key] === false) {\r\n      isEmpty[key] = true;\r\n    }\r\n  });\r\n  if (Object.keys(isEmpty).length > 0) {\r\n    toast(\"تمام کادر ها الزامی می باشند.\", { type: \"error\" });\r\n  }\r\n  return isEmpty;\r\n};\r\n\r\nexport const serverError = (res) => {\r\n  if (res && String(res.status).startsWith(\"5\")) {\r\n    toast(\"خطایی رخ داد. لطفا از اتصال اینترنت خود اطمینان حاصل نمایید.\", {\r\n      type: \"error\",\r\n    });\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const unKnownError = (res) => {\r\n  toast(\r\n    res && res.data && res.data.message\r\n      ? res.data.message\r\n      : \"مشکلی در ارسال درخواست به وجود آمد.\",\r\n    { type: \"error\" }\r\n  );\r\n  return true;\r\n};\r\n\r\nexport const checkPasswordRequirements = (password) => {\r\n  let errors = [];\r\n  if (password.toString().length < 6) {\r\n    errors.push(\"طول رمز عبور باید بیشتر از 6 رقم باشد.\");\r\n  }\r\n  return errors;\r\n};\r\n\r\nexport const checkLoginState = () => {\r\n  let isLoggedIn = !!getFromLocalStorage(\r\n    constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN\r\n  );\r\n  if (!isLoggedIn) {\r\n    isLoggedIn = false;\r\n    return isLoggedIn;\r\n  } else {\r\n    const expiration = getFromLocalStorage(\r\n      constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN_EXPIRATION\r\n    );\r\n    if (expiration) {\r\n      const isExpired = new Date(expiration).getTime() - Date.now() <= 0;\r\n      if (isExpired) {\r\n        removeFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n        removeFromLocalStorage(\r\n          constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN_EXPIRATION\r\n        );\r\n        removeFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_USER_ROLES);\r\n        isLoggedIn = false;\r\n      }\r\n    } else {\r\n      isLoggedIn = false;\r\n    }\r\n  }\r\n  return isLoggedIn;\r\n};\r\n\r\nexport const doesExist = (x) =>\r\n  x === null || x === undefined || x === \"\" ? \"---\" : x;\r\n\r\nexport const clearNull = (x) => (!x ? \"\" : x);\r\n\r\nexport const rolesDisplayName = (role) => {\r\n  switch (role) {\r\n    case \"Admin\":\r\n      return \"مدیر\";\r\n    case \"Citizen\":\r\n      return \"شهروند\";\r\n    case \"Executive\":\r\n      return \"واحد اجرایی\";\r\n    case \"Operator\":\r\n      return \"اپراتور\";\r\n    case \"Mayor\":\r\n      return \"شهردار\";\r\n    case \"Contractor\":\r\n      return \"پیمانکار\";\r\n    default:\r\n      return role;\r\n  }\r\n};\r\n\r\nexport const getFileExtension = (url) =>\r\n  String(url).includes(\".\") ? url.split(\".\")[1] : \"\";\r\n\r\nexport const download = (url) => {\r\n  // document.getElementById(\"download__frame\").src = ``;\r\n  // document.getElementById(\r\n  //   \"download__frame\"\r\n  // ).src = `https://shahrbin.ashkezar.ir:83/${url}`;\r\n};\r\n\r\nexport const downloadImage = (url) => {\r\n  const link = document.createElement(\"a\");\r\n  link.href = `${\r\n    process.env.NODE_ENV === \"development\"\r\n      ? process.env.REACT_APP_API_URL\r\n      : process.env.REACT_APP_API_URL\r\n  }/${url}`;\r\n  link.download = url;\r\n  link.setAttribute(\"target\", \"_blank\");\r\n  link.style.display = \"none\";\r\n  document.body.appendChild(link);\r\n  link.onclick = (e) => {\r\n    e.stopPropagation();\r\n  };\r\n  link.click();\r\n  document.body.removeChild(link);\r\n};\r\n\r\nexport const mapObjectToFormData = (json, formData) => {\r\n  const keys = Object.keys(json);\r\n  keys.forEach((key) => {\r\n    formData.set(key, json[key]);\r\n  });\r\n  return formData;\r\n};\r\n\r\nexport const isTimePassed = (time) => {\r\n  if (!time) return false;\r\n  const targetTime = new Date(time).getTime();\r\n  const currentTime = new Date().getTime();\r\n  return currentTime > targetTime ? true : false;\r\n};\r\n\r\nexport const hasRole = (userRoles = [], acceptedRoles = []) => {\r\n  const contains = userRoles.some((r) => acceptedRoles.indexOf(r) !== -1);\r\n  if (contains) return true;\r\n  else return false;\r\n};\r\n\r\nexport const accessibilityByRoles = (path) => {\r\n  if (path === \"/admin/infos\")\r\n    return [\"Manager\", \"Mayor\", \"Executive\", \"Operator\", \"Admin\", \"Inspector\"];\r\n  if (path === \"/admin/newReports\")\r\n    return [\r\n      \"Manager\",\r\n      \"Mayor\",\r\n      \"Executive\",\r\n      \"Operator\",\r\n      \"Contractor\",\r\n      \"Inspector\",\r\n    ];\r\n  if (path === \"/admin/registerReport\") return [\"Operator\"];\r\n  if (path === \"/admin/reports\")\r\n    return [\r\n      \"Manager\",\r\n      \"Operator\",\r\n      \"Executive\",\r\n      \"Contractor\",\r\n      \"Mayor\",\r\n      \"Inspector\",\r\n    ];\r\n  if (path === \"/admin/manageUsers\") return [\"Admin\"];\r\n  if (path === \"/admin/contractors\") return [\"Executive\"];\r\n  if (path === \"/admin/createPoll\") return [\"Admin\"];\r\n  if (path === \"/admin/polls\") return [\"Admin\"];\r\n  if (path === \"/admin/comments\") return [\"Operator\"];\r\n  if (path === \"/admin/categories\") return [\"Admin\"];\r\n  if (path === \"/admin/processes\") return [\"Admin\"];\r\n  if (path === \"/admin/organizationalUnits\") return [\"Admin\"];\r\n  if (path === \"/admin/violations\") return [\"Operator\"];\r\n  if (path === \"/admin/quickAccess\") return [\"Admin\"];\r\n  if (path === \"/admin/complaints\") return [\"ComplaintInspector\"];\r\n  if (path === \"/admin/allComplaints\") return [\"ComplaintInspector\"];\r\n  if (path === \"/admin/complaints-categories\") return [\"ComplaintAdmin\"];\r\n  if (path === \"/admin/complaints-units\") return [\"ComplaintAdmin\"];\r\n  if (String(path).toLowerCase().startsWith(\"/admin/poll/\")) return [\"Admin\"];\r\n};\r\n\r\nexport const checkPassword = (value) => {\r\n  let regex = \"^\";\r\n  let errorMessage = \"رمز عبور شما باید شامل حداقل \";\r\n  const passwordRequirements = String(process.env.REACT_APP_PASSWORD)\r\n    .split(\",\")\r\n    .map((r) => r.trim());\r\n  const hasMinimum = passwordRequirements.find((a) => a.includes(\"minimum\"));\r\n  const hasUppercase = passwordRequirements.indexOf(\"uppercase\") !== -1;\r\n  const hasLowercase = passwordRequirements.indexOf(\"lowercase\") !== -1;\r\n  const hasSpecialCharacters =\r\n    passwordRequirements.indexOf(\"special_characters\") !== -1;\r\n  const hasNumbers = passwordRequirements.indexOf(\"numbers\") !== -1;\r\n  const hasWords = passwordRequirements.indexOf(\"words\") !== -1;\r\n  if (hasLowercase) {\r\n    regex += \"(?=.*[a-z])\";\r\n    errorMessage += \"یک حرف کوچک، \";\r\n  }\r\n  if (hasUppercase) {\r\n    regex += \"(?=.*[A-Z])\";\r\n    errorMessage += \"یک حرف بزرگ، \";\r\n  }\r\n  if (hasNumbers) {\r\n    regex += \"(?=.*\\\\d)\";\r\n    errorMessage += \"یک عدد، \";\r\n  }\r\n  if (hasSpecialCharacters) {\r\n    regex += \"(?=.*[@$!%*?&])\";\r\n    errorMessage += \"یک کاراکتر خاص \";\r\n  }\r\n  if (hasWords) {\r\n    regex += \"(?=.*[a-zA-Z])\";\r\n    errorMessage += \"یک حرف \";\r\n  }\r\n  if (hasMinimum) {\r\n    const minimum = hasMinimum.replace(/minimum/g, \"\").trim();\r\n    // regex += `[${hasUppercase ? \"A-Z\" : \"\"}${hasLowercase ? \"a-z\" : \"\"}${\r\n    //   hasNumbers ? \"\\\\d\" : \"\"\r\n    // }${hasWords ? \"\\\\w\" : \"\"}${\r\n    //   hasSpecialCharacters ? \"@$!%*?&\" : \"\"\r\n    // }]{${minimum},}`;\r\n    regex += `[A-Za-z\\\\d#@$^!()-_=+%*?&]{${minimum},}`;\r\n    errorMessage += ` و طول${minimum} کاراکتر `;\r\n  }\r\n  regex += \"$\";\r\n  errorMessage += \" باشد.\";\r\n  return {\r\n    isValid: new RegExp(regex).test(value),\r\n    errorMessage,\r\n  };\r\n};\r\n\r\nexport const JalaliDate = {\r\n  g_days_in_month: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\r\n  j_days_in_month: [31, 31, 31, 31, 31, 31, 30, 30, 30, 30, 30, 29],\r\n};\r\n\r\nJalaliDate.jalaliToGregorian = function (j_y, j_m, j_d) {\r\n  j_y = parseInt(j_y);\r\n  j_m = parseInt(j_m);\r\n  j_d = parseInt(j_d);\r\n  var jy = j_y - 979;\r\n  var jm = j_m - 1;\r\n  var jd = j_d - 1;\r\n\r\n  var j_day_no =\r\n    365 * jy + parseInt(jy / 33) * 8 + parseInt(((jy % 33) + 3) / 4);\r\n  for (var i = 0; i < jm; ++i) j_day_no += JalaliDate.j_days_in_month[i];\r\n\r\n  j_day_no += jd;\r\n\r\n  var g_day_no = j_day_no + 79;\r\n\r\n  var gy =\r\n    1600 +\r\n    400 *\r\n      parseInt(\r\n        g_day_no / 146097\r\n      ); /* 146097 = 365*400 + 400/4 - 400/100 + 400/400 */\r\n  g_day_no = g_day_no % 146097;\r\n\r\n  var leap = true;\r\n  if (g_day_no >= 36525) {\r\n    /* 36525 = 365*100 + 100/4 */\r\n    g_day_no--;\r\n    gy +=\r\n      100 * parseInt(g_day_no / 36524); /* 36524 = 365*100 + 100/4 - 100/100 */\r\n    g_day_no = g_day_no % 36524;\r\n\r\n    if (g_day_no >= 365) g_day_no++;\r\n    else leap = false;\r\n  }\r\n\r\n  gy += 4 * parseInt(g_day_no / 1461); /* 1461 = 365*4 + 4/4 */\r\n  g_day_no %= 1461;\r\n\r\n  if (g_day_no >= 366) {\r\n    leap = false;\r\n\r\n    g_day_no--;\r\n    gy += parseInt(g_day_no / 365);\r\n    g_day_no = g_day_no % 365;\r\n  }\r\n\r\n  for (\r\n    var i = 0;\r\n    g_day_no >= JalaliDate.g_days_in_month[i] + (i == 1 && leap);\r\n    i++\r\n  )\r\n    g_day_no -= JalaliDate.g_days_in_month[i] + (i == 1 && leap);\r\n  var gm = i + 1;\r\n  var gd = g_day_no + 1;\r\n\r\n  gm = gm < 10 ? \"0\" + gm : gm;\r\n  gd = gd < 10 ? \"0\" + gd : gd;\r\n\r\n  return [gy, gm, gd];\r\n};\r\n\r\nexport const initialSteps = [\r\n  {\r\n    id: 1,\r\n    title: \"نوع نظرسنجی را انتخاب نمایید.\",\r\n    type: \"radio\",\r\n    finished: false,\r\n    role: \"\",\r\n    writable: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"عنوان نظر سنجی را وارد نمایید.\",\r\n    type: \"input\",\r\n    finished: false,\r\n    role: \"\",\r\n    writable: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"سوال نظرسنجی را اینجا وارد نمایید.\",\r\n    type: \"editor\",\r\n    finished: false,\r\n    role: \"question\",\r\n    writable: true,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"گزینه نظرسنجی را اینجا وارد نمایید.\",\r\n    type: \"editor\",\r\n    finished: false,\r\n    role: \"answer\",\r\n    writable: true,\r\n    shortTitle: \"\",\r\n  },\r\n];\r\n\r\nexport const pollTypes = [\r\n  {\r\n    id: 0,\r\n    label: \"تک انتخابی\",\r\n  },\r\n  {\r\n    id: 1,\r\n    label: \"چند انتخابی\",\r\n  },\r\n  {\r\n    id: 2,\r\n    label: \"توضیحی\",\r\n  },\r\n];\r\n\r\nexport const mapPollStatus = (status) => {\r\n  switch (status) {\r\n    case 0:\r\n      return \"فعال\";\r\n    case 1:\r\n      return \"تعلیق\";\r\n    case 2:\r\n      return \"منقضی شده\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const mapPriorities = (priority) => {\r\n  switch (priority) {\r\n    case 0:\r\n      return \"خیلی کم\";\r\n    case 1:\r\n      return \"کم\";\r\n    case 2:\r\n      return \"عادی\";\r\n    case 3:\r\n      return \"زیاد\";\r\n    case 4:\r\n      return \"خیلی زیاد\";\r\n    case 5:\r\n      return \"فوری\";\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport const childrenCount = (node) => node.children.length;\r\n\r\nexport const fixURL = (path, isAPIAddress = true) => {\r\n  return process.env.NODE_ENV === \"development\"\r\n    ? `${process.env.REACT_APP_API_URL}/${isAPIAddress ? \"api\" : \"\"}${path}`\r\n    : `${process.env.REACT_APP_API_URL}/${isAPIAddress ? \"api\" : \"\"}${path}`;\r\n};\r\n\r\nexport const showErrorMessage = (res) => {\r\n  // Error 500\r\n  if (!res || String(res.status).startsWith(\"5\")) {\r\n    toast(\"خطایی رخ داد. لطفا از اتصال اینترنت خود اطمینان حاصل نمایید.\", {\r\n      type: \"error\",\r\n    });\r\n    return;\r\n  }\r\n\r\n  if (res && res.status === 0) {\r\n    toast(\"لطفا تمام اطلاعات خواسته شده را وارد نمایید.\", { type: \"error\" });\r\n    return;\r\n  }\r\n\r\n  if (res && res.status === 428) {\r\n    toast(res && res.data && res.data.message, { type: \"success\" });\r\n    return;\r\n  }\r\n\r\n  // Bad Requests\r\n  toast(\r\n    res && res.data && res.data.message\r\n      ? res.data.message\r\n      : \"مشکلی در ارسال درخواست به وجود آمد.\",\r\n    { type: \"error\" }\r\n  );\r\n  return;\r\n};\r\n\r\nexport const getAuthToken = () =>\r\n  getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n\r\nexport const callAPI = (\r\n  {\r\n    caller = new Promise(),\r\n    successStatus = 200,\r\n    payload = null,\r\n    successCallback = (f) => f,\r\n    errorCallback = (f) => f,\r\n    requestEnded = (f) => f,\r\n  },\r\n  ...args\r\n) => {\r\n  const token = getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n  const instance =\r\n    getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_INSTANCE) || {id: 0};\r\n  const source = axios.CancelToken.source();\r\n  caller(token, payload, source, instance, ...args)\r\n    .then((res) => {\r\n      requestEnded();\r\n      // if server didn't respond\r\n      if (res === undefined) {\r\n        toast(\"مشکلی در ارسال درخواست به سرور به وجود آمد\", { type: \"error\" });\r\n        return;\r\n      }\r\n\r\n      // if request succeeded\r\n      if (res.status === successStatus) {\r\n        successCallback(res);\r\n        return;\r\n      } else if (res.status === 401) {\r\n        showErrorMessage(res);\r\n        if (token) {\r\n          logout(() => {\r\n            window.location.pathname = \"/login\";\r\n          });\r\n        }\r\n      } else {\r\n        showErrorMessage(res);\r\n        errorCallback(res);\r\n        return;\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      requestEnded();\r\n    });\r\n};\r\n\r\nexport const constants = {\r\n  SHAHRBIN_MODE: \"SHAHRBIN_MODE\",\r\n  SHAHRBIN_MANAGEMENT_AUTH_TOKEN: \"SHAHRBIN_MANAGEMENT_AUTH_TOKEN\",\r\n  SHAHRBIN_MANAGEMENT_AUTH_TOKEN_EXPIRATION:\r\n    \"SHAHRBIN_MANAGEMENT_AUTH_TOKEN_EXPIRATION\",\r\n  SHAHRBIN_MANAGEMENT_USER_ROLES: \"SHAHRBIN_MANAGEMENT_USER_ROLES\",\r\n  SHAHRBIN_MANAGEMENT_LOGIN_TIME: \"SHAHRBIN_MANAGEMENT_LOGIN_TIME\",\r\n  SHAHRBIN_MANAGEMENT_INSTANCE: \"SHAHRBIN_MANAGEMENT_INSTANCE\",\r\n};\r\n\r\nexport const appRoutes = {\r\n  newReports: \"/admin/newReports\",\r\n  complaints: \"/admin/complaints\",\r\n  allComplaints: \"/admin/allComplaints\",\r\n  infos: \"/admin/infos\",\r\n  registerReport: \"/admin/registerReport\",\r\n  reports: \"/admin/reports\",\r\n  contractors: \"/admin/contractors\",\r\n  manageUsers: \"/admin/manageUsers\",\r\n  polls: \"/admin/polls\",\r\n  poll: \"/admin/poll/:id\",\r\n  comments: \"/admin/comments\",\r\n  categories: \"/admin/categories\",\r\n  processes: \"/admin/processes\",\r\n  organizationalUnits: \"/admin/organizationalUnits\",\r\n  violations: \"/admin/violations\",\r\n  quickAccess: \"/admin/quickAccess\",\r\n  complaintsCategories: \"/admin/complaints-categories\",\r\n  complaintsUnits: \"/admin/complaints-units\",\r\n  login: \"/\",\r\n};\r\n\r\nexport const randomColor = () =>\r\n  `rgb(${Math.round(Math.random() * 255)}, ${Math.round(\r\n    Math.random() * 255\r\n  )}, ${Math.round(Math.random() * 255)})`;\r\n\r\nexport const formatLabel = (str, maxwidth) => {\r\n  var sections = [];\r\n  var words = str.split(\" \");\r\n  var temp = \"\";\r\n\r\n  words.forEach(function (item, index) {\r\n    if (temp.length > 0) {\r\n      var concat = temp + \" \" + item;\r\n\r\n      if (concat.length > maxwidth) {\r\n        sections.push(temp);\r\n        temp = \"\";\r\n      } else {\r\n        if (index == words.length - 1) {\r\n          sections.push(concat);\r\n          return;\r\n        } else {\r\n          temp = concat;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (index == words.length - 1) {\r\n      sections.push(item);\r\n      return;\r\n    }\r\n\r\n    if (item.length < maxwidth) {\r\n      temp = item;\r\n    } else {\r\n      sections.push(item);\r\n    }\r\n  });\r\n\r\n  return sections;\r\n};\r\n\r\nexport const getRegions = () => {\r\n  return new Promise((resolve) => {\r\n    callAPI({\r\n      caller: CommonAPI.getRegions,\r\n      successCallback: (res) => {\r\n        resolve(res.data);\r\n      },\r\n    });\r\n  });\r\n};\r\n\r\nexport const findRegionId = (regions, geofences) => {\r\n  const region = geofences.find((g) => g.type === \"9100\");\r\n  const regionId =\r\n    regions.find((r) => String(r.parsimapCode) === String(region.id))?.id || \"\";\r\n  return regionId;\r\n};\r\n\r\nexport const jalaaliMonth = [\r\n  \"فروردین\",\r\n  \"اردیبهشت\",\r\n  \"خرداد\",\r\n  \"تیر\",\r\n  \"مرداد\",\r\n  \"شهریور\",\r\n  \"مهر\",\r\n  \"آبان\",\r\n  \"آذر\",\r\n  \"دی\",\r\n  \"بهمن\",\r\n  \"اسفند\",\r\n];\r\n\r\nexport const jalaalWeekDays = [\r\n  \"شنبه\",\r\n  \"یکشنبه\",\r\n  \"دوشنبه\",\r\n  \"سه‌شنبه\",\r\n  \"چهارشنبه\",\r\n  \"پنج‌شنبه\",\r\n  \"جمعه\",\r\n];\r\n\r\nexport const getDatePickerFormat = (date) => {\r\n  if (date) {\r\n    const dateString = date.split(\"T\")[0].replace(/-/g, \"/\");\r\n    const jalaaliDate = moment(dateString).format(\"jYYYY/jMM/jDD\");\r\n    const dateArray = fixDigit(jalaaliDate, true).split(\"/\");\r\n    const dateObject = {\r\n      year: parseInt(dateArray[0]),\r\n      month: parseInt(dateArray[1]),\r\n      day: parseInt(dateArray[2]),\r\n    };\r\n    return dateObject;\r\n  } else return \"\";\r\n};\r\n\r\nexport const createQueryParams = (url, queries = {}) => {\r\n  const myUrl = new URL(url);\r\n  const {\r\n    fromDate,\r\n    toDate,\r\n    query,\r\n    categoryIds,\r\n    organs,\r\n    regions,\r\n    roles,\r\n    page,\r\n    perPage,\r\n    statuses,\r\n  } = queries;\r\n  if (page) myUrl.searchParams.append(\"PageNumber\", page);\r\n  if (perPage) myUrl.searchParams.append(\"PageSize\", perPage);\r\n  if (fromDate) myUrl.searchParams.append(\"SentFromDate\", fromDate);\r\n  if (toDate) myUrl.searchParams.append(\"SentToDate\", toDate);\r\n  if (query) myUrl.searchParams.append(\"Query\", query);\r\n  if (categoryIds && categoryIds.length > 0)\r\n    categoryIds.forEach((c) => myUrl.searchParams.append(\"CategoryIds\", c));\r\n  if (organs && organs.length > 0)\r\n    organs.forEach((o) => myUrl.searchParams.append(\"ExecutiveIds\", o.id));\r\n  if (regions && regions.length > 0)\r\n    regions.forEach((r) => myUrl.searchParams.append(\"RegionIds\", r.id));\r\n  if (roles && roles.length > 0)\r\n    roles.forEach((r) => myUrl.searchParams.append(\"RoleNames\", r.roleName));\r\n  if (statuses && statuses.length > 0)\r\n    statuses.forEach((r) =>\r\n      myUrl.searchParams.append(\"CurrentStates\", r.value)\r\n    );\r\n\r\n  return myUrl;\r\n};\r\n\r\nexport const defaultFilters = {\r\n  fromDate: \"\",\r\n  toDate: \"\",\r\n  query: \"\",\r\n  categoryIds: [],\r\n  regions: [],\r\n  organs: [],\r\n  roles: [],\r\n  statuses: [],\r\n};\r\n\r\nexport const lastStatuses = [\r\n  {\r\n    id: \"ls-1\",\r\n    title: \"در حال بررسی\",\r\n    value: 0,\r\n  },\r\n  {\r\n    id: \"ls-2\",\r\n    title: \"پایان‌یافته\",\r\n    value: 1,\r\n  },\r\n  {\r\n    id: \"ls-3\",\r\n    title: \"ارجاع به واحد بازرسی\",\r\n    value: 2,\r\n  },\r\n  {\r\n    id: \"ls-4\",\r\n    title: \"تایید‌شده\",\r\n    value: 3,\r\n  },\r\n];\r\n\r\nexport const showSizeError = () => {\r\n  toast(\"حجم پیوست‌ها نمی‌تواند از 10 مگابایت بیشت باشد.\", { type: \"error\" });\r\n};\r\n\r\nexport const showExtensionError = () => {\r\n  toast(\"فرمت فایل انتخابی مجاز نیست.\", { type: \"error\" });\r\n};\r\n\r\nexport const checkOverlAllSize = (attachments) => {\r\n  const overallSize = attachments.reduce((t, a) => t + a.size, 0);\r\n  if (overallSize > MAX_SIZE) {\r\n    return false;\r\n  } else return true;\r\n};\r\n\r\nexport const isImage = (path) =>\r\n  [\r\n    \"jpg\",\r\n    \"jpeg\",\r\n    \"jpe\",\r\n    \"jif\",\r\n    \"jfif\",\r\n    \"jfi\",\r\n    \"png\",\r\n    \"gif\",\r\n    \"tiff\",\r\n    \"tif\",\r\n    \"svg\",\r\n    \"svgz\",\r\n  ].some((ext) => ext === getExtension(path).toLowerCase());\r\n\r\nexport const checkExtensions = (path) => {\r\n  const allowedExtensions = [\r\n    \"jpg\",\r\n    \"jpeg\",\r\n    \"jpe\",\r\n    \"jif\",\r\n    \"jfif\",\r\n    \"jfi\",\r\n    \"png\",\r\n    \"gif\",\r\n    \"tiff\",\r\n    \"tif\",\r\n    \"svg\",\r\n    \"svgz\",\r\n    \"pdf\",\r\n    \"mkv\",\r\n    \"mp4\",\r\n    \"mov\",\r\n    \"3gp\",\r\n    \"ogg\",\r\n    \"docx\",\r\n    \"doc\",\r\n    \"pptx\",\r\n    \"ppt\",\r\n    \"xlsx\",\r\n    \"xls\",\r\n    \"xlsm\",\r\n  ];\r\n\r\n  const extension = getExtension(path);\r\n  return allowedExtensions.indexOf(extension.toLowerCase()) !== -1;\r\n};\r\n\r\nexport const getExtension = (path) =>\r\n  String(path).split(\".\")[String(path).split(\".\").length - 1];\r\n\r\nexport const isFile = (media) => media instanceof File;\r\n\r\nexport const closeModal = () => {\r\n  modalRoot.classList.remove(\"active\");\r\n};\r\n\r\nexport const openModal = () => {\r\n  modalRoot.classList.add(\"active\");\r\n};\r\n","D:\\projects\\shahrbin-admin\\src\\store\\context.js",[],["671","672"],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\NotFound.js",["673","674"],"import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst NotFound = () => {\r\n    \r\n    return (\r\n        <div>\r\n            page not found\r\n        </div>\r\n    )\r\n}\r\n\r\nNotFound.propTypes = {\r\n\r\n}\r\n\r\nexport default NotFound\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\RegisterReport.js",["675","676","677","678","679","680"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { CommonAPI, ReportsAPI } from \"../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  closeModal,\r\n  findRegionId,\r\n  fixDigit,\r\n  getRegions,\r\n} from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport ReportDialog from \"../commons/dataDisplay/ReportDialog\";\r\nimport SelectOnMapDialog from \"../commons/dialogs/SelectOnMapDialog\";\r\nimport TreeSystem from \"../commons/dialogs/TreeSystem\";\r\nimport Button from \"../helpers/Button\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport SelectBox from \"../helpers/SelectBox\";\r\nimport Textarea from \"../helpers/Textarea\";\r\nimport TextInput from \"../helpers/TextInput\";\r\nimport { toast } from \"react-toastify\";\r\nimport Radio from \"../helpers/Radio/Radio\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport IsIdentityVisible from \"../helpers/IsIdentityVisible\";\r\nimport AttachmentToggle from \"../commons/dataDisplay/Attachment/AttachmentToggle\";\r\nimport NavigatableDialog from \"../helpers/NavigatableDialog\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst defaultValues = {\r\n  comments: \"\",\r\n  phoneNumber: \"\",\r\n  firstName: \"\",\r\n  lastName: \"\",\r\n  address: \"\",\r\n  coordinates: {\r\n    latitude: null,\r\n    longitude: null,\r\n  },\r\n  region: \"\",\r\n};\r\n\r\nconst RegisterReport = () => {\r\n  const childData = useRef(null);\r\n\r\n  const [store = {}] = useContext(AppStore);\r\n  const { initials: { regions } = {} } = store;\r\n\r\n  const [values, setValues] = useState(defaultValues);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [attachments, setAttachments] = useState([]);\r\n  const [categoryId, setCategoryId] = useState(null);\r\n  const [categoryTitle, setCategoryTitle] = useState(\"\");\r\n  const [reportId, setReportId] = useState(null);\r\n  const [referDialog, setReferDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState(null);\r\n  const [mapDialog, setMapDialog] = useState(false);\r\n  const [categoryDialog, setCategoryDialog] = useState(false);\r\n  const [mapLoading, setMapLoading] = useState(false);\r\n  const [isIdentityVisible, setIsIdentityVisible] = useState(true);\r\n  const [isPublic, setIsPublic] = useState(0);\r\n  const [reset, setReset] = useState(false);\r\n\r\n  const handleChange = (name) => (e) => {\r\n    setValues({ ...values, [name]: e.target.value });\r\n  };\r\n\r\n  const validate = () => {\r\n    if (!values.coordinates.latitude || !values.coordinates.longitude) {\r\n      return {\r\n        state: false,\r\n        message: \"لطفا مکان محل درخواست را روی نقشه انتخاب کنید\",\r\n      };\r\n    }\r\n    if (!categoryId) {\r\n      return {\r\n        state: false,\r\n        message: \"لطفا یک دسته‌بندی را انتخاب کنید.\",\r\n      };\r\n    }\r\n    if (!values.region) {\r\n      return {\r\n        state: false,\r\n        message: \"لطفا منطقه محل گزارش را انتخاب نمایید.\",\r\n      };\r\n    }\r\n    if (!values.phoneNumber) {\r\n      return {\r\n        state: false,\r\n        message: \"لطفا شماره تلفن را وارد نمایید.\",\r\n      };\r\n    }\r\n\r\n    return { state: true };\r\n  };\r\n\r\n  const registerReport = (e) => {\r\n    const validation = validate();\r\n    if (validation.state) {\r\n      const payload = new FormData();\r\n      payload.set(\"categoryId\", categoryId);\r\n      payload.set(\"comments\", values.comments);\r\n      payload.set(\"firstName\", values.firstName);\r\n      payload.set(\"lastName\", values.lastName);\r\n      payload.set(\"isIdentityVisible\", isIdentityVisible);\r\n      payload.set(\"visibility\", isPublic);\r\n      payload.set(\"address.detail\", values.address);\r\n      if (values.coordinates.latitude) {\r\n        payload.set(\"address.latitude\", values.coordinates.latitude);\r\n      }\r\n      if (values.coordinates.longitude) {\r\n        payload.set(\"address.longitude\", values.coordinates.longitude);\r\n      }\r\n      payload.set(\"address.regionId\", values.region && values.region);\r\n      payload.set(\"phoneNumber\", fixDigit(values.phoneNumber, true));\r\n      attachments.forEach((attachment) => {\r\n        payload.append(\"attachments\", attachment.file);\r\n      });\r\n      callRegister(payload);\r\n    } else {\r\n      toast(validation.message, { type: \"error\" });\r\n    }\r\n  };\r\n\r\n  const callRegister = (payload) => {\r\n    setLoading(true);\r\n    callAPI({\r\n      caller: ReportsAPI.registerByOperator,\r\n      payload,\r\n      successCallback: (res) => {\r\n        setReportId(res.data);\r\n        childData.current = { id: res.data };\r\n        modalRoot.classList.add(\"active\");\r\n        clearValues();\r\n        setReferDialog(true);\r\n      },\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  const onCategoriesSelected = (selecteds) => {\r\n    if (selecteds.length > 0) {\r\n      const selected = selecteds[0];\r\n      setCategoryTitle(selected.title);\r\n      setCategoryId(selected.id);\r\n    } else {\r\n      setCategoryTitle(\"\");\r\n      setCategoryId(null);\r\n    }\r\n    modalRoot.classList.remove(\"active\");\r\n  };\r\n\r\n  const onCloseCategoryDialog = () => {\r\n    setCategoryDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n  };\r\n\r\n  const saveAddressChanges = (detail, coordinates, geofences = []) => {\r\n    let regionId = \"\";\r\n    if (geofences) {\r\n      regionId = findRegionId(regions, geofences);\r\n    }\r\n    setValues({ ...values, address: detail, coordinates, region: regionId });\r\n    closeModal();\r\n  };\r\n\r\n  const clearValues = () => {\r\n    setValues(defaultValues);\r\n    setAttachments([]);\r\n    setCategoryId(null);\r\n    setCategoryTitle(\"\");\r\n    setIsIdentityVisible(true);\r\n    setIsPublic(0);\r\n    setReset(true);\r\n    setTimeout(() => {\r\n      setReset(false);\r\n    }, 500);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setReferDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    clearValues();\r\n  };\r\n\r\n  const onVisibilityChange = (name) => (e) =>\r\n    setIsPublic(name === \"public\" ? 0 : 1);\r\n\r\n  const onAddAttachment = (attachs) => {\r\n    setAttachments(attachs);\r\n  };\r\n\r\n  const visibilityOptions = [\r\n    {\r\n      id: \"vs-1\",\r\n      checked: isPublic === 0,\r\n      name: \"public\",\r\n      title: \"عمومی\",\r\n    },\r\n    {\r\n      id: \"vs-2\",\r\n      checked: isPublic !== 0,\r\n      name: \"private\",\r\n      title: \"خصوصی\",\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <LayoutScrollable>\r\n        <div className=\"w100 mxa br05 bg-white pt2 \">\r\n          <div className=\"w90 mxa frc wrap\">\r\n            <div className=\"w100 row\">\r\n              <TextInput\r\n                value={values.phoneNumber}\r\n                name=\"phoneNumber\"\r\n                onChange={handleChange}\r\n                required={false}\r\n                title=\"تلفن همراه\"\r\n                wrapperClassName=\"col-md-6 col-sm-12\"\r\n              />\r\n              <TextInput\r\n                value={values.firstName}\r\n                name=\"firstName\"\r\n                onChange={handleChange}\r\n                required={false}\r\n                title=\"نام\"\r\n                wrapperClassName=\"col-md-6 col-sm-12\"\r\n              />\r\n            </div>\r\n            <div className=\"w100 row\">\r\n              <TextInput\r\n                value={values.lastName}\r\n                name=\"lastName\"\r\n                onChange={handleChange}\r\n                required={false}\r\n                title=\"نام خانوادگی\"\r\n                wrapperClassName=\"col-md-6 col-sm-12\"\r\n              />\r\n              <TextInput\r\n                value={values.address}\r\n                name=\"address\"\r\n                onChange={handleChange}\r\n                required={false}\r\n                title=\"آدرس\"\r\n                wrapperClassName=\"col-md-6 col-sm-12\"\r\n                inputClassName=\"pointer bg-white\"\r\n                icon=\"fas fa-map-marker-alt\"\r\n                iconClassName=\"f15 text-color\"\r\n                onIconClick={() => setMapDialog(true)}\r\n                onClick={() => setMapDialog(true)}\r\n                readOnly={true}\r\n              >\r\n                <DialogToggler\r\n                  condition={mapDialog}\r\n                  setCondition={setMapDialog}\r\n                  loading={mapLoading}\r\n                  width={700}\r\n                  isUnique={false}\r\n                  outSideClickEvent={\"mousedown\"}\r\n                  id=\"select-on-map-dialog\"\r\n                >\r\n                  <SelectOnMapDialog\r\n                    saveChanges={saveAddressChanges}\r\n                    condition={mapDialog}\r\n                    setCondition={setMapDialog}\r\n                    setLoading={setMapLoading}\r\n                    // width={600}\r\n                    height={500}\r\n                    defaultAddress={values.address}\r\n                  />\r\n                </DialogToggler>\r\n              </TextInput>\r\n            </div>\r\n\r\n            <div className=\"w100 row\">\r\n              <TreeSystem\r\n                caller={CommonAPI.getSubjectGroups}\r\n                condition={categoryDialog}\r\n                setCondition={setCategoryDialog}\r\n                onChange={onCategoriesSelected}\r\n                defaultSelected={[{ id: categoryId }]}\r\n                singleSelect={true}\r\n                onClose={onCloseCategoryDialog}\r\n                renderToggler={(selecteds) => (\r\n                  <TextInput\r\n                    title=\"دسته‌بندی\"\r\n                    readOnly={true}\r\n                    onClick={() => setCategoryDialog(true)}\r\n                    wrapperClassName=\"col-md-6 col-sm-12\"\r\n                    inputClassName=\"pointer\"\r\n                    required={false}\r\n                    value={\r\n                      selecteds.length > 0 && categoryId\r\n                        ? selecteds[0]?.title\r\n                        : \"\"\r\n                    }\r\n                  />\r\n                )}\r\n                reset={reset}\r\n              ></TreeSystem>\r\n              <SelectBox\r\n                // caller={CommonAPI.getRegions}\r\n                handleChange={handleChange}\r\n                staticData={true}\r\n                options={regions}\r\n                name=\"region\"\r\n                handle={[\"name\"]}\r\n                wrapperClassName=\"col-md-6 col-sm-12\"\r\n                title=\"منطقه\"\r\n                value={values.region}\r\n                label=\"منطقه\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"w100 row\">\r\n              <Radio\r\n                name=\"visibility\"\r\n                id=\"visibility\"\r\n                title={\"نوع انتشار\"}\r\n                options={visibilityOptions}\r\n                defaultStyles={true}\r\n                wrapperClassName=\"col-md-6 col-sm-12 px1\"\r\n                onChange={onVisibilityChange}\r\n              />\r\n              <IsIdentityVisible\r\n                wrapperClassName=\"px1 py05 w100 d-flex fdc al-s ju-c relative col-md-6 col-sm-12\"\r\n                value={isIdentityVisible}\r\n                onChange={setIsIdentityVisible}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"w100 mxa\">\r\n            <Textarea\r\n              value={values.comments}\r\n              name=\"comments\"\r\n              handleChange={handleChange}\r\n              title=\"توضیحات\"\r\n              wrapperClassName=\"mxa\"\r\n              inputClassName=\"w100 mxa\"\r\n              defaultStyles={true}\r\n            />\r\n          </div>\r\n          <div className=\"w90 mxa frc mt1 px3\">\r\n            <AttachmentToggle onAddAttachment={onAddAttachment} reset={reset} />\r\n          </div>\r\n\r\n          <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n            <Button\r\n              title=\"ثبت درخواست\"\r\n              className=\"\"\r\n              onClick={registerReport}\r\n              loading={loading}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* <DialogToggler\r\n          condition={referDialog}\r\n          setCondition={setReferDialog}\r\n          isUnique={false}\r\n          width={800}\r\n          height={650}\r\n          id=\"report-dialog-frgthj\"\r\n        >\r\n          <ReportDialog\r\n            setDialog={setReferDialog}\r\n            caller={ReportsAPI.getTask}\r\n            childData={childData.current}\r\n            onNext={closeDialog}\r\n          />\r\n        </DialogToggler> */}\r\n\r\n        <NavigatableDialog\r\n          condition={referDialog}\r\n          dialogId={reportId}\r\n          data={{ id: reportId }}\r\n          setCondition={setReferDialog}\r\n          width={900}\r\n          height={600}\r\n          list={[{ id: reportId }]}\r\n          Child={ReportDialog}\r\n          childProps={{\r\n            id: reportId,\r\n            readOnly: false,\r\n            setDialog: setReferDialog,\r\n            // refresh: refresh,\r\n            caller: ReportsAPI.getTask,\r\n          }}\r\n          id=\"report-dialog\"\r\n        />\r\n      </LayoutScrollable>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterReport;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\NewIdeas.js",[],["681","682"],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\Poll.js",["683"],"import React, { useEffect, useState } from \"react\";\r\nimport { PollAPI } from \"../../apiCalls\";\r\nimport { serverError, unKnownError } from \"../../helperFuncs\";\r\nimport MyPieChart from \"../commons/dataDisplay/MyPieChart\";\r\nimport Loader from \"../helpers/Loader\";\r\nimport Title from \"../helpers/Title\";\r\nimport useMakeRequest from \"../hooks/useMakeRequest\";\r\n\r\nconst Poll = ({ match }) => {\r\n  const [pollId, setPollId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setPollId(match.params.id);\r\n    }\r\n  }, [match.params]);\r\n\r\n  const [data, loading] = useMakeRequest(\r\n    PollAPI.getPollResults,\r\n    200,\r\n    pollId,\r\n    null,\r\n    (res) => {\r\n      if (res.status === 200) return;\r\n      else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    pollId\r\n  );\r\n\r\n  const formatPieData = (data) => {\r\n    const formatted = data.series.map((s, i) => {\r\n      return s.values.map((v) => {\r\n        return {\r\n          value: parseFloat(v.item2),\r\n          name: v.item1,\r\n        };\r\n      });\r\n    });\r\n\r\n    return formatted;\r\n  };\r\n  return (\r\n    <>\r\n      {loading && <Loader />}\r\n      <Title title=\"نتایج نظرسنجی\" size={1} />\r\n      {data.frequencies && (\r\n        <MyPieChart\r\n          data={[\r\n            data.frequencies.map((value) => {\r\n              return {\r\n                name: value.item1.shortTitle,\r\n                value: parseInt(value.item2),\r\n              };\r\n            }),\r\n          ]}\r\n          title={\"نمودار فروانی پاسخ های نظرسنجی\"}\r\n          height={400}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Poll;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Reports.js",["684","685","686","687","688","689","690","691","692","693","694"],"import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport layoutStyle from \"../../stylesheets/layout.module.css\";\r\nimport { InfoAPI, ReportsAPI } from \"../../apiCalls\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport {\r\n  callAPI,\r\n  constants,\r\n  defaultFilters,\r\n  getFromLocalStorage,\r\n  hasRole,\r\n  reportColumn,\r\n  tableLightTheme,\r\n} from \"../../helperFuncs\";\r\nimport ReportDialog from \"../commons/dataDisplay/ReportDialog\";\r\nimport Button from \"../helpers/Button\";\r\nimport NavigatableDialog from \"../helpers/NavigatableDialog\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport EditReportDialog from \"../commons/dialogs/EditReportDialog\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport Excel from \"../helpers/Excel/Excel\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Reports = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // main states\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(10);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [dialogData, setDialogData] = useState(null);\r\n\r\n  // flags\r\n  const [dialog, setDialog] = useState(false);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const queries = {\r\n    page,\r\n    perPage: limit,\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    getReports();\r\n  }, [store.filters, page, limit]);\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getReports();\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  const getReports = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ReportsAPI.getReports,\r\n        successCallback: (res) => {\r\n          setData(res.data);\r\n          if (res.headers[\"x-pagination\"]) {\r\n            const paginationData = JSON.parse(\r\n              res.headers[\"x-pagination\"]\r\n            ).TotalCount;\r\n            setTotalRows(paginationData);\r\n          }\r\n        },\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const openDialog = (row) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n    setDialogData(row);\r\n  };\r\n\r\n  const openEditDialog = (row) => {\r\n    setEditDialog(true);\r\n    setDialogData(row);\r\n  };\r\n\r\n  const refresh = () => {\r\n    getReports();\r\n  };\r\n\r\n  const moreButton = {\r\n    name: \"\",\r\n    cell: (row, index) => (\r\n      <>\r\n        <TableActions\r\n          actions={tableActions}\r\n          rowData={row}\r\n          index={index}\r\n          total={data.length}\r\n          perPage={limit}\r\n        />\r\n      </>\r\n    ),\r\n  };\r\n  const onPageChange = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setLimit(newPerPage);\r\n  };\r\n\r\n  const onEditDialogClose = () => {\r\n    setEditDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    refresh();\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <div className=\"w100 fre\">\r\n        <Filters excel />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // variables\r\n  const userRoles = getFromLocalStorage(\r\n    constants.SHAHRBIN_MANAGEMENT_USER_ROLES\r\n  );\r\n  const isOperator = hasRole(userRoles, [\"Operator\"]);\r\n\r\n  const tableActions = [\r\n    {\r\n      id: \"reports-1\",\r\n      icon: \"fas fa-eye\",\r\n      title: \"مشاهده\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n    // {\r\n    //   id: \"comments-2\",\r\n    //   icon: \"fas fa-edit\",\r\n    //   title: \"ویرایش\",\r\n    //   onClick: (row) => openEditDialog(row),\r\n    //   hide: !isOperator,\r\n    // },\r\n  ];\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <div className={layoutStyle.wrapper}>\r\n          <MyDataTable\r\n            data={data}\r\n            columns={[...reportColumn, moreButton]}\r\n            theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n            onPageChange={onPageChange}\r\n            onRowsPageChange={onRowsPageChange}\r\n            setLoading={setLoading}\r\n            loading={loading}\r\n            filters={true}\r\n            filterTypes={{\r\n              from: true,\r\n              to: true,\r\n              query: true,\r\n              chooseSubject: true,\r\n              stages: false,\r\n              priorities: false,\r\n              regions: true,\r\n              organs: true,\r\n              scatterMap: true,\r\n              category: true,\r\n            }}\r\n            totalRows={totalRows}\r\n          />\r\n        </div>\r\n      </LayoutScrollable>\r\n\r\n      <NavigatableDialog\r\n        condition={dialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        setCondition={setDialog}\r\n        width={900}\r\n        height={600}\r\n        Child={ReportDialog}\r\n        childProps={{\r\n          id: dialogData?.id,\r\n          readOnly: true,\r\n          setDialog: setDialog,\r\n          refresh: refresh,\r\n          caller: InfoAPI.getReportById,\r\n        }}\r\n        list={data}\r\n      />\r\n\r\n      {/* <DialogToggler\r\n        condition={editDialog}\r\n        setCondition={setEditDialog}\r\n        data={dialogData}\r\n        dialogId={dialogData?.id}\r\n        width={700}\r\n        outSideClick={false}\r\n        id=\"edit-report\"\r\n      >\r\n        <EditReportDialog report={dialogData} onClose={onEditDialogClose} />\r\n      </DialogToggler> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Reports);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\NewReports.js",["695","696","697","698","699","700"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport layoutStyle from \"../../stylesheets/layout.module.css\";\r\nimport { ReportsAPI } from \"../../apiCalls\";\r\nimport NewReportsTable from \"../commons/dataDisplay/NewReportsTable\";\r\nimport { callAPI, constants, getFromLocalStorage } from \"../../helperFuncs\";\r\nimport NoData from \"../helpers/NoData/NoData\";\r\nimport useSignalR from \"../hooks/useSignalR\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport Tabs from \"../helpers/Tabs\";\r\nimport TabLabel from \"../helpers/Tabs/TabLabel\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport Search from \"../helpers/Search\";\r\n\r\nconst filterTypes = { query: true, from: true, to: true, statuses: true };\r\n\r\nconst NewReports = ({ match }) => {\r\n  // refs\r\n  let sources = useRef([]);\r\n\r\n  // store\r\n  const [store] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [possibleSources, setPossibleSources] = useState([]);\r\n  const [sourcesCounts, setSourcesCounts] = useState([]);\r\n\r\n  // other states\r\n  const [activeTab, setActiveTab] = useState(\"\");\r\n\r\n  // flags\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const queries = {\r\n    page: 1,\r\n    perPage: 10,\r\n    ...store.filters,\r\n  };\r\n  const instanceId = getFromLocalStorage(\r\n    constants.SHAHRBIN_MANAGEMENT_INSTANCE_ID\r\n  );\r\n\r\n  // get sources\r\n  useEffect(() => {\r\n    getSources();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      setPossibleSources([]);\r\n      sources.current = [];\r\n      getSources();\r\n    }\r\n  }, [store.refresh.call]);\r\n\r\n  const getSources = () => {\r\n    setLoading(true);\r\n    callAPI({\r\n      caller: ReportsAPI.getPossibleSources,\r\n      successStatus: 200,\r\n      successCallback: (res) => {\r\n        setPossibleSources(res.data);\r\n        sources.current = res.data;\r\n        const activeTab = res.data.length > 0 ? res.data[0].roleId : \"\";\r\n        setActiveTab(activeTab);\r\n        getTasksCounts(res.data).then((counts) => {\r\n          updateCount(counts);\r\n        });\r\n      },\r\n      requestEnded: () => {\r\n        setLoading(false);\r\n      },\r\n    });\r\n  };\r\n\r\n  const getTasksCounts = (sources) => {\r\n    const promises = sources.map((source) => {\r\n      return new Promise((resolve, reject) => {\r\n        const token = getFromLocalStorage(\r\n          constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN\r\n        );\r\n        ReportsAPI.getTasks(\r\n          token,\r\n          source.roleId,\r\n          null,\r\n          instanceId,\r\n          queries\r\n        ).then((res) => {\r\n          if (res && res.status === 200) {\r\n            const pagination = res.headers[\"x-pagination\"];\r\n            const totalCount = JSON.parse(pagination)?.TotalCount;\r\n            resolve(totalCount);\r\n          } else reject();\r\n        });\r\n      });\r\n    });\r\n\r\n    return Promise.all(promises);\r\n  };\r\n\r\n  const updateCount = (counts) => {\r\n    setSourcesCounts(counts);\r\n  };\r\n\r\n  const onRefer = () => {\r\n    onChangeReceived(\"on refer\");\r\n  };\r\n\r\n  const onChangeReceived = (x = \"signalr\") => {\r\n    getTasksCounts(sources.current).then((counts) => {\r\n      updateCount(counts);\r\n      // console.log(\"new counts: \", counts);\r\n    });\r\n  };\r\n\r\n  const onTabChange = (tab) => {\r\n    setActiveTab(tab);\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        {tabs.length > 0 ? (\r\n          <Tabs\r\n            mainClass=\"report-tab\"\r\n            activeClass=\"active\"\r\n            onTabChange={onTabChange}\r\n            wrapperClassName=\"scrollbar-h\"\r\n          >\r\n            {tabs.map((tab) => (\r\n              <div\r\n                id={tab.id}\r\n                label={<TabLabel tab={tab} activeTab={activeTab} />}\r\n                key={tab.id}\r\n              ></div>\r\n            ))}\r\n          </Tabs>\r\n        ) : (\r\n          <div className=\"report-tabs\"></div>\r\n        )}\r\n\r\n        {/* <div className={\"frc\"}> */}\r\n        {/* <Search /> */}\r\n        <Filters filterTypes={filterTypes} />\r\n        {/* </div> */}\r\n      </>\r\n    );\r\n  };\r\n\r\n  // variables\r\n  // const noData = !loading && possibleSources.length === 0;\r\n\r\n  const tabs = possibleSources.map((source, i) => {\r\n    return {\r\n      id: source.roleId,\r\n      title: source.roleTitle,\r\n      badge: sourcesCounts[i] !== undefined ? sourcesCounts[i] : \"\",\r\n    };\r\n  });\r\n\r\n  useSignalR(onChangeReceived);\r\n  return (\r\n    <>\r\n      <div className={layoutStyle.wrapper}>\r\n        <TableHeader renderHeader={renderTableHeader} />\r\n        <NewReportsTable roleId={activeTab} onRefer={onRefer} />\r\n      </div>\r\n\r\n      {/* {noData ? <NoData title=\"درخواستی وجود ندارد.\" /> : null} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(NewReports);\r\n\r\nconst TableLegend = () => {\r\n  // TODO: fix placing legend on right side of the table\r\n  return (\r\n    <section className=\"fixed b0 w100 mxa d-flex ju-c al-c my1 wrap mh50\">\r\n      <div className=\"frc mx1 my1\">\r\n        <span\r\n          className={\"frc sq25 br50\"}\r\n          style={{ background: \"#f6c5078f\" }}\r\n        ></span>\r\n        <span className=\"mr1 f12 text-dark\">زمان پاسخگویی منقضی شده است.</span>\r\n      </div>\r\n      <div className=\"frc mx1 my1\">\r\n        <span\r\n          className={\"frc sq25 br50\"}\r\n          style={{ background: \"#C78E8E\" }}\r\n        ></span>\r\n        <span className=\"mr1 f12 text-dark\">زمان اتمام منقضی شده است.</span>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Polls.js",["701","702","703"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { PollAPI } from \"../../apiCalls\";\r\nimport {\r\n  convertserverTimeToDateString,\r\n  tableLightTheme,\r\n  mapPollStatus,\r\n  callAPI,\r\n  appRoutes,\r\n  defaultFilters,\r\n} from \"../../helperFuncs\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport { toast } from \"react-toastify\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Loader from \"../helpers/Loader\";\r\nimport Button from \"../helpers/Button\";\r\nimport CreatePoll from \"../screens/CreatePoll\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport ConfirmDialog from \"../commons/dialogs/ConfirmDialog\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Polls = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [pollData, setPollData] = useState(null);\r\n  const [dialog, setDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState(null);\r\n  const [createPollDialog, setCreatePollDialog] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [statusLoading, setStatusLoading] = useState(false);\r\n\r\n  const queries = {\r\n    ...store.filters,\r\n  };\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getPolls();\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getPolls();\r\n  }, [store.filters]);\r\n\r\n  const getPolls = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: PollAPI.getAllPolls,\r\n        successCallback: (res) => setData(res.data),\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const openCreatePollDialog = () => {\r\n    setPollData(null);\r\n    setCreatePollDialog(true);\r\n  };\r\n\r\n  const onPollCreated = () => {\r\n    setCreatePollDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getPolls();\r\n  };\r\n\r\n  const editPoll = (data) => {\r\n    setPollData(data);\r\n    setCreatePollDialog(true);\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `poll-1`,\r\n      title: \"مشاهده\",\r\n      icon: \"far fa-eye\",\r\n      onClick: (row) => history.push(appRoutes.poll.replace(/:id/, row.id)),\r\n    },\r\n    {\r\n      id: `poll-2`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => editPoll(row),\r\n    },\r\n    {\r\n      id: `poll-3`,\r\n      title: (row) =>\r\n        row.status === 0\r\n          ? \"غیر‌فعال کردن\"\r\n          : row.status === 1\r\n          ? \"فعال کردن\"\r\n          : \"\",\r\n      icon: (row) =>\r\n        row.status === 0\r\n          ? \"fas fa-times\"\r\n          : row.status === 1\r\n          ? \"fas fa-recycle\"\r\n          : \"\",\r\n      onClick: (row) =>\r\n        changePollStatus(\r\n          row.id,\r\n          row.status === 0 ? 1 : row.status === 1 ? 0 : 0\r\n        ),\r\n    },\r\n    {\r\n      id: `poll-4`,\r\n      title: \"حذف\",\r\n      icon: \"far fa-trash-alt\",\r\n      onClick: (row) => handleDialog(\"open\", row),\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      name: \"عنوان\",\r\n      selector: \"title\",\r\n    },\r\n    {\r\n      name: \"تاریخ ایجاد\",\r\n      cell: (row) => <span>{convertserverTimeToDateString(row.created)}</span>,\r\n    },\r\n    {\r\n      name: \"وضعیت\",\r\n      cell: (row) => <span>{mapPollStatus(row.status)}</span>,\r\n    },\r\n    {\r\n      name: \"اقدامات\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            total={data.length}\r\n            perPage={data.length}\r\n            rowData={row}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handleDialog = (action, row) => {\r\n    setDialogData(row);\r\n    if (action === \"open\") {\r\n      modalRoot.classList.add(\"active\");\r\n      setDialog(true);\r\n    }\r\n    if (action === \"close\") {\r\n      modalRoot.classList.remove(\"active\");\r\n      setDialog(false);\r\n    }\r\n  };\r\n\r\n  const changePollStatus = (id, action) => {\r\n    setStatusLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: PollAPI.changePollStatus,\r\n        payload: action,\r\n        successStatus: 204,\r\n        successCallback: (res) => {\r\n          toast(\"عملیات با موفقیت انجام شد.\", { type: \"success\" });\r\n          getPolls();\r\n        },\r\n        requestEnded: () => {\r\n          setDialog(false);\r\n          modalRoot.classList.remove(\"active\");\r\n          setStatusLoading(false);\r\n        },\r\n      },\r\n      id\r\n    );\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف نظرسنجی\"\r\n          icon=\"fas fa-poll\"\r\n          onClick={openCreatePollDialog}\r\n        />\r\n        <Filters filterTypes={{ query: true, from: true, to: true }} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {statusLoading && <Loader />}\r\n\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          columns={columns}\r\n          data={data}\r\n          loading={loading}\r\n          setLoading={setLoading}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          pagination={false}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      <DialogToggler\r\n        condition={createPollDialog}\r\n        setCondition={setCreatePollDialog}\r\n        width={window.innerWidth}\r\n        height={800}\r\n        isUnique={false}\r\n        id=\"create-poll-dialog\"\r\n      >\r\n        <CreatePoll onPollCreated={onPollCreated} pollData={pollData} />\r\n      </DialogToggler>\r\n\r\n      <DialogToggler\r\n        condition={dialog}\r\n        setCondition={setDialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        width={350}\r\n        isUnique={true}\r\n        id=\"confirm-dialog\"\r\n      >\r\n        <ConfirmDialog\r\n          onConfirm={() => changePollStatus(dialogData?.id, 3)}\r\n          onCancel={() => handleDialog(\"close\", null)}\r\n          message=\"آیا از انجام این عملیات اطمینان دارید؟\"\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Polls;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Contractors.js",["704","705","706","707","708","709","710","711","712"],"import React, { useRef, useState } from \"react\";\r\nimport layoutStyle from \"../../stylesheets/layout.module.css\";\r\nimport useMakeRequest from \"../hooks/useMakeRequest\";\r\nimport { AuthenticateAPI, UserInfoAPI } from \"../../apiCalls\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport {\r\n  doesExist,\r\n  serverError,\r\n  tableLightTheme,\r\n  unKnownError,\r\n} from \"../../helperFuncs\";\r\nimport Avatar from \"../commons/dataDisplay/Avatar\";\r\nimport RegisterForm from \"../commons/submission/RegisterForm\";\r\nimport Button from \"../helpers/Button\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Contractors = () => {\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(10);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [dialog, setDialog] = useState(false);\r\n  const [dialogId, setDialogId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [fromDate, setFromDate] = useState(\"\");\r\n  const [toDate, setToDate] = useState(\"\");\r\n  const [query, setQuery] = useState(\"\");\r\n  const [makeRequest, setMakeRequest] = useState(1);\r\n  const [contractorDialog, setContractorDialog] = useState(false);\r\n\r\n  const [data] = useMakeRequest(\r\n    UserInfoAPI.getAllUsers,\r\n    200,\r\n    makeRequest,\r\n    null,\r\n    (res) => {\r\n      setLoading(false);\r\n      if (res.status === 200) {\r\n        if (res.headers[\"x-pagination\"]) {\r\n          const paginationData = JSON.parse(\r\n            res.headers[\"x-pagination\"]\r\n          ).TotalCount;\r\n          setTotalRows(paginationData);\r\n        }\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    { page, perPage: limit, query, roles: [\"Contractor\"], toDate, fromDate }\r\n  );\r\n\r\n  const toggleRef = useRef(null);\r\n\r\n  const openDialog = (id) => (e) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n    setDialogId(id);\r\n  };\r\n\r\n  const userColumn = [\r\n    {\r\n      name: \"تصویر نمایه\",\r\n      cell: (row) => <Avatar url={row.avatar} placeholder={!row.avatar} />,\r\n    },\r\n    {\r\n      name: \"نام\",\r\n      cell: (row) => <span>{doesExist(row.firstName)}</span>,\r\n    },\r\n    {\r\n      name: \"نام خانوادگی\",\r\n      cell: (row) => <span>{doesExist(row.lastName)}</span>,\r\n    },\r\n    {\r\n      name: \"شرکت\",\r\n      cell: (row) => <span>{doesExist(row.organization)}</span>,\r\n    },\r\n    {\r\n      name: \"نام کاربری\",\r\n      cell: (row) => <span>{doesExist(row.userName)}</span>,\r\n    },\r\n  ];\r\n  const onPageChange = (page) => {\r\n    setPage(page);\r\n    setLoading(true);\r\n    setMakeRequest((prev) => prev + 1);\r\n  };\r\n\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setLimit(newPerPage);\r\n    setLoading(true);\r\n    setMakeRequest((prev) => prev + 1);\r\n  };\r\n\r\n  const makeQueryRequset = (payload) => {\r\n    setQuery(payload.query);\r\n    setLoading(true);\r\n    setMakeRequest((prev) => prev + 1);\r\n  };\r\n\r\n  const successCallback = () => {\r\n    setLoading(true);\r\n    setMakeRequest((prev) => prev + 1);\r\n  };\r\n\r\n  // renders\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف پیمانکار\"\r\n          icon=\"fas fa-certificate\"\r\n          onClick={() => setContractorDialog(true)}\r\n        />\r\n        {/* <Filters filterTypes={{ query: true }} /> */}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={userColumn}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          onPageChange={onPageChange}\r\n          onRowsPageChange={onRowsPageChange}\r\n          setLoading={setLoading}\r\n          loading={loading}\r\n          filters={true}\r\n          filterTypes={{\r\n            query: true,\r\n          }}\r\n          totalRows={totalRows}\r\n          makeQueryRequset={makeQueryRequset}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      <DialogToggler\r\n        condition={contractorDialog}\r\n        setCondition={setContractorDialog}\r\n        width={500}\r\n        // height={220}\r\n        isUnique={false}\r\n      >\r\n        <RegisterForm\r\n          setCondition={setContractorDialog}\r\n          fields={[\"phoneNumber\", \"firstName\", \"lastName\", \"organization\"]}\r\n          caller={AuthenticateAPI.registerContractor}\r\n          successCallback={successCallback}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Contractors;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\Header.js",["713","714"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport styles from \"../../../stylesheets/header.module.css\";\r\nimport DropdownWrapper from \"../../helpers/DropdownWrapper\";\r\nimport {\r\n  appRoutes,\r\n  callAPI,\r\n  checkLoginState,\r\n  clearNull,\r\n  constants,\r\n  getFromLocalStorage,\r\n  isManager,\r\n  logout,\r\n} from \"../../../helperFuncs\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { UserInfoAPI } from \"../../../apiCalls\";\r\nimport Avatar from \"../dataDisplay/Avatar\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport DialogToggler from \"../../helpers/DialogToggler\";\r\nimport ChangePasswordDialog from \"../dialogs/ChangePasswordDialog\";\r\nimport ProfileForm from \"../dataDisplay/ProfileForm\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport shahrbinTitle from \"../../../assets/Images/shahrbin_title.png\";\r\nimport DropDownItem from \"../../helpers/DropDown/DropDownItem\";\r\nimport headerImage from \"../../../assets/Images/header.png\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Header = () => {\r\n  // history API object\r\n  const history = useHistory();\r\n\r\n  // store\r\n  const [state, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState({});\r\n\r\n  // flags\r\n  const [passwordDialog, setPasswordDialog] = useState(false);\r\n  const [profileDialog, setProfileDialog] = useState(false);\r\n\r\n  const openDialog = () => {\r\n    modalRoot.classList.add(\"active\");\r\n    setProfileDialog(true);\r\n  };\r\n\r\n  const [profileData, loading] = useMakeRequest(\r\n    UserInfoAPI.getUser,\r\n    200,\r\n    profileDialog,\r\n    null\r\n  );\r\n\r\n  useEffect(() => {\r\n    const isAuthenticated = checkLoginState();\r\n    if (isAuthenticated) getUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const isAuthenticated = checkLoginState();\r\n    if (state.apiCall && isAuthenticated) {\r\n      // get user info on profile change\r\n      getUser();\r\n    }\r\n  }, [state.apiCall]);\r\n\r\n  // get user info\r\n  const getUser = () => {\r\n    callAPI({\r\n      caller: UserInfoAPI.getUser,\r\n      successStatus: 200,\r\n      successCallback: (res) => setData(res.data),\r\n    });\r\n  };\r\n\r\n  const openPasswordDialog = () => {\r\n    modalRoot.classList.add(\"active\");\r\n    setPasswordDialog(true);\r\n  };\r\n\r\n  // logout user\r\n  const logUserOut = () => {\r\n    dispatch({ type: \"setSideBar\", payload: false });\r\n    logout(() => history.push(appRoutes.login));\r\n  };\r\n\r\n  const goToHomePage = () => {\r\n    const userRoles = getFromLocalStorage(\r\n      constants.SHAHRBIN_MANAGEMENT_USER_ROLES\r\n    );\r\n    const to = isManager(userRoles) ? appRoutes.infos : appRoutes.newReports;\r\n    history.push(to);\r\n  };\r\n  return (\r\n    <>\r\n      <header className={styles.header}>\r\n        <div className={styles.header__content}>\r\n          <div className={styles.header__right} onClick={goToHomePage}>\r\n            <Brand />\r\n            <span>{state.initials.instance?.name}</span>\r\n          </div>\r\n\r\n          {/* <div className=\"frc h100\">\r\n            <img src={headerImage} className=\"h100 rw3 w100 objfit-cover\" />\r\n            <img src={headerImage} className=\"h100 rw3 w100 objfit-cover\" />\r\n            <img src={headerImage} className=\"h100 rw3 w100 objfit-cover\" />\r\n            <img src={headerImage} className=\"h100 rw3 w100 objfit-cover\" />\r\n            <img src={headerImage} className=\"h100 rw3 w100 objfit-cover\" />\r\n          </div> */}\r\n\r\n          <div className={styles.header__left}>\r\n            {/* <Mode /> */}\r\n\r\n            <HeaderDropDown\r\n              data={data}\r\n              openDialog={openDialog}\r\n              openPasswordDialog={openPasswordDialog}\r\n              logUserOut={logUserOut}\r\n            />\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <DialogToggler\r\n        condition={passwordDialog}\r\n        setCondition={setPasswordDialog}\r\n        width={400}\r\n        isUnique={false}\r\n        fixedDimension={false}\r\n        id=\"change-password\"\r\n      >\r\n        <ChangePasswordDialog setCondition={setPasswordDialog} type={2} />\r\n      </DialogToggler>\r\n      <DialogToggler\r\n        condition={profileDialog}\r\n        setCondition={setProfileDialog}\r\n        width={700}\r\n        isUnique={false}\r\n        loading={loading}\r\n        id=\"profile-form\"\r\n      >\r\n        <ProfileForm data={profileData} setDialog={setProfileDialog} />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nconst HeaderDropDown = ({\r\n  data = {},\r\n  openDialog = (f) => f,\r\n  openPasswordDialog = (f) => f,\r\n  logUserOut = (f) => f,\r\n}) => {\r\n  return (\r\n    <DropdownWrapper\r\n      toggleElement={<HeaderDropDownToggle data={data} />}\r\n      position=\"left bottom\"\r\n      theme={{ background: \"var(--white)\", color: \"var(--dark)\" }}\r\n      index={0}\r\n      total={4}\r\n      // className={styles.dropdownWrapper}\r\n    >\r\n      <DropDownItem\r\n        title=\"پروفایل\"\r\n        icon=\"far fa-user\"\r\n        hoverIcon=\"fas fa-user\"\r\n        onClick={openDialog}\r\n      />\r\n      <DropDownItem\r\n        title=\"تغییر رمز عبور\"\r\n        icon=\"far fa-key\"\r\n        hoverIcon=\"fas fa-key\"\r\n        onClick={openPasswordDialog}\r\n      />\r\n      <DropDownItem\r\n        title=\"خروج\"\r\n        icon=\"far fa-sign-out-alt\"\r\n        hoverIcon=\"fas fa-sign-out-alt\"\r\n        onClick={logUserOut}\r\n      />\r\n    </DropdownWrapper>\r\n  );\r\n};\r\n\r\nconst UserInfo = ({ data = {} }) => {\r\n  const showUserInfo = () => {\r\n    return clearNull(data.firstName) + \" \" + clearNull(data.lastName);\r\n  };\r\n\r\n  return (\r\n    <span className=\"d-flex fdc al-e text-white mx-1\">\r\n      <span className=\"f12 text-primary\">{showUserInfo()}</span>\r\n      <span className=\"f12 text-dark\">{data?.title}</span>\r\n    </span>\r\n  );\r\n};\r\n\r\nconst Brand = ({ onClick = (f) => f }) => {\r\n  return (\r\n    <div className={styles.brand} onClick={onClick}>\r\n      {/* <img src={shahrbinTitle} /> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst HeaderDropDownToggle = ({ data }) => {\r\n  return (\r\n    <>\r\n      <div className={styles.toggleElement}>\r\n        <UserInfo data={data} />\r\n        <Avatar\r\n          // placeholder={!data?.avatar}\r\n          placeholder={true}\r\n          size={2}\r\n          url={data?.avatar?.url}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\authorization\\AuthorizeRoute.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\Comments.js",["715","716","717","718","719","720","721","722","723"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport Title from \"../helpers/Title\";\r\nimport layoutStyle from \"../../stylesheets/layout.module.css\";\r\nimport useMakeRequest from \"../hooks/useMakeRequest\";\r\nimport Tabs from \"../helpers/Tabs\";\r\nimport Loader from \"../helpers/Loader\";\r\nimport { ReportsAPI, InfoAPI } from \"../../apiCalls\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport {\r\n  callAPI,\r\n  defaultFilters,\r\n  doesExist,\r\n  tableLightTheme,\r\n} from \"../../helperFuncs\";\r\nimport Avatar from \"../commons/dataDisplay/Avatar\";\r\nimport Button from \"../helpers/Button\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport Textarea from \"../helpers/Textarea\";\r\nimport { toast } from \"react-toastify\";\r\nimport NoData from \"../helpers/NoData/NoData\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport ReportDialog from \"../commons/dataDisplay/ReportDialog\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport TextInput from \"../helpers/TextInput\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport DialogButtons from \"../commons/dialogs/DialogButtons\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Comments = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const [comments, setComments] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [anwserText, setAnswerText] = useState(\"\");\r\n  const [answerDialog, setAnswerDialog] = useState(false);\r\n  const [reportDialog, setReportDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState(null);\r\n  const [payload, setPayload] = useState(null);\r\n  const [sendAnswerRequest, setSendAnwserRequest] = useState(false);\r\n  const [deleteCommentRequest, setDeleteCommentRequest] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const queries = {\r\n    page,\r\n    perPage,\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getComments();\r\n    }\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getComments();\r\n\r\n    return () => {\r\n      // dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.filters, page, perPage]);\r\n\r\n  const getComments = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ReportsAPI.getComments,\r\n        successCallback: (res) => {\r\n          setComments(res.data);\r\n          const pagination = res.headers[\"x-pagination\"];\r\n          const totalRows = JSON.parse(pagination)?.TotalCount;\r\n          setTotalRows(totalRows);\r\n        },\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const openDialog = (data) => {\r\n    modalRoot.classList.add(\"modal-root\");\r\n    setAnswerDialog(true);\r\n    setDialogData(data);\r\n  };\r\n\r\n  const openReportDialog = (data) => {\r\n    modalRoot.classList.add(\"modal-root\");\r\n    setReportDialog(true);\r\n    setDialogData(data);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setReportDialog(false);\r\n    modalRoot.classList.remove(\"modal-root\");\r\n  };\r\n\r\n  const sendAnswer = (e) => {\r\n    const payload = {\r\n      comment: anwserText,\r\n      reportId: dialogData?.reportId,\r\n      isSeen: true,\r\n      isVerified: true,\r\n    };\r\n    setPayload(payload);\r\n    setSendAnwserRequest(true);\r\n  };\r\n\r\n  const deleteComment = () => {\r\n    setDeleteCommentRequest(true);\r\n  };\r\n\r\n  const [, sendLoading] = useMakeRequest(\r\n    ReportsAPI.updateComment,\r\n    204,\r\n    sendAnswerRequest,\r\n    payload,\r\n    (res) => {\r\n      setSendAnwserRequest(false);\r\n      if (res && res.status === 204) {\r\n        toast(\"پاسخ شما با موفقیت ارسال شد\", { type: \"success\" });\r\n        setAnswerDialog(false);\r\n        setDialogData(null);\r\n        setAnswerText(\"\");\r\n        modalRoot.classList.remove(\"active\");\r\n        getComments();\r\n      }\r\n    },\r\n    dialogData?.id\r\n  );\r\n\r\n  const [, deleteLoading] = useMakeRequest(\r\n    ReportsAPI.deleteComment,\r\n    204,\r\n    deleteCommentRequest,\r\n    null,\r\n    (res) => {\r\n      setDeleteCommentRequest(false);\r\n      if (res && res.status === 204) {\r\n        toast(\"نظر کاربر با موفقیت حذف شد.\", { type: \"success\" });\r\n        setAnswerDialog(false);\r\n        setDialogData(null);\r\n        modalRoot.classList.remove(\"active\");\r\n        getComments();\r\n      }\r\n    },\r\n    dialogData?.id\r\n  );\r\n\r\n  const tableActions = [\r\n    {\r\n      id: \"comments-1\",\r\n      icon: \"fas fa-search\",\r\n      title: \"بررسی\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n    {\r\n      id: \"comments-2\",\r\n      icon: \"fas fa-eye\",\r\n      title: \"مشاهده گزارش\",\r\n      onClick: (row) => openReportDialog(row),\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      name: \"تصویر نمایه\",\r\n      cell: (row) => (\r\n        <Avatar url={row?.user?.avatar?.url} placeholder={!row?.user?.avatar} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"نام و نام خانوادگی\",\r\n      cell: (row) => (\r\n        <span>\r\n          {doesExist(row?.user?.firstName) +\r\n            \" \" +\r\n            doesExist(row?.user?.lastName)}\r\n        </span>\r\n      ),\r\n      grow: 2,\r\n    },\r\n    {\r\n      name: \"نام کاربری\",\r\n      cell: (row) => <span>{doesExist(row?.user?.userName)}</span>,\r\n      grow: 2,\r\n    },\r\n    {\r\n      name: \"متن نظر\",\r\n      cell: (row) => <span>{doesExist(row.text)}</span>,\r\n      grow: 6,\r\n    },\r\n    {\r\n      name: \"اقدام ها\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            rowData={row}\r\n            index={index}\r\n            total={comments.length}\r\n            perPage={comments.length}\r\n          />\r\n        </>\r\n      ),\r\n      grow: 3,\r\n    },\r\n  ];\r\n\r\n  const onPageChange = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setPerPage(newPerPage);\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <div className=\"w100 fre\">\r\n        <Filters\r\n          filterTypes={{ from: true, to: true, query: true, category: true }}\r\n        />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <>\r\n        {sendLoading && <Loader />}\r\n\r\n        <TableHeader renderHeader={renderTableHeader} />\r\n\r\n        <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n          <div className={[layoutStyle.wrapper].join(\" \")}>\r\n            <>\r\n              <MyDataTable\r\n                data={comments}\r\n                columns={columns}\r\n                theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n                loading={loading}\r\n                pagination={true}\r\n                totalRows={totalRows}\r\n                onRowsPageChange={onRowsPageChange}\r\n                onPageChange={onPageChange}\r\n              />\r\n            </>\r\n          </div>\r\n        </LayoutScrollable>\r\n      </>\r\n\r\n      <DialogToggler\r\n        condition={answerDialog}\r\n        setCondition={setAnswerDialog}\r\n        data={dialogData}\r\n        dialogId={dialogData?.id}\r\n        width={500}\r\n        id=\"answer-comment-dialog\"\r\n      >\r\n        <Textarea\r\n          readOnly\r\n          value={dialogData?.text}\r\n          title=\"نظر شهروند\"\r\n          wrapperClassName=\"w90 mxa\"\r\n          inputClassName=\"mh50\"\r\n        />\r\n        <Textarea\r\n          wrapperClassName=\"w90 mxa\"\r\n          inputClassName=\"mh100\"\r\n          value={anwserText}\r\n          title=\"پاسخ به نظر شهروند\"\r\n          handleChange={(name) => (e) => setAnswerText(e.target.value)}\r\n        />\r\n        <DialogButtons\r\n          primaryTitle=\"ارسال\"\r\n          onPrimaryClick={sendAnswer}\r\n          secondaryTitle=\"حذف نظر\"\r\n          onSecondaryClick={deleteComment}\r\n          primaryLoading={sendLoading}\r\n          secondaryLoading={deleteLoading}\r\n        />\r\n      </DialogToggler>\r\n\r\n      <DialogToggler\r\n        condition={reportDialog}\r\n        setCondition={setReportDialog}\r\n        width={800}\r\n        height={650}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        id=\"report-dialog\"\r\n      >\r\n        <ReportDialog\r\n          setDialog={setReportDialog}\r\n          readOnly={true}\r\n          caller={InfoAPI.getReportById}\r\n          childData={{ id: dialogData?.reportId }}\r\n          onNext={closeDialog}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Comments;\r\n","D:\\projects\\shahrbin-admin\\src\\apiCalls.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportCard.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportDialog.js",["724"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../../stylesheets/filters.module.css\";\r\nimport Tabs from \"../../helpers/Tabs\";\r\nimport CitizenInfo from \"./CitizenInfo\";\r\nimport ReportDetails from \"./ReportDetails\";\r\nimport Referral from \"../submission/Referral\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport ReportHistory from \"./ReportHistory\";\r\nimport { callAPI } from \"../../../helperFuncs\";\r\nimport OlMapContainer from \"../map/OlMapContainer\";\r\nimport CategoryForm from \"./CategoryForm\";\r\nimport MoreDetails from \"./MoreDetails\";\r\n\r\nconst modal = document && document.getElementById(\"modal-root\");\r\n\r\nconst ReportDialog = ({\r\n  setDialog,\r\n  refresh,\r\n  readOnly = false,\r\n  caller = (f) => f,\r\n  childData,\r\n  onNext = (f) => f,\r\n}) => {\r\n  // data states\r\n  const [data, setData] = useState({});\r\n  const [defaultTab, setDefaultTab] = useState(\"reportDetails\");\r\n\r\n  // flags\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (childData) {\r\n      getData();\r\n      setDefaultTab(\"reportDetails\");\r\n    }\r\n  }, [childData]);\r\n\r\n  const getData = () => {\r\n    setLoading(true);\r\n    callAPI({\r\n      caller: caller,\r\n      payload: childData?.id,\r\n      successCallback: (res) => setData(res.data),\r\n      errorCallback: () => modal.classList.remove(\"active\"),\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  const onTabChange = (tab) => {\r\n    setDefaultTab(tab);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader absolute={true} />}\r\n      <section className={styles.filters}>\r\n        <Tabs\r\n          mainClass=\"filter-tab\"\r\n          activeClass=\"active\"\r\n          contentClassName=\"scrollbar\"\r\n          onTabChange={onTabChange}\r\n          defaultActiveId={defaultTab}\r\n        >\r\n          <article label=\"جزییات درخواست\" id=\"reportDetails\">\r\n            <ReportDetails data={data} />\r\n          </article>\r\n          <article label=\"جزییات بیشتر\" id=\"moreDetails\">\r\n            <MoreDetails data={data} />\r\n          </article>\r\n          {data?.report?.category?.formElements.length > 0 && (\r\n            <article label=\"فرم\" id=\"form\">\r\n              <CategoryForm data={data} />\r\n            </article>\r\n          )}\r\n          <article label=\"اطلاعات شهروند\" id=\"citizenInfo\">\r\n            <CitizenInfo data={data?.report?.citizen} />\r\n          </article>\r\n          <article label=\"تاریخچه درخواست\" id=\"reportHistory\">\r\n            <ReportHistory data={data} />\r\n          </article>\r\n          <article label=\"محل روی نقشه\" id=\"location\">\r\n            <OlMapContainer\r\n              center={[\r\n                data?.report?.address?.longitude || 54.3569,\r\n                data?.report?.address?.latitude || 31.8974,\r\n              ]}\r\n              width={\"100%\"}\r\n              height={550}\r\n              zoom={15}\r\n              clickable={false}\r\n            />\r\n          </article>\r\n          {!readOnly && (\r\n            <article label=\"ارجاع\" id=\"finalize\">\r\n              <Referral\r\n                data={data}\r\n                setDialog={setDialog}\r\n                refresh={refresh}\r\n                onNext={onNext}\r\n              />\r\n            </article>\r\n          )}\r\n        </Tabs>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nReportDialog.propTypes = {\r\n  id: PropTypes.string,\r\n  setDialog: PropTypes.func,\r\n  refresh: PropTypes.func,\r\n  readOnly: PropTypes.bool,\r\n  caller: PropTypes.func,\r\n};\r\n\r\nexport default ReportDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Avatar.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\MyPieChart.js",["725"],"import React from \"react\";\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Tooltip,\r\n  ResponsiveContainer,\r\n  Cell,\r\n  Legend,\r\n} from \"recharts\";\r\nimport { fixDigit } from \"../../../helperFuncs\";\r\n\r\nconst COLORS = [\"#0088FE\", \"#352e47\", \"#FFBB28\", \"#FF8042\"];\r\nconst RADIAN = Math.PI / 180;\r\nconst renderLegend = (value, entry, index) => {\r\n  return entry.value;\r\n};\r\n\r\nconst MyPieChart = ({ width = 400, height = 400, data = [], title = \"\" }) => {\r\n  return (\r\n    <div className=\"\">\r\n      <div className=\"w90 mxa frc flex my-3 gradient-title\">\r\n        <span className=\"f3\">{title}</span>\r\n      </div>\r\n      <ResponsiveContainer\r\n        className=\"mypiechart\"\r\n        width=\"100%\"\r\n        maxWidth={width}\r\n        height={height}\r\n      >\r\n        <PieChart width={width} height={height}>\r\n          {data.map((pie, i) => (\r\n            <Pie\r\n              dataKey={\"value\"}\r\n              nameKey={\"name\"}\r\n              key={i}\r\n              data={pie}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              outerRadius={100}\r\n              innerRadius={50}\r\n              fill={COLORS[i]}\r\n              label={({ value }) => value}\r\n              labelLine={true}\r\n            >\r\n              {pie.map((entry, index) => (\r\n                <Cell\r\n                  key={`cell-${index}`}\r\n                  fill={COLORS[index % COLORS.length]}\r\n                />\r\n              ))}\r\n            </Pie>\r\n          ))}\r\n          <Tooltip\r\n            formatter={(value, name, props) => [`${name}: ${fixDigit(value)}`]}\r\n          />\r\n          <Legend formatter={renderLegend} />\r\n        </PieChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyPieChart;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Button.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\ChooseSubject.js",["726","727"],"import React, { useEffect, useState } from \"react\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport SubjectDialog from \"../commons/dataDisplay/SubjectDialog\";\r\nimport TextInput from \"./TextInput\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst ChooseSubject = ({\r\n  placeholder = \"انتخاب کنید.\",\r\n  label = \"گروه موضوعی\",\r\n  wrapperClassName = \"\",\r\n  inputClassName = \"\",\r\n  setCategoryId = (f) => f,\r\n  categoryId = null,\r\n  multiple = false,\r\n  setCategoryTitle = (f) => f,\r\n  categoryTitle = \"\",\r\n  toggler = false,\r\n  children,\r\n}) => {\r\n  const [dialog, setDialog] = useState(false);\r\n  const [selecteds, setSelecteds] = useState([]);\r\n  const [subject, setSubject] = useState([]);\r\n\r\n  const handleClick = (e) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n  };\r\n\r\n  const removeSelecteds = (id) => {\r\n    const newSelecteds = selecteds.filter((a) => a.id !== id);\r\n    setSelecteds(newSelecteds);\r\n    setSubject(newSelecteds);\r\n    setCategoryId(id, \"remove\");\r\n    setCategoryTitle(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selecteds.length > 0) {\r\n      setCategoryTitle(selecteds.slice(-1)[0].title);\r\n    }\r\n  }, [selecteds]);\r\n  return (\r\n    <>\r\n      {toggler ? (\r\n        <div onClick={handleClick} className=\"pointer\">\r\n          {toggler}\r\n        </div>\r\n      ) : (\r\n        <TextInput\r\n          readOnly={true}\r\n          wrapperClassName={wrapperClassName}\r\n          inputClassName={inputClassName}\r\n          placeholder={placeholder}\r\n          title={label}\r\n          required={false}\r\n          onClick={handleClick}\r\n          value={categoryTitle}\r\n          inputClassName=\"text-primary pointer\"\r\n        />\r\n      )}\r\n      <DialogToggler\r\n        condition={dialog}\r\n        setCondition={setDialog}\r\n        isUnique={false}\r\n        width={500}\r\n        height={500}\r\n        outSideClick={false}\r\n      >\r\n        <SubjectDialog\r\n          setCategoryId={setCategoryId}\r\n          setCategoryTitle={setCategoryTitle}\r\n          setDialog={setDialog}\r\n          categoryId={categoryId}\r\n          setSelecteds={setSelecteds}\r\n          selecteds={selecteds}\r\n          setSubject={setSubject}\r\n          subject={subject}\r\n          onDelete={removeSelecteds}\r\n          multiple={multiple}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nChooseSubject.propTypes = {};\r\n\r\nexport default ChooseSubject;\r\n",["728","729"],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\RegisterUserDialog.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\AddAttachments.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Textarea.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\RolesDialog.js",["730","731","732","733","734"],"import React, { useState } from \"react\";\r\nimport { UserInfoAPI } from \"../../../apiCalls\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport styles from \"../../../stylesheets/input.module.css\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport {\r\n  rolesDisplayName,\r\n  serverError,\r\n  unKnownError,\r\n} from \"../../../helperFuncs\";\r\nimport Button from \"../../helpers/Button\";\r\nimport { toast } from \"react-toastify\";\r\nimport CheckBoxGroup from \"../../helpers/CheckBox/CheckBoxGroup\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst RolesDialog = ({ userId, setCondition }) => {\r\n  const [roles, setRoles] = useState([]);\r\n  const [makeRequest, setMakeRequest] = useState(false);\r\n\r\n  const handleRoleChange = (items = []) => {\r\n    const newRoles = roles.map((role) => ({\r\n      ...role,\r\n      isInRole: items.findIndex((item) => item === role.roleName) !== -1,\r\n    }));\r\n    setRoles(newRoles);\r\n  };\r\n\r\n  const saveRoles = (e) => {\r\n    setMakeRequest(true);\r\n  };\r\n\r\n  const [data, loading] = useMakeRequest(\r\n    UserInfoAPI.getUserRoles,\r\n    200,\r\n    true,\r\n    userId,\r\n    (res) => {\r\n      if (res.status === 200) {\r\n        setRoles(res.data);\r\n      } else if (serverError(res)) return;\r\n    }\r\n  );\r\n\r\n  const [, saveLoading] = useMakeRequest(\r\n    UserInfoAPI.saveRoles,\r\n    200,\r\n    makeRequest,\r\n    roles,\r\n    (res) => {\r\n      setMakeRequest(false);\r\n      setCondition(false);\r\n      modalRoot.classList.remove(\"active\");\r\n      if (res.status === 200) {\r\n        toast(\"تغییرات با موفقیت ذخیره شد.\", { type: \"success\" });\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    userId\r\n  );\r\n  return (\r\n    <>\r\n      <CheckBoxGroup\r\n        items={roles.map((role) => ({\r\n          id: role.roleName,\r\n          label: role.displayName,\r\n          checked: role.isInRole,\r\n          wrapperClassName: \"w30 d-flex al-c ju-s my1\",\r\n          labelClassName: \"f12 my05\"\r\n        }))}\r\n        onChange={handleRoleChange}\r\n        wrapperClassName=\"px1\"\r\n        title=\"نقش‌ها\"\r\n      />\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1 absolute b0\">\r\n        <Button\r\n          title=\"ذخیره تغییرات\"\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={saveRoles}\r\n          loading={saveLoading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RolesDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ProfileDialog.js",["735"],"import React, { useState } from \"react\";\r\nimport styles from \"../../../stylesheets/profile.module.css\";\r\nimport { UserInfoAPI } from \"../../../apiCalls\";\r\nimport DialogToggler from \"../../helpers/DialogToggler\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport ProfileForm from \"../dataDisplay/ProfileForm\";\r\nimport dropDownStyles from \"../../../stylesheets/dropdown.module.css\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst ProfileDialog = () => {\r\n  const [dialog, setDialog] = useState(false);\r\n\r\n  const openDialog = () => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n  };\r\n\r\n  const [data, loading] = useMakeRequest(\r\n    UserInfoAPI.getUser,\r\n    200,\r\n    dialog,\r\n    null\r\n  );\r\n  return (\r\n    <>\r\n      <div className={dropDownStyles.dropdownitem} onClick={openDialog}>\r\n        <span>\r\n          <i className=\"fas fa-user\"></i>\r\n        </span>\r\n        <span>پروفایل</span>\r\n      </div>\r\n      <DialogToggler\r\n        condition={dialog}\r\n        setCondition={setDialog}\r\n        width={700}\r\n        isUnique={false}\r\n        loading={loading}\r\n      >\r\n        <ProfileForm data={data} setDialog={setDialog} />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileDialog;\r\n",["736","737"],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\TextInput.js",["738","739","740"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../stylesheets/input.module.css\";\r\n\r\nconst TextInput = ({\r\n  value = \"\",\r\n  title = \"\",\r\n  name = \"\",\r\n  type = \"text\",\r\n  required = true,\r\n  placeholder = \"\",\r\n  maxLength = \"\",\r\n  direction = \"rtl\",\r\n  onChange = (f) => (f) => f,\r\n  onInput = (f) => (f) => f,\r\n  onFocus = (f) => f,\r\n  onBlur = (f) => f,\r\n  onClick = (f) => f,\r\n  wrapperClassName = \"\",\r\n  inputClassName = \"\",\r\n  labelClassName = \"\",\r\n  isValid,\r\n  isEmpty,\r\n  onlyDigit = false,\r\n  decimal = false,\r\n  focusonSelect = false,\r\n  rtl = false,\r\n  center = false,\r\n  readOnly = false,\r\n  disabled = false,\r\n  icon = \"\",\r\n  onIconClick = (f) => f,\r\n  iconClassName = \"\",\r\n  forwardWrapperRef,\r\n  forwardInputRef,\r\n  children,\r\n  errorMessage = \"\",\r\n  defaultStyles = true,\r\n  autoFocus,\r\n  renderInfo,\r\n  min=\"\",\r\n  max=\"\"\r\n}) => {\r\n  const inputRef = useRef(null);\r\n  const wrapperRef = useRef(null);\r\n\r\n  const [top, setTop] = useState(0);\r\n\r\n  const showPassword = (e) => {\r\n    if (inputRef.current.type === \"password\") {\r\n      inputRef.current.type = \"text\";\r\n    } else {\r\n      inputRef.current.type = \"password\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const top =\r\n      wrapperRef?.current?.offsetHeight - inputRef?.current?.offsetHeight;\r\n    setTop(top);\r\n  }, [wrapperRef.current, inputRef.current]);\r\n\r\n  useEffect(() => {\r\n    if (autoFocus) inputRef.current?.focus();\r\n  }, [autoFocus, inputRef.current]);\r\n  return (\r\n    <div\r\n      className={[\r\n        defaultStyles ? styles.inputWrapper : \"\",\r\n        wrapperClassName,\r\n      ].join(\" \")}\r\n      ref={forwardWrapperRef ? forwardWrapperRef : wrapperRef}\r\n    >\r\n      {title ? (\r\n        <label\r\n          htmlFor={name}\r\n          className={[\r\n            defaultStyles ? styles.inputLabel : \"\",\r\n            labelClassName,\r\n          ].join(\" \")}\r\n        >\r\n          {title}\r\n          {required ? \"*\" : \"\"}\r\n        </label>\r\n      ) : null}\r\n      <input\r\n        autoFocus={autoFocus}\r\n        type={type}\r\n        ref={forwardInputRef ? forwardInputRef : inputRef}\r\n        className={`${defaultStyles ? styles.input : \"\"} ${inputClassName} ${\r\n          isValid === true\r\n            ? \"border-color\"\r\n            : isValid === false\r\n            ? \"border-error\"\r\n            : \"\"\r\n        } ${isEmpty === true ? \"input-error\" : \"\"} ${\r\n          center ? \"inputCenter\" : \"\"\r\n        } ${rtl ? \"rtl\" : \"ltr\"}`}\r\n        id={name}\r\n        name={name}\r\n        onChange={\r\n          onChange\r\n            ? onChange(\r\n                name,\r\n                onlyDigit ? onlyDigit : null,\r\n                decimal ? decimal : null\r\n              )\r\n            : null\r\n        }\r\n        onInput={\r\n          onInput\r\n            ? onInput(\r\n                name,\r\n                onlyDigit ? onlyDigit : null,\r\n                decimal ? decimal : null\r\n              )\r\n            : null\r\n        }\r\n        onClick={(e) => {\r\n          if (focusonSelect) {\r\n            e.target.select();\r\n          }\r\n        }}\r\n        value={value === null ? \"\" : value}\r\n        style={{ direction: direction ? `${direction}` : \"\" }}\r\n        maxLength={maxLength ? maxLength : null}\r\n        placeholder={placeholder}\r\n        readOnly={readOnly}\r\n        onFocus={onFocus}\r\n        onBlur={onBlur}\r\n        onClick={onClick}\r\n        disabled={disabled}\r\n        min={min}\r\n        max={max}\r\n      />\r\n      {!isValid && <span className=\"text-error\">{errorMessage}</span>}\r\n\r\n      {type === \"password\" && (\r\n        <span\r\n          className=\"absolute pointer f12\"\r\n          style={{\r\n            top: isNaN(top) ? 0 : top,\r\n            height: inputRef?.current?.offsetHeight,\r\n            left: 20,\r\n            display: top ? \"block\" : \"none\",\r\n          }}\r\n          onClick={showPassword}\r\n        >\r\n          <i className=\"fas fa-eye\"></i>\r\n        </span>\r\n      )}\r\n      {icon && (\r\n        <span\r\n          className={[\"absolute pointer f12 h100 fcc\", iconClassName].join(\" \")}\r\n          style={{\r\n            // top: isNaN(top) ? 0 : top,\r\n            // height: inputRef?.current?.offsetHeight,\r\n            left: 20,\r\n          }}\r\n          onClick={onIconClick}\r\n        >\r\n          <i className={icon}></i>\r\n        </span>\r\n      )}\r\n      {renderInfo && <span className={styles.info}>{renderInfo()}</span>}\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = {\r\n  name: PropTypes.string,\r\n  title: PropTypes.string,\r\n  type: PropTypes.string,\r\n  required: PropTypes.bool,\r\n  placeholder: PropTypes.string,\r\n  maxLength: PropTypes.string,\r\n  direction: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  onInput: PropTypes.func,\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default TextInput;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DialogToggler.js",["741","742","743"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../stylesheets/dialog.module.css\";\r\nimport Loader from \"./Loader\";\r\nimport useClick from \"../hooks/useClick\";\r\nimport useAddLisener from \"../hooks/useAddLisener\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\nconst multiSelectWrapper =\r\n  document && document.getElementById(\"modal-selectlist\");\r\nconst Toastify = document && document.querySelector(\"Toastify\");\r\n\r\nconst DialogToggler = ({\r\n  condition,\r\n  setCondition,\r\n  dialogId,\r\n  data = {},\r\n  width = 400,\r\n  height,\r\n  children,\r\n  isUnique = true,\r\n  loading = false,\r\n  outSideClick = true,\r\n  fixedDimension = true,\r\n  outSideClickEvent = \"click\",\r\n  id = \"\",\r\n}) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n  const pageRoot = document && document.getElementById(\"content\");\r\n\r\n  const dialogRef = useRef(null);\r\n  const isOnTopRef = useRef(null);\r\n  const modalLengthRef = useRef(null);\r\n\r\n  const [isShowing, setIsShowing] = useState(\"d-none\");\r\n  const [isOnTop, setIsInTop] = useState(false);\r\n\r\n  const addClassNames = () => {\r\n    pageRoot.classList.add(\"modal\");\r\n    document.body.style.overflowY = \"hidden\";\r\n  };\r\n\r\n  const removeClassNames = () => {\r\n    pageRoot.classList.remove(\"modal\");\r\n    document.body.style.overflowY = \"auto\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (condition) {\r\n      openModal();\r\n    } else {\r\n      closeModal();\r\n    }\r\n  }, [condition]);\r\n\r\n  const openModal = () => {\r\n    modalRoot.classList.add(\"active\");\r\n    setIsClicked(true);\r\n    setIsShowing(\"fcs\");\r\n    addClassNames();\r\n    setTimeout(() => {\r\n      setIsShowing(\"fcs slidein\");\r\n    }, 50);\r\n    dispatch({\r\n      type: \"setModals\",\r\n      payload: [...store.modals, { id, index: store.modals.length + 1 }],\r\n    });\r\n  };\r\n\r\n  const closeModal = () => {\r\n    if (isOnTop) {\r\n      removeClassNames();\r\n    }\r\n    setIsShowing(\"hide\");\r\n    setTimeout(() => {\r\n      setIsShowing(\"d-none\");\r\n    }, 50);\r\n    const newModals = store.modals.filter((m) => m.id !== id);\r\n    dispatch({\r\n      type: \"setModals\",\r\n      payload: newModals,\r\n    });\r\n  };\r\n\r\n  const [isClicked, setIsClicked] = useClick(dialogRef, outSideClickEvent, [\r\n    { current: multiSelectWrapper },\r\n    { current: Toastify },\r\n  ]);\r\n\r\n  const closeDialog = () => {\r\n    if (modalRoot.children.length === 2) {\r\n      modalRoot.classList.remove(\"active\");\r\n    }\r\n    setCondition(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (outSideClick) {\r\n      if (isClicked) {\r\n        modalRoot.classList.add(\"active\");\r\n        setCondition(true);\r\n      } else {\r\n        if (isOnTop) {\r\n          setCondition(false);\r\n          if (store.modals.length === 1) {\r\n            modalRoot.classList.remove(\"active\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [isClicked]);\r\n\r\n  useEffect(() => {\r\n    const isOnTop =\r\n      store.modals.find((m) => m.id === id)?.index === store.modals.length;\r\n    setIsInTop(isOnTop);\r\n    setIsClicked(isOnTop);\r\n    isOnTopRef.current = isOnTop;\r\n    modalLengthRef.current = store.modals.length;\r\n  }, [store.modals]);\r\n\r\n  const onEscape = () => {\r\n    if (isOnTopRef.current) {\r\n      setCondition(false);\r\n      if (modalLengthRef.current === 1) {\r\n        setIsShowing(\"hide\");\r\n        if (!isOnTopRef.current) {\r\n          removeClassNames();\r\n        }\r\n        modalRoot.classList.remove(\"active\");\r\n        setIsShowing(\"d-none\");\r\n      }\r\n    }\r\n  };\r\n\r\n  useAddLisener({\r\n    ref: \"window\",\r\n    listenTo: \"keydown\",\r\n    condition: true,\r\n    callback: (ref, event) => {\r\n      if (event.type === \"keydown\" && event.keyCode === 27) onEscape(event);\r\n    },\r\n  });\r\n\r\n  const container = fixedDimension\r\n    ? {\r\n        maxWidth: width + \"px\",\r\n        width: \"100%\",\r\n        maxHeight: height ? height + \"px\" : \"auto\",\r\n        height: height ? \"100%\" : \"auto\",\r\n      }\r\n    : {};\r\n\r\n  const renderContent = () => {\r\n    return (\r\n      <div className={styles.dialog}>\r\n        <div\r\n          className={[styles.dialogContainer, isShowing].join(\" \")}\r\n          style={container}\r\n          ref={dialogRef}\r\n        >\r\n          {loading && <Loader absolute={true} />}\r\n          <div className={styles.dialogClose}>\r\n            <span className={styles.dialogCloseIcon} onClick={closeDialog}>\r\n              <i className=\"fas fa-times\"></i>\r\n            </span>\r\n          </div>\r\n          <div className={styles.dialogContent}>{children}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return isUnique\r\n    ? condition &&\r\n        dialogId === data.id &&\r\n        ReactDOM.createPortal(renderContent(), modalRoot)\r\n    : condition && ReactDOM.createPortal(renderContent(), modalRoot);\r\n};\r\n\r\nDialogToggler.propTypes = {\r\n  condition: PropTypes.bool,\r\n  setCondition: PropTypes.func,\r\n  children: PropTypes.instanceOf(Object),\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n};\r\n\r\nexport default React.memo(DialogToggler);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Loader.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DropdownWrapper.js",["744","745"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../stylesheets/dropdown.module.css\";\r\nimport Dropdown from \"./Dropdown\";\r\nimport useClick from \"../hooks/useClick\";\r\n\r\nconst DropDownWrapper = ({\r\n  children,\r\n  toggleElement = <div></div>,\r\n  className = \"\",\r\n  position = \"right\",\r\n  theme = { background: \"#000\", color: \"#fff\" },\r\n  scroll = false,\r\n  scrollHeight = 120,\r\n  toggleStyle = {},\r\n  dropDownStyle = {},\r\n  dropItemStyle = {},\r\n  toggleClassName = \"\",\r\n  dropDownClassName = \"\",\r\n  dropItemClassName = \"\",\r\n  index,\r\n  total,\r\n}) => {\r\n  const [show, setShow] = useState(false);\r\n  const [bounding, setBounding] = useState({});\r\n\r\n  const wrapperRef = useRef(null);\r\n\r\n  const [isClicked, setIsClicked] = useClick(wrapperRef);\r\n\r\n  useEffect(() => {\r\n    if (isClicked) {\r\n      setShow(true);\r\n    } else {\r\n      setShow(false);\r\n    }\r\n  }, [isClicked]);\r\n\r\n  const handleOutsideClick = (e) => {\r\n    setIsClicked(!isClicked);\r\n  };\r\n  return (\r\n    <>\r\n      <div\r\n        className={[\r\n          styles.dropdownWrapper,\r\n          className,\r\n          show ? styles.show : \"\",\r\n        ].join(\" \")}\r\n        onClick={handleOutsideClick}\r\n        ref={wrapperRef}\r\n      >\r\n        <div\r\n          className={[styles.toggle, styles[className], toggleClassName].join(\r\n            \" \"\r\n          )}\r\n          data-toggle={true}\r\n          style={toggleStyle}\r\n        >\r\n          {toggleElement}\r\n        </div>\r\n        <Dropdown\r\n          position={position}\r\n          theme={theme}\r\n          scroll={scroll}\r\n          scrollHeight={scrollHeight}\r\n          dropDownStyle={dropDownStyle}\r\n          dropItemStyle={dropItemStyle}\r\n          dropDownClassName={dropDownClassName}\r\n          dropItemClassName={dropItemClassName}\r\n          upper={total < 3 ? false : index <= total - 3 ? true : false}\r\n        >\r\n          {children}\r\n        </Dropdown>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nDropDownWrapper.propTypes = {\r\n  toggleElement: PropTypes.object,\r\n  className: PropTypes.string,\r\n  position: PropTypes.string,\r\n  theme: PropTypes.object,\r\n};\r\n\r\nexport default React.memo(DropDownWrapper);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\MyDataTable.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\SelectBox.js",["746"],"import React from \"react\";\r\nimport useMakeRequest from \"../hooks/useMakeRequest\";\r\nimport styles from \"../../stylesheets/input.module.css\";\r\n\r\nconst defaultWrapperClassName = \"px1 py05 w90 d-flex fdc al-s ju-c relative\";\r\nconst defaultInputClassName =\r\n  \"f15 no-outline w100 py1 bg-white text-dark br05 text-center border-light\";\r\nconst defaultLabelClassName =\r\n  \"bg-white text-color f12 mr2 w-auto text-right mb-1 d-flex z1 px1\";\r\n\r\nconst SelectBox = ({\r\n  staticData = false,\r\n  handleChange = (f) => (f) => f,\r\n  placeholder = \"انتخاب کنید\",\r\n  value = \"\",\r\n  options = [],\r\n  caller = (f) => f,\r\n  label = \"\",\r\n  wrapperClassName = \"\",\r\n  inputClassName = \"\",\r\n  labelClassName = \"\",\r\n  horizontal = true,\r\n  name = \"executive\",\r\n  handle = [\"title\"],\r\n  selectStyle = {},\r\n  wrapperStyle = {},\r\n  labelStyle = {},\r\n  disabled = false,\r\n  defaultStyles = true,\r\n}) => {\r\n  const [data, loading] = useMakeRequest(\r\n    caller,\r\n    200,\r\n    !staticData,\r\n    null,\r\n    (res) => {\r\n      if (res.status === 200 && res.data.length === 1) {\r\n        handleChange(name)(res.data[0]?.id);\r\n      }\r\n    }\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {horizontal ? (\r\n        <div\r\n          className={[\r\n            defaultStyles ? styles.inputWrapper : \"\",\r\n            wrapperClassName,\r\n          ].join(\" \")}\r\n          style={wrapperStyle}\r\n        >\r\n          {label && (\r\n            <label\r\n              className={[\r\n                defaultStyles ? styles.inputLabel : \"\",\r\n                labelClassName,\r\n              ].join(\" \")}\r\n              style={labelStyle}\r\n            >\r\n              {label}\r\n            </label>\r\n          )}\r\n          <select\r\n            value={value?.id ? value.id : value}\r\n            disabled={disabled}\r\n            onChange={handleChange(name)}\r\n            className={[defaultStyles ? styles.input : \"\", inputClassName].join(\r\n              \" \"\r\n            )}\r\n            style={selectStyle}\r\n          >\r\n            <option value={\"\"}>{placeholder}</option>\r\n            {staticData &&\r\n              options.map((o, i) => (\r\n                <option key={i} value={o.id}>\r\n                  {handle.map((h, i) => o[h]).join(\" \")}\r\n                </option>\r\n              ))}\r\n            {!staticData &&\r\n              data.length > 0 &&\r\n              data.map((d, i) => (\r\n                <option key={i} value={d.id}>\r\n                  {handle.map((h, i) => d[h]).join(\" \")}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n      ) : (\r\n        <div\r\n          className={[defaultWrapperClassName, wrapperClassName].join(\" \")}\r\n          style={wrapperStyle}\r\n        >\r\n          {label && (\r\n            <label\r\n              className={[defaultLabelClassName, labelClassName].join(\" \")}\r\n            >\r\n              {label}\r\n            </label>\r\n          )}\r\n          <select\r\n            value={value.id ? value.id : value}\r\n            onChange={handleChange(name)}\r\n            className={[defaultInputClassName, inputClassName].join(\" \")}\r\n            style={selectStyle}\r\n          >\r\n            <option value={\"\"}>{placeholder}</option>\r\n            {staticData &&\r\n              options.length > 0 &&\r\n              options.map((o, i) => (\r\n                <option key={i} value={o.id}>\r\n                  {handle.map((h, i) => o[h]).join(\" \")}\r\n                </option>\r\n              ))}\r\n            {!staticData &&\r\n              data.length > 0 &&\r\n              data.map((d, i) => (\r\n                <option key={i} value={d.id}>\r\n                  {handle.map((h, i) => d[h]).join(\" \")}\r\n                </option>\r\n              ))}\r\n          </select>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nSelectBox.propTypes = {};\r\n\r\nexport default React.memo(SelectBox);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\map\\OlMapContainer.js",["747","748","749"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport Map from \"ol/Map\";\r\nimport View from \"ol/View\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport TileWMS from \"ol/source/TileWMS\";\r\nimport { transform, fromLonLat } from \"ol/proj\";\r\nimport Feature from \"ol/Feature\";\r\nimport Point from \"ol/geom/Point\";\r\nimport { Icon, Style } from \"ol/style\";\r\nimport marker from \"../../../assets/Images/location.svg\";\r\n\r\nfunction OlMapContainer({\r\n  width = 400,\r\n  height = 400,\r\n  center = [54.3569, 31.8974],\r\n  zoom = 9,\r\n  fetchAddress = (f) => f,\r\n  clickable = true,\r\n  setCoordinates,\r\n  onMapClick = (f) => f,\r\n  className = \"\",\r\n}) {\r\n  // other states\r\n  const [map, setMap] = useState();\r\n\r\n  // data states\r\n  const [coords, setCoords] = useState(center);\r\n  const [feature, setFeature] = useState(null);\r\n\r\n  const mapElement = useRef();\r\n  mapElement.current = map;\r\n\r\n  const handleMapClick = (event) => {\r\n    const clickedCoord = mapElement.current.getCoordinateFromPixel(event.pixel);\r\n    const transormedCoord = transform(clickedCoord, \"EPSG:3857\", \"EPSG:4326\");\r\n    setCoords(transormedCoord);\r\n    setCoordinates({\r\n      latitude: transormedCoord[1],\r\n      longitude: transormedCoord[0],\r\n    });\r\n    fetchAddress({\r\n      latitude: transormedCoord[1],\r\n      longitude: transormedCoord[0],\r\n    });\r\n    onMapClick();\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (map) {\r\n      map.getView().setCenter(fromLonLat(center));\r\n      feature.setCoordinates(fromLonLat(center));\r\n    }\r\n  }, [center]);\r\n\r\n  useEffect(() => {\r\n    const pointMarker = new Point(fromLonLat(coords));\r\n    let iconFeature = new Feature({\r\n      geometry: pointMarker,\r\n      name: \"Null Island\",\r\n      population: 4000,\r\n      rainfall: 500,\r\n    });\r\n\r\n    let iconStyle = new Style({\r\n      image: new Icon({\r\n        anchor: [0.5, 46],\r\n        anchorXUnits: \"fraction\",\r\n        anchorYUnits: \"pixels\",\r\n        src: marker,\r\n      }),\r\n    });\r\n\r\n    iconFeature.setStyle(iconStyle);\r\n    let vectorSource = new VectorSource({\r\n      features: [iconFeature],\r\n    });\r\n\r\n    let vectorLayer = new VectorLayer({\r\n      source: vectorSource,\r\n      // maxZoom: 5,\r\n    });\r\n\r\n    setFeature(pointMarker);\r\n    // create and add vector source layer\r\n    const initalFeaturesLayer = new TileLayer({\r\n      extent: [\r\n        -20037508.342789244, -20037508.342789244, 20037508.342789244,\r\n        20037508.342789244,\r\n      ],\r\n      maxZoom: 18,\r\n      source: new TileWMS({\r\n        url: process.env.REACT_APP_MAP_PROXY_URL,\r\n        params: {\r\n          layers: \"osm\",\r\n          // format: \"image/png\",\r\n          srs: \"EPSG:3857\",\r\n          exceptions: \"application/vnd.ogc.se_inimage\",\r\n          transparent: true,\r\n        },\r\n      }),\r\n    });\r\n\r\n    // create map\r\n    const initialMap = new Map({\r\n      target: mapElement.current,\r\n      layers: [\r\n        // USGS Topo\r\n        // new TileLayer({\r\n        //   source: new OSM(),\r\n\r\n        initalFeaturesLayer,\r\n        vectorLayer,\r\n      ],\r\n      view: new View({\r\n        projection: \"EPSG:3857\",\r\n        // center: fromLonLat(coords),\r\n        center: fromLonLat(coords),\r\n        zoom,\r\n      }),\r\n      controls: [],\r\n    });\r\n\r\n    // save map and vector layer references to state\r\n    setMap(initialMap);\r\n    // setFeaturesLayer(initalFeaturesLayer);\r\n    if (clickable) {\r\n      initialMap.on(\"click\", handleMapClick);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mapElement}\r\n      className={className}\r\n      style={{ width, height, cursor: \"pointer\" }}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default OlMapContainer;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\EditorContainer.js",["750","751","752","753","754","755","756","757","758"],"import React, { useEffect, useState } from \"react\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@moji7798/ckeditor5-custom-build/build/ckeditor\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\n// import useMakeRequest from \"../Hooks/useMakeRequest\";\r\nimport { toast } from \"react-toastify\";\r\nimport Loader from \"./Loader\";\r\nimport styles from \"../../stylesheets/polls.module.css\";\r\n\r\nconst EditorContainer = ({\r\n  content,\r\n  setContent,\r\n  saveChanges = (f) => f,\r\n  isReadOnly = false,\r\n  pollId,\r\n}) => {\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n\r\n  const [payload, setPayload] = useState({});\r\n  const [makeSaveRequest, setMakeSaveRequest] = useState(false);\r\n\r\n  const handleEditorChange = (event, editor) => {\r\n    setContent(editor.getData());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {saveLoading && <Loader overlay={true} />} */}\r\n      <div className={styles.editorContainer}>\r\n        <CKEditor\r\n          editor={ClassicEditor}\r\n          onChange={handleEditorChange}\r\n          disabled={isReadOnly}\r\n          config={{\r\n            isReadOnly: isReadOnly,\r\n            ckfinder: {\r\n              headers: {\r\n                \"X-CSRF-TOKEN\": \"CSRF-Token\",\r\n                Authorization: `Bearer `,\r\n              },\r\n              uploadUrl: `${\r\n                process.env.NODE_ENV === \"development\"\r\n                  ? \"\"\r\n                  : process.env.REACT_APP_API_URL\r\n              }/api/Polls/${pollId}/Attach`,\r\n            },\r\n            language: {\r\n              ui: \"fa\",\r\n              content: \"fa\",\r\n            },\r\n            image: {\r\n              styles: [\r\n                \"alignLeft\",\r\n                \"alignCenter\",\r\n                \"alignRight\",\r\n                \"full\",\r\n                \"side\",\r\n              ],\r\n\r\n              resizeOptions: [\r\n                {\r\n                  name: \"imageResize:original\",\r\n                  label: \"Original\",\r\n                  value: null,\r\n                },\r\n                {\r\n                  name: \"imageResize:25\",\r\n                  label: \"25%\",\r\n                  value: \"25\",\r\n                },\r\n                {\r\n                  name: \"imageResize:50\",\r\n                  label: \"50%\",\r\n                  value: \"50\",\r\n                },\r\n                {\r\n                  name: \"imageResize:75\",\r\n                  label: \"75%\",\r\n                  value: \"75\",\r\n                },\r\n              ],\r\n            },\r\n          }}\r\n          data={content}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditorContainer;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Title.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\SelectOnMapDialog.js",["759","760","761"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { ParsiMap } from \"../../../apiCalls\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport OlMapContainer from \"../map/OlMapContainer\";\r\nimport DialogButtons from \"./DialogButtons\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst SelectOnMapDialog = ({\r\n  width = \"100%\",\r\n  height = \"100%\",\r\n  saveChanges = (f) => f,\r\n  defaultCoordinates = {\r\n    latitude: process.env.REACT_APP_LATITUDE,\r\n    longitude: process.env.REACT_APP_LONGITUDE,\r\n  },\r\n  defaultAddress = \"\",\r\n  condition,\r\n  setCondition = (f) => f,\r\n}) => {\r\n  const inputRef = useRef(null);\r\n\r\n  // store\r\n  const [store] = useContext(AppStore);\r\n\r\n  console.log(store.initials.instance);\r\n\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [coordinates, setCoordinates] = useState({\r\n    latitude:\r\n      store.initials.instance.latitude || process.env.REACT_APP_LATITUDE,\r\n    longitude:\r\n      store.initials.instance.longitude || process.env.REACT_APP_LONGITUDE,\r\n  });\r\n  const [searchAddress, setSearchAddress] = useState(\"\");\r\n  const [geofences, setGeoFences] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (condition) {\r\n      setCoordinates({\r\n        latitude:\r\n          store.initials.instance.latitude || defaultCoordinates.latitude,\r\n        longitude:\r\n          store.initials.instance.longitude || defaultCoordinates.longitude,\r\n      });\r\n      setSearchAddress(defaultAddress);\r\n      setShowMap(true);\r\n    } else {\r\n      setShowMap(false);\r\n    }\r\n  }, [condition]);\r\n\r\n  useEffect(() => {\r\n    if (inputRef.current && condition) {\r\n      inputRef.current.focus();\r\n    }\r\n  }, [inputRef.current, `condition`]);\r\n\r\n  const fetchAddress = (coordinates) => {\r\n    setLoading(true);\r\n    ParsiMap.reverse(coordinates).then((res) => {\r\n      setLoading(false);\r\n      if (res.status === 200) {\r\n        setSearchAddress(res.data.address);\r\n        setGeoFences(res.data.geofences);\r\n      }\r\n    });\r\n  };\r\n\r\n  const getAddress = (value) => (e) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    setLoading(true);\r\n    ParsiMap.routing(value).then((res) => {\r\n      setLoading(false);\r\n      if (res && res.data.results && res.data.results.length > 0) {\r\n        setSearchResults(res.data.results);\r\n      }\r\n    });\r\n  };\r\n\r\n  const onSearch = (name) => (e) => {\r\n    const value = e.target.value;\r\n    setSearchAddress(value);\r\n\r\n    getAddress(value)(undefined);\r\n  };\r\n\r\n  const goToLocation = (address) => (e) => {\r\n    e.stopPropagation();\r\n    const coordinates = {\r\n      latitude: address.geo_location.center.lat,\r\n      longitude: address.geo_location.center.lng,\r\n    };\r\n    setCoordinates(coordinates);\r\n    fetchAddress(coordinates);\r\n    setSearchAddress(address.description);\r\n    setSearchResults([]);\r\n  };\r\n\r\n  const onMapClick = () => {\r\n    setSearchResults([]);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setCondition(false);\r\n    if (modalRoot.children.length === 2) {\r\n      modalRoot.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  const onConfirm = () => {\r\n    saveChanges(searchAddress, coordinates, geofences);\r\n    closeDialog();\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"w100\">\r\n        <form\r\n          className=\"w100 frc relative\"\r\n          onSubmit={getAddress(searchAddress)}\r\n        >\r\n          <TextInput\r\n            value={searchAddress}\r\n            onChange={onSearch}\r\n            forwardWrapperRef={inputRef}\r\n            placeholder=\"جستجوی آدرس\"\r\n            icon=\"fas fa-search\"\r\n            wrapperClassName=\"w100\"\r\n            iconClassName=\"f15\"\r\n            onIconClick={getAddress(searchAddress)}\r\n            autoFocus={true}\r\n          />\r\n\r\n          <section\r\n            className={`bg-white w100 absolute z1 ${\r\n              loading ? \"mh100 frc\" : \"fcc\"\r\n            }`}\r\n            style={{ top: \"100%\" }}\r\n          >\r\n            {loading ? (\r\n              <Loader absolute={true} className=\"f12\" />\r\n            ) : (\r\n              searchResults.map((result, i) => (\r\n                <div\r\n                  onClick={goToLocation(result)}\r\n                  className=\"w100 frs px1 py05 pointer hv-light f12 text-dark\"\r\n                >\r\n                  {result.description}\r\n                </div>\r\n              ))\r\n            )}\r\n          </section>\r\n        </form>\r\n        {showMap && (\r\n          <OlMapContainer\r\n            width={width}\r\n            height={height - 60}\r\n            center={[coordinates.longitude, coordinates.latitude]}\r\n            zoom={15}\r\n            fetchAddress={fetchAddress}\r\n            setCoordinates={setCoordinates}\r\n            onMapClick={onMapClick}\r\n            className=\"px1\"\r\n          />\r\n        )}\r\n\r\n        <DialogButtons\r\n          primaryTitle=\"تایید\"\r\n          onPrimaryClick={onConfirm}\r\n          secondaryTitle=\"لغو\"\r\n          onSecondaryClick={closeDialog}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SelectOnMapDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useMakeRequest.js",["762","763"],"import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  constants,\r\n  getFromLocalStorage,\r\n  checkLoginState,\r\n  logout,\r\n  appRoutes,\r\n} from \"../../helperFuncs\";\r\n\r\nconst useMakeRequest = (\r\n  caller = (f) => f,\r\n  statusCode,\r\n  condition,\r\n  payload = null,\r\n  callback = (f) => f,\r\n  ...rest\r\n) => {\r\n  const [data, setData] = useState([]);\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    let source;\r\n    const CancelToken = axios.CancelToken;\r\n    source = CancelToken.source();\r\n    if (condition) {\r\n      init(source);\r\n    }\r\n\r\n    return () => source.cancel(\"\");\r\n  }, [condition]);\r\n\r\n  const init = async (source) => {\r\n    const token = getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n    const instance =\r\n      getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_INSTANCE) || {};\r\n    setLoading(true);\r\n    caller(token, payload, source, instance, ...rest)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        if (res.isAxiosError) {\r\n          setError(true);\r\n          setSuccess(false);\r\n          callback(res);\r\n        }\r\n        if (res.status === statusCode) {\r\n          setData(res.data);\r\n          setError(true);\r\n          setSuccess(true);\r\n          callback(res);\r\n        }\r\n        if (res.status === 401) {\r\n          setError(true);\r\n          if (token) {\r\n            logout(() => {\r\n              history.push(appRoutes.login);\r\n            });\r\n          }\r\n        }\r\n        if ([400, 500].some((errCode) => errCode === res.status)) {\r\n          setError(true);\r\n          callback(res);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        if (axios.isCancel(err)) {\r\n          console.log(\"Request canceled\", err.message);\r\n        }\r\n        setError(true);\r\n        setLoading(false);\r\n        callback(err.response ? err.response : err);\r\n      });\r\n  };\r\n\r\n  return [data, loading, setLoading, error, setError, success, setSuccess];\r\n};\r\n\r\nexport default useMakeRequest;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\RegisterForm.js",["764"],"import React, { useContext, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CommonAPI, UserInfoAPI } from \"../../../apiCalls\";\r\nimport { callAPI, fixDigit } from \"../../../helperFuncs\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport Button from \"../../helpers/Button\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst RegisterForm = ({\r\n  setCondition,\r\n  fields = [],\r\n  caller = (f) => f,\r\n  successCallback = (f) => f,\r\n  edit = false,\r\n  values = {},\r\n}) => {\r\n  // store\r\n  const [store = {}] = useContext(AppStore);\r\n  const { initials: { instance = {} } = {} } = store;\r\n\r\n  // data states\r\n  const [formData, setFormData] = useState({\r\n    firstName: edit ? values.firstName || \"\" : \"\",\r\n    lastName: edit ? values.lastName || \"\" : \"\",\r\n    userName: edit ? values.userName || \"\" : \"\",\r\n    phoneNumber: edit ? values.phoneNumber || \"\" : \"\",\r\n    password: edit ? values.password || \"\" : \"\",\r\n    organization: edit ? values.organization || \"\" : \"\",\r\n    title: edit ? values.title || \"\" : \"\",\r\n  }); // form data\r\n  const [roles, setRoles] = useState([]); // roles given to user\r\n  const [regions, setRegions] = useState([]); // regions given to user\r\n\r\n  // flags\r\n  const [loading, setLoading] = useState(false); // loader status\r\n\r\n  const hanldeChange = (name, onlyDigit) => (e) => {\r\n    let value = e.target.value;\r\n    if (onlyDigit) {\r\n      value = removeNonDigits(value);\r\n    }\r\n    const isValid = phoneNumberValidation(value, name);\r\n    if (isValid) {\r\n      value = \"09\" + value;\r\n    }\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  // remove non digits\r\n  const removeNonDigits = (value) =>\r\n    fixDigit(value, true).replace(/[^0-9]/g, \"\");\r\n\r\n  const phoneNumberValidation = (value, name) =>\r\n    name === \"phoneNumber\" &&\r\n    !String(value).startsWith(\"09\") &&\r\n    value.length > 1;\r\n\r\n  // prepare payload for submit\r\n  const getPayload = () => {\r\n    let payload;\r\n    if (edit) {\r\n      payload = new FormData();\r\n      Object.keys(formData).forEach((key) => {\r\n        payload.append(key, formData[key]);\r\n      });\r\n    } else {\r\n      const selectedRoles = roles.map((role) => role.roleName);\r\n      const selectedRegions = regions.map((region) => region.id);\r\n      payload = {\r\n        ...formData,\r\n        roles: selectedRoles,\r\n        regionIds: selectedRegions,\r\n        userName: instance.abbreviation + \"-\" + formData.userName,\r\n      };\r\n    }\r\n    return payload;\r\n  };\r\n\r\n  // prepare and send request\r\n  const registerUser = (e) => {\r\n    const payload = getPayload();\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller,\r\n        successStatus: edit ? 204 : 200,\r\n        payload,\r\n        successCallback: (res) => {\r\n          successCallback(res);\r\n          toast(\r\n            res.data.message\r\n              ? res.data.message\r\n              : edit\r\n              ? \"ویرایش یا موفقیت انجام شد.\"\r\n              : \"کاربر جدید با موفقیت ایجاد شد.\",\r\n            { type: \"success\" }\r\n          );\r\n        },\r\n        requestEnded: () => {\r\n          modalRoot.classList.remove(\"active\");\r\n          setCondition(false);\r\n          setLoading(false);\r\n        },\r\n      },\r\n      values.id\r\n    );\r\n  };\r\n\r\n  const shouldBeVisible = (name) => fields.indexOf(name) !== -1;\r\n  return (\r\n    <>\r\n      <form className=\"w100 frc row relative py2 px2\">\r\n        {shouldBeVisible(\"firstName\") && (\r\n          <TextInput\r\n            value={formData.firstName}\r\n            onChange={hanldeChange}\r\n            name=\"firstName\"\r\n            title={\"نام\"}\r\n            required={false}\r\n            wrapperClassName=\"rw3\"\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"lastName\") && (\r\n          <TextInput\r\n            value={formData.lastName}\r\n            onChange={hanldeChange}\r\n            name=\"lastName\"\r\n            title={\"نام خانوادگی\"}\r\n            required={false}\r\n            wrapperClassName=\"rw3 of-hidden\"\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"userName\") && (\r\n          <TextInput\r\n            value={formData.userName}\r\n            onChange={hanldeChange}\r\n            name=\"userName\"\r\n            title={\"نام کاربری\"}\r\n            required={false}\r\n            wrapperClassName=\"rw3\"\r\n            renderInfo={() => \" - \" + instance.abbreviation}\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"password\") && (\r\n          <TextInput\r\n            value={formData.password}\r\n            onChange={hanldeChange}\r\n            name=\"password\"\r\n            title={\"رمز عبور\"}\r\n            required={false}\r\n            wrapperClassName=\"rw3\"\r\n            type=\"password\"\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"title\") && (\r\n          <TextInput\r\n            value={formData.title}\r\n            onChange={hanldeChange}\r\n            name=\"title\"\r\n            title={\"عنوان\"}\r\n            required={false}\r\n            wrapperClassName=\"rw3\"\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"roles\") && (\r\n          <MultiSelect\r\n            wrapperClassName=\"rw3\"\r\n            strings={{ label: \"نقش ها\" }}\r\n            caller={UserInfoAPI.getRolesForCreate}\r\n            defaultSelecteds={[]}\r\n            onChange={setRoles}\r\n            isStatic={false}\r\n            maxHeight={300}\r\n            nameKey=\"displayName\"\r\n            valueKey=\"roleName\"\r\n            isInDialog={true}\r\n            id=\"roles-list\"\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"regions\") && (\r\n          <MultiSelect\r\n            wrapperClassName=\"rw3\"\r\n            strings={{ label: \"مناطق\" }}\r\n            caller={CommonAPI.getYazdRegions}\r\n            defaultSelecteds={[]}\r\n            onChange={setRegions}\r\n            isStatic={false}\r\n            maxHeight={300}\r\n            nameKey=\"name\"\r\n            valueKey=\"id\"\r\n            isInDialog={true}\r\n            id=\"regions-list\"\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"organization\") && (\r\n          <TextInput\r\n            value={formData.organization}\r\n            onChange={hanldeChange}\r\n            name=\"organization\"\r\n            title={\"سازمان\"}\r\n            required={false}\r\n            wrapperClassName=\"rw3 of-hidden\"\r\n          />\r\n        )}\r\n        {shouldBeVisible(\"phoneNumber\") && (\r\n          <TextInput\r\n            value={formData.phoneNumber}\r\n            onChange={hanldeChange}\r\n            name=\"phoneNumber\"\r\n            title={\"تلفن همراه\"}\r\n            required={false}\r\n            wrapperClassName=\"rw3\"\r\n            onlyDigit={true}\r\n            maxLength=\"11\"\r\n          />\r\n        )}\r\n      </form>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title={edit ? \"ویرایش کاربر\" : \"ایجاد کاربر\"}\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={registerUser}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Tabs.js",["765"],"import React, { useEffect, useState } from \"react\";\r\nimport Tab from \"./Tab\";\r\nimport \"../../stylesheets/tabs.css\";\r\n\r\nconst Tabs = ({\r\n  children,\r\n  mainClass,\r\n  activeClass,\r\n  changes = [],\r\n  setChanges = (f) => f,\r\n  defaultActiveId,\r\n  onTabChange = (f) => f,\r\n  wrapperClassName = \"\",\r\n  contentClassName = \"\",\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(\"\");\r\n  const onClickTabItem = (tab) => {\r\n    setActiveTab(tab);\r\n    onTabChange(tab);\r\n    if (changes && changes.accidentId === tab) {\r\n      setChanges(null);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setActiveTab(defaultActiveId ? defaultActiveId : children[0].props.id);\r\n  }, [children.length, defaultActiveId]);\r\n\r\n  return (\r\n    <>\r\n      <div className={`${mainClass}s ${wrapperClassName}`}>\r\n        {children\r\n          .filter((c) => c.props)\r\n          .map((child, i) => {\r\n            const { label, id } = child.props;\r\n            return (\r\n              <Tab\r\n                activeTab={activeTab}\r\n                key={i}\r\n                label={label}\r\n                handleClick={onClickTabItem}\r\n                mainClass={mainClass}\r\n                activeClass={activeClass}\r\n                tabId={id}\r\n                hasNew={changes && changes.accidentId === id}\r\n              />\r\n            );\r\n          })}\r\n      </div>\r\n      <div className={`${mainClass}s-content ${contentClassName}`}>\r\n        {children\r\n          .filter((c) => c.props)\r\n          .map((child, i) => {\r\n            if (child.props.id !== activeTab) return undefined;\r\n            return child.props.children;\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\NewReportsTable.js",["766","767","768","769"],"import React, { useEffect, useState, useContext, useRef } from \"react\";\r\nimport { ReportsAPI } from \"../../../apiCalls\";\r\nimport MyDataTable from \"../../helpers/MyDataTable\";\r\nimport DialogToggler from \"../../helpers/DialogToggler\";\r\nimport {\r\n  callAPI,\r\n  defaultFilters,\r\n  getUserRoles,\r\n  hasRole,\r\n  isTimePassed,\r\n  reportColumn,\r\n  tableLightTheme,\r\n} from \"../../../helperFuncs\";\r\nimport ReportDialog from \"./ReportDialog\";\r\nimport useSignalR from \"../../hooks/useSignalR\";\r\nimport ConfirmReportDialog from \"./ConfirmReportDialog\";\r\nimport NavigatableDialog from \"../../helpers/NavigatableDialog\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport TableActions from \"./TableActions\";\r\nimport EditReportDialog from \"../dialogs/EditReportDialog\";\r\nimport NoData from \"../../helpers/NoData/NoData\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\nconst modalRoot2 = document && document.getElementById(\"modal2-root\");\r\n\r\nconst NewReportsTable = ({ roleId = null, onRefer = (f) => f }) => {\r\n  const userRoles = getUserRoles();\r\n  const isConfirm = hasRole([\"Operator\"], userRoles) && !roleId;\r\n  const isEditable = !!hasRole([\"Operator\"], userRoles) && !!roleId;\r\n  const fromRoleId = useRef(roleId);\r\n\r\n  // store\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // other states\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(10);\r\n  const [dialogData, setDialogData] = useState({});\r\n  const [totalRows, setTotalRows] = useState(0);\r\n\r\n  // flags\r\n  const [dialog, setDialog] = useState(false);\r\n  const [confirmDialog, setConfirmDialog] = useState(false);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [loading, setLoading] = useState(roleId === \"\" ? false : true);\r\n\r\n  const queries = {\r\n    page,\r\n    perPage: limit,\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    fromRoleId.current = roleId;\r\n    if (roleId || roleId === null) {\r\n      getTasks(roleId);\r\n    }\r\n\r\n    return () => {\r\n      // dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [roleId, page, limit, store.filters]);\r\n\r\n  const getTasks = (roleId) => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ReportsAPI.getTasks,\r\n        payload: roleId,\r\n        successCallback: (res) => {\r\n          setData(res.data);\r\n          const pagination = res.headers[\"x-pagination\"];\r\n          const totalRows = JSON.parse(pagination)?.TotalCount;\r\n          setTotalRows(totalRows);\r\n        },\r\n        requestEnded: () => {\r\n          setLoading(false);\r\n          onRefer();\r\n        },\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const openDialog = (row) => {\r\n    if (isConfirm) {\r\n      modalRoot.classList.add(\"active\");\r\n      setConfirmDialog(true);\r\n      setDialogData(row);\r\n    } else {\r\n      modalRoot.classList.add(\"active\");\r\n      setDialog(true);\r\n      setDialogData(row);\r\n    }\r\n  };\r\n\r\n  const openEditDialog = (row) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setEditDialog(true);\r\n    setDialogData(row);\r\n  };\r\n\r\n  const verifiedCallBack = (row) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n    setDialogData(row);\r\n    onRefer();\r\n  };\r\n\r\n  const onEditDialogClose = ({ withRefer, report } = {}) => {\r\n    setEditDialog(false);\r\n    getTasks(roleId);\r\n    if (withRefer) {\r\n      setDialog(true);\r\n      setDialogData(report);\r\n      onRefer();\r\n    } else {\r\n      modalRoot.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  // variables\r\n  const conditionalRowStyles = [\r\n    {\r\n      when: (row) => isTimePassed(row.deadline),\r\n      style: {\r\n        backgroundColor: \"#C78E8E\",\r\n        color: \"var(--dark)\",\r\n        borderRight: \"5px solid #FF0000\",\r\n      },\r\n    },\r\n    {\r\n      when: (row) => isTimePassed(row.responseDeadline),\r\n      style: {\r\n        backgroundColor: \"#f6c5078f\",\r\n        color: \"var(--dark)\",\r\n        borderRight: \"5px solid #f6c507\",\r\n      },\r\n    },\r\n    {\r\n      when: (row) =>\r\n        !isTimePassed(row.deadline) && !isTimePassed(row.responseDeadline),\r\n      style: {\r\n        // backgroundColor: \"#e9e9e9\",\r\n        backgroundColor: \"#fff\",\r\n      },\r\n    },\r\n  ];\r\n\r\n  const tableActions = [\r\n    {\r\n      id: \"new-reports-1\",\r\n      icon: \"fas fa-eye\",\r\n      title: \"بررسی\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n    {\r\n      id: \"new-reports-2\",\r\n      icon: \"fas fa-edit\",\r\n      title: \"ویرایش\",\r\n      onClick: (row) => openEditDialog(row),\r\n      hide: !isEditable,\r\n    },\r\n  ];\r\n\r\n  const moreButton = {\r\n    name: \"\",\r\n    cell: (row, index) => (\r\n      <TableActions\r\n        actions={tableActions}\r\n        rowData={row}\r\n        index={index}\r\n        total={data.length}\r\n        perPage={limit}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const tableScrollable = (window.innerHeight * 21) / 24 - 200;\r\n\r\n  const closeDialog = () => {\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n  };\r\n\r\n  const onPageChange = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setLimit(newPerPage);\r\n  };\r\n\r\n  const refresh = () => {\r\n    getTasks(roleId);\r\n  };\r\n\r\n  const onRowClicked = (row) => {\r\n    openDialog(row);\r\n  };\r\n\r\n  const onNewReport = () => {\r\n    getTasks(fromRoleId.current);\r\n  };\r\n\r\n  // eefects\r\n\r\n  useSignalR(onNewReport);\r\n\r\n  return (\r\n    <>\r\n      {!isConfirm && (\r\n        <NavigatableDialog\r\n          condition={dialog}\r\n          dialogId={dialogData?.id}\r\n          data={dialogData}\r\n          setCondition={setDialog}\r\n          width={900}\r\n          height={600}\r\n          list={data}\r\n          Child={ReportDialog}\r\n          childProps={{\r\n            id: dialogData?.id,\r\n            readOnly: false,\r\n            setDialog: setDialog,\r\n            refresh: refresh,\r\n            caller: ReportsAPI.getTask,\r\n          }}\r\n          id=\"report-dialog\"\r\n        />\r\n      )}\r\n\r\n      {/* confirm dialog */}\r\n      {isConfirm && (\r\n        <DialogToggler\r\n          condition={confirmDialog}\r\n          dialogId={dialogData?.id}\r\n          data={dialogData}\r\n          setCondition={setConfirmDialog}\r\n          width={800}\r\n          node={modalRoot2}\r\n          id=\"confirm-dialog\"\r\n        >\r\n          <ConfirmReportDialog\r\n            setDialog={setConfirmDialog}\r\n            report={dialogData}\r\n            verifiedCallBack={verifiedCallBack}\r\n          />\r\n        </DialogToggler>\r\n      )}\r\n      {isConfirm && (\r\n        <DialogToggler\r\n          condition={dialog}\r\n          dialogId={dialogData?.id}\r\n          data={dialogData}\r\n          setCondition={setDialog}\r\n          width={800}\r\n          height={650}\r\n          outSideClick={false}\r\n          id={\"confirm-report-dialog\"}\r\n        >\r\n          <ReportDialog\r\n            id={dialogData?.id}\r\n            readOnly={false}\r\n            setDialog={setDialog}\r\n            refresh={refresh}\r\n            caller={ReportsAPI.getTask}\r\n            childData={dialogData}\r\n            onNext={closeDialog}\r\n          />\r\n        </DialogToggler>\r\n      )}\r\n      {isEditable && (\r\n        <DialogToggler\r\n          condition={editDialog}\r\n          setCondition={setEditDialog}\r\n          data={dialogData}\r\n          dialogId={dialogData?.id}\r\n          width={700}\r\n          outSideClick={false}\r\n          id=\"edit-report\"\r\n        >\r\n          <EditReportDialog report={dialogData} onSuccess={onEditDialogClose} />\r\n        </DialogToggler>\r\n      )}\r\n      <MyDataTable\r\n        data={data}\r\n        columns={[...reportColumn, moreButton]}\r\n        theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n        onPageChange={onPageChange}\r\n        onRowsPageChange={onRowsPageChange}\r\n        totalRows={totalRows}\r\n        loading={loading}\r\n        filters={true}\r\n        filterTypes={{ query: true, from: true, to: true }}\r\n        conditionalRowStyles={conditionalRowStyles}\r\n        onRowClicked={onRowClicked}\r\n        fixedHeaders={true}\r\n        fixedHeaderScrollHeight={tableScrollable + \"px\"}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(NewReportsTable);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\MyBarChart.js",["770","771","772","773"],"import React from \"react\";\r\nimport { Bar, LabelList, Legend } from \"recharts\";\r\nimport { XAxis } from \"recharts\";\r\nimport { YAxis } from \"recharts\";\r\nimport { BarChart } from \"recharts\";\r\nimport { Tooltip, ResponsiveContainer, Cell } from \"recharts\";\r\n\r\nconst COLORS = [\"#0088FE\", \"#352e47\", \"#FFBB28\", \"#FF8042\"];\r\nconst renderLegend = (props) => {\r\n  const { payload } = props;\r\n  return (\r\n    <ul>\r\n      {payload.map((entry, index) => (\r\n        <li key={`item-${index}`}>{entry.value}</li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst CustomYAxisTick = (props) => {\r\n  const { x, y, payload } = props;\r\n  return (\r\n    <text x={x} y={y} textAnchor=\"start\" fill=\"#666\">\r\n      {payload.value}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst renderCustomizedLabel = (props, data) => {\r\n  const { x, y, width, height, value, name } = props;\r\n  const radius = 10;\r\n\r\n  const total = data.find(d => d.name === name)['کل'] || 1;\r\n\r\n  console.log(width);\r\n\r\n  return (\r\n    <g>\r\n      {/* <circle cx={x + width / 2} cy={y} r={radius} fill=\"#8884d8\" /> */}\r\n      <text\r\n        x={x + width / 2}\r\n        y={y + radius / 2}\r\n        fill=\"var(--white)\"\r\n        textAnchor=\"middle\"\r\n        z={2}\r\n        dominantBaseline=\"middle\"\r\n      >\r\n        {((value / total) * 100).toFixed(0) + '%'}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst MyBarChart = ({\r\n  width = 400,\r\n  height = 400,\r\n  data = [],\r\n  title = \"\",\r\n  className = \"\",\r\n  isStacked,\r\n  isHorizontal,\r\n}) => {\r\n  return (\r\n    <div className={`${className}`}>\r\n      <div className=\"w90 mxa frc flex my-3 gradient-title\">\r\n        <span className=\"f3 \">{title}</span>\r\n      </div>\r\n      <ResponsiveContainer\r\n        width=\"100%\"\r\n        className={\"mybarchart\"}\r\n        maxWidth={width}\r\n        height={height}\r\n      >\r\n        <BarChart\r\n          width={width}\r\n          data={data}\r\n          barSize={30}\r\n          layout={isHorizontal ? \"horizontal\" : \"vertical\"}\r\n        >\r\n          {data.length > 0 &&\r\n            Object.keys(data[0])\r\n              .filter((d) => d !== \"name\" && d !== \"کل\")\r\n              .map((d, i) => {\r\n                return (\r\n                  <Bar\r\n                    key={i}\r\n                    dataKey={d}\r\n                    fill={COLORS[i]}\r\n                    stackId={isStacked ? \"stackId\" : undefined}\r\n                    // label={true}\r\n                  >\r\n                    <LabelList dataKey={d} content={(props) => renderCustomizedLabel(props, data)} />\r\n                  </Bar>\r\n                );\r\n              })}\r\n          <Legend\r\n            payload={\r\n              data.length > 0 &&\r\n              Object.keys(data[0])\r\n                .filter((d) => d !== \"name\" && d !== \"کل\")\r\n                .map((d, j) => {\r\n                  return { value: d, id: \"ID\" + j, color: COLORS[j] };\r\n                })\r\n            }\r\n          />\r\n          <XAxis type=\"number\" />\r\n          <YAxis\r\n            type=\"category\"\r\n            dataKey={\"name\"}\r\n            width={150}\r\n            tick={<CustomYAxisTick />}\r\n          />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyBarChart;\r\n",["774","775"],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\CitizenInfo.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportHistory.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\map\\ShowOnMap.js",["776","777"],"import React from \"react\";\r\nimport ReactMapboxGl, { Marker, ZoomControl } from \"react-mapbox-gl\";\r\nimport locationImg from \"../../../assets/Images/location.svg\";\r\n\r\nconst Map = ReactMapboxGl({\r\n  accessToken:\r\n    \"pk.eyJ1IjoibW9qaTc3OTgiLCJhIjoiY2trbGFwaWVvMngyZjJwcGF2OXo3YTdoeCJ9.UxvZqSaLRiN0J2qaF3TJrA\",\r\n  zoom: 9,\r\n});\r\n\r\nconst ShowOnMap = ({ location, width = 400, height = 400, zoom = 9 }) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: width,\r\n        height: height,\r\n      }}\r\n    >\r\n      <Map\r\n        zoom={[12]}\r\n        center={[\r\n          location.longitude ? location.longitude : 54.3569,\r\n          location.latitude ? location.latitude : 31.8974,\r\n        ]}\r\n        containerStyle={{ height: height, width: width }}\r\n        style={`https://api.parsimap.ir/styles/parsimap-streets-v11?key=p18879615a54484eb98d403da218956ecaa2740c42`}\r\n      >\r\n        <Marker\r\n          coordinates={[\r\n            location.longitude ? location.longitude : 54.3569,\r\n            location.latitude ? location.latitude : 31.8974,\r\n          ]}\r\n        >\r\n          <img src={locationImg} />\r\n        </Marker>\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowOnMap;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\SubjectDialog.js",["778","779","780","781"],"import React, { useEffect, useState } from \"react\";\r\nimport { CommonAPI } from \"../../../apiCalls\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport { fixDigit } from \"../../../helperFuncs\";\r\nimport Loader from \"../../helpers/Loader\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst SubjectDialog = ({\r\n  setCategoryId,\r\n  setDialog,\r\n  multiple = false,\r\n  selecteds,\r\n  setSelecteds = (f) => f,\r\n  onDelete = (f) => f,\r\n  subject,\r\n  setSubject = (f) => f,\r\n  setCategoryTitle = (f) => f,\r\n}) => {\r\n  const [level, setLevel] = useState(1);\r\n  const [data, setData] = useState([]);\r\n  const [selectBoxes, setSelectBoxes] = useState([\r\n    { categories: [], level: 1 },\r\n  ]);\r\n  const [values, setValues] = useState([]);\r\n  const [, loading] = useMakeRequest(\r\n    CommonAPI.getSubjectGroups,\r\n    200,\r\n    true,\r\n    null,\r\n    (res) => {\r\n      if (res.status === 200) {\r\n        setSelectBoxes([\r\n          {\r\n            categories: res.data.categories,\r\n            level: level,\r\n            title: res.data.title,\r\n          },\r\n        ]);\r\n        setData(res.data.categories);\r\n        setLevel(++level);\r\n      }\r\n    }\r\n  );\r\n\r\n  const applyChanges = () => {\r\n    const selecteds = subject;\r\n    setSelecteds(selecteds);\r\n    setDialog(false);\r\n    if (modalRoot.children.length === 1) {\r\n      modalRoot.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const lastBox = selectBoxes.slice(-1)[0];\r\n    if (lastBox.categories.length === 0 && lastBox.level !== 1) {\r\n      setCategoryId(values.slice(-1)[0]);\r\n    }\r\n  }, [values.length]);\r\n\r\n  const handleChange = (selectbox) => (e) => {\r\n    if (level > selectbox.level) {\r\n      if (level - selectbox.level === 1) {\r\n        const value = e.target.value;\r\n        let newValues = values;\r\n        newValues[newValues.length - 1] = value;\r\n        const newSeletBoxes = selectBoxes.filter(\r\n          (s, i) => i + 1 <= selectbox.level\r\n        );\r\n        const currentData = newSeletBoxes.filter(\r\n          (s, i) => s.level === selectbox.level\r\n        )[0].categories;\r\n        const selectedGroup = currentData.filter(\r\n          (d, i) => d.id === parseInt(value)\r\n        )[0];\r\n        setSubject([...subject, { title: selectedGroup.title, id: value }]);\r\n        setSelectBoxes([\r\n          ...newSeletBoxes,\r\n          {\r\n            categories: selectedGroup.categories,\r\n            level: selectbox.level + 1,\r\n          },\r\n        ]);\r\n        setValues(newValues);\r\n        setLevel(level);\r\n      } else {\r\n        const value = e.target.value;\r\n        let newValues = values;\r\n        newValues = newValues.filter((v, i) => i + 1 <= selectbox.level);\r\n        newValues[newValues.length - 1] = value;\r\n        const newSeletBoxes = selectBoxes.filter(\r\n          (s, i) => i + 1 <= selectbox.level\r\n        );\r\n        const subjects = newSeletBoxes.map((selectBox) => selectBox.title);\r\n        const currentData = newSeletBoxes.filter(\r\n          (s, i) => s.level === selectbox.level\r\n        )[0].categories;\r\n        const selectedGroup = currentData.filter(\r\n          (d, i) => d.id === parseInt(value)\r\n        )[0];\r\n        setSelectBoxes([\r\n          ...newSeletBoxes,\r\n          {\r\n            categories: selectedGroup.categories,\r\n            level: selectbox.level + 1,\r\n          },\r\n        ]);\r\n        setValues(newValues);\r\n        setLevel(selectbox.level + 1);\r\n      }\r\n      return;\r\n    }\r\n    if (level === selectbox.level) {\r\n      const value = e.target.value;\r\n      let newValues = [...values, value];\r\n      setValues(newValues);\r\n      const currentData = selectBoxes.filter((s, i) => s.level === level)[0]\r\n        .categories;\r\n      const selectedGroup = currentData.filter(\r\n        (d, i) => d.id === parseInt(value)\r\n      )[0];\r\n      if (selectedGroup.categories.length === 0) {\r\n        setSubject([...subject, { title: selectedGroup.title, id: value }]);\r\n      }\r\n      setSelectBoxes([\r\n        ...selectBoxes,\r\n        {\r\n          categories: selectedGroup.categories,\r\n          level: level + 1,\r\n          title: selectedGroup.title,\r\n        },\r\n      ]);\r\n      setLevel((level) => level + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading && <Loader absolute={true} />}\r\n      <div className=\"fcc py4\" style={{width: 400}}>\r\n        <h1>انتخاب گروه موضوعی</h1>\r\n        {selecteds.length > 0 &&\r\n          (multiple ? (\r\n            selecteds.map((s, i) => (\r\n              <div className=\"flex-center-row\">\r\n                <span className=\"f3 pointer\" onClick={() => onDelete(s.id)}>\r\n                  &times;\r\n                </span>\r\n                <input value={s.title} readOnly={true} className={\"select\"} />\r\n              </div>\r\n            ))\r\n          ) : (\r\n            <div className=\"flex-center-row\">\r\n              <span\r\n                className=\"f3 pointer\"\r\n                onClick={() => onDelete(selecteds.slice(-1)[0].id)}\r\n              >\r\n                &times;\r\n              </span>\r\n              <input\r\n                value={selecteds.slice(-1)[0].title}\r\n                readOnly={true}\r\n                className={\"select\"}\r\n              />\r\n            </div>\r\n          ))}\r\n        {selectBoxes.map((select, i) => {\r\n          return (\r\n            select.categories.length > 0 && (\r\n              <div className=\"select-group\" key={i}>\r\n                <label className=\"select-label bg-primary\">\r\n                  {fixDigit(select.level)}\r\n                </label>\r\n                <select\r\n                  key={i}\r\n                  value={\r\n                    values[select.level - 1] === undefined\r\n                      ? \"\"\r\n                      : values[select.level - 1]\r\n                  }\r\n                  onChange={handleChange(select, select.level)}\r\n                  className=\"select\"\r\n                >\r\n                  <option value=\"\">انتخاب کنید</option>\r\n                  {select.categories.map((category, j) => (\r\n                    <option key={j} value={category.id}>\r\n                      {category.title}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            )\r\n          );\r\n        })}\r\n        <div className=\"flex-row-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn\"\r\n            onClick={() => applyChanges(subject)}\r\n          >\r\n            اعمال\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SubjectDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ProfileForm.js",["782","783","784"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CommonAPI, UserInfoAPI } from \"../../../apiCalls\";\r\nimport {\r\n  fixDigit,\r\n  mapObjectToFormData,\r\n  serverError,\r\n  unKnownError,\r\n} from \"../../../helperFuncs\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport AddAttachments from \"../../helpers/AddAttachments\";\r\nimport Button from \"../../helpers/Button\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport Avatar from \"./Avatar\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst ProfileForm = ({ data, setDialog }) => {\r\n  const [state, dispatch] = useContext(AppStore);\r\n\r\n  const [formData, setFormData] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    userName: \"\",\r\n    phoneNumber: \"\",\r\n    address: \"\",\r\n    education: \"\",\r\n    title: \"\",\r\n  });\r\n  const [preview, setPreview] = useState(undefined);\r\n  const [showPreview, setShowPreview] = useState(false);\r\n  const [file, setFile] = useState(null);\r\n  const [payload, setPayload] = useState(undefined);\r\n  const [makeRequest, setMakeRequest] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      ...formData,\r\n      firstName: data.firstName ? data.firstName : \"\",\r\n      lastName: data.lastName ? data.lastName : \"\",\r\n      userName: data.userName ? data.userName : \"\",\r\n      phoneNumber: data.phoneNumber ? data.phoneNumber : \"\",\r\n      address: data.address ? data.address.detail : \"\",\r\n      education: data.education ? data.education.id : \"\",\r\n      title: data.title ? data.title : \"\",\r\n    });\r\n  }, [data]);\r\n\r\n  const handleChange = (name, onlyDigit) => (e) => {\r\n    let value = e.target.value;\r\n    if (onlyDigit) {\r\n      value = fixDigit(value, true).replace(/[^-0-9]/, \"\");\r\n    }\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleAvatarSelect = (e) => {\r\n    const file = e.target.files[0];\r\n    setFile(file);\r\n    readFile(file);\r\n  };\r\n\r\n  const readFile = (file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      setPreview(reader.result);\r\n      setShowPreview(true);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const saveCahnges = (e) => {\r\n    let payload = new FormData();\r\n    payload = mapObjectToFormData(formData, payload);\r\n    payload.delete(\"address\");\r\n    payload.delete(\"education\");\r\n    payload.set(\"address.detail\", formData.address);\r\n    payload.set(\"educationId\", formData.education);\r\n    payload.set(\"avatarFile\", file);\r\n    setPayload(payload);\r\n    setMakeRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    UserInfoAPI.updateUser,\r\n    204,\r\n    makeRequest,\r\n    payload,\r\n    (res) => {\r\n      setMakeRequest(false);\r\n      setDialog(false);\r\n      modalRoot.classList.remove(\"active\");\r\n      if (res.status === 204) {\r\n        toast(\"تغییرات با موفقیت ذخیره شد.\", { type: \"success\" });\r\n        dispatch({ type: \"setApiCall\", payload: true });\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    }\r\n  );\r\n\r\n  const cameraIconStyle = {\r\n    top: \"5%\",\r\n    right: \"5%\",\r\n    zIndex: 2,\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"w100 frc\">\r\n        <div className=\"relative\">\r\n          <span className=\"absolute\" style={cameraIconStyle}>\r\n            <AddAttachments\r\n              toggle={\r\n                <span className=\"sq25 bg-primary frc text-white br1 pointer\">\r\n                  <i className=\"fas fa-camera\"></i>\r\n                </span>\r\n              }\r\n              handleChange={handleAvatarSelect}\r\n            />\r\n          </span>\r\n          {showPreview ? (\r\n            <Avatar source={preview} size={4} />\r\n          ) : (\r\n            <Avatar\r\n              url={data.avatar && data.avatar.url}\r\n              placeholder={!data.avatar}\r\n              size={4}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <form className={\"w100 mx-a relative frc wrap\"}>\r\n        <TextInput\r\n          name=\"firstName\"\r\n          value={formData.firstName}\r\n          onChange={handleChange}\r\n          title=\"نام\"\r\n          required={false}\r\n          wrapperClassName=\"rw3\"\r\n        />\r\n        <TextInput\r\n          name=\"lastName\"\r\n          value={formData.lastName}\r\n          onChange={handleChange}\r\n          title=\"نام خانوادگی\"\r\n          required={false}\r\n          wrapperClassName=\"rw3\"\r\n        />\r\n        <TextInput\r\n          name=\"phoneNumber\"\r\n          value={formData.phoneNumber}\r\n          // onChange={handleChange}\r\n          title=\"تلفن همراه\"\r\n          required={false}\r\n          wrapperClassName=\"rw3\"\r\n          onlyDigit={true}\r\n          maxLength=\"11\"\r\n          readOnly={true}\r\n        />\r\n        <TextInput\r\n          name=\"title\"\r\n          value={formData.title}\r\n          onChange={handleChange}\r\n          title=\"عنوان\"\r\n          required={false}\r\n          wrapperClassName=\"rw3\"\r\n        />\r\n        <TextInput\r\n          name=\"address\"\r\n          value={formData.address}\r\n          onChange={handleChange}\r\n          title=\"آدرس\"\r\n          required={false}\r\n          wrapperClassName=\"rw3\"\r\n        />\r\n        <SelectBox\r\n          caller={CommonAPI.getEducationList}\r\n          value={formData.education}\r\n          handleChange={handleChange}\r\n          name=\"education\"\r\n          label=\"تحصیلات\"\r\n          horizontal={false}\r\n          wrapperClassName=\"rw3\"\r\n        />\r\n      </form>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title=\"ذخیره\"\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={saveCahnges}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\Referral.js",["785","786"],"import React, { useState } from \"react\";\r\nimport Tabs from \"../../helpers/Tabs\";\r\nimport \"../../../stylesheets/tabs.css\";\r\nimport TransitionForm from \"./TransitionForm\";\r\nimport { ReportsAPI } from \"../../../apiCalls\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport { toast } from \"react-toastify\";\r\nimport { callAPI } from \"../../../helperFuncs\";\r\nimport StageForm from \"./StageForm\";\r\n\r\nconst Referral = ({ data, onNext = (f) => f }) => {\r\n  // flags\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // prepare and send user request\r\n  const createTransition = (payload) => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ReportsAPI.createTransition,\r\n        payload,\r\n        requestEnded: () => {\r\n          setLoading(false);\r\n          onNext(null, true);\r\n        },\r\n        successCallback: () => {\r\n          toast(\"درخواست با موفقیت ارجاع داده شد.\", { type: \"success\" });\r\n        },\r\n      },\r\n      data?.report?.id\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {data.possibleTransitions.length > 0 && (\r\n        <Tabs mainClass=\"finalize-report-tab\" activeClass=\"active\">\r\n          {data.possibleTransitions.map((transition, i) => (\r\n            <article\r\n              label={transition.stageTitle}\r\n              id={transition.transitionId}\r\n              key={i}\r\n            >\r\n              <TransitionForm\r\n                data={data}\r\n                transition={transition}\r\n                createTransition={createTransition}\r\n                createLoading={loading}\r\n              />\r\n            </article>\r\n          ))}\r\n        </Tabs>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Referral;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ReportDetails.js",["787","788"],"import React from \"react\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport moment from \"moment-jalaali\";\r\nimport { convertserverTimeToDateString, doesExist } from \"../../../helperFuncs\";\r\nimport ShowAttachments from \"./ShowAttachments\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\n\r\nmoment.loadPersian({ usePersianDigits: true });\r\n\r\nconst ReportDetails = ({ data }) => {\r\n  return (\r\n    <section className={styles.reportDetails}>\r\n      <div className={styles.infoList}>\r\n        <div className=\"w90 mxa frc wrap\">\r\n          <TextInput\r\n            value={doesExist(data?.report?.trackingNumber)}\r\n            readOnly={true}\r\n            title=\"شماره درخواست\"\r\n            wrapperClassName=\"mxa flex-1\"\r\n            inputClassName=\"\"\r\n            required={false}\r\n          />\r\n          <TextInput\r\n            value={doesExist(data?.report?.category?.title)}\r\n            readOnly={true}\r\n            title=\"موضوع \"\r\n            wrapperClassName=\"mxa flex-1\"\r\n            inputClassName=\"\"\r\n            required={false}\r\n          />\r\n        </div>\r\n        <div className=\"w90 mxa frc wrap\">\r\n          <TextInput\r\n            value={doesExist(data?.report?.lastStatus)}\r\n            readOnly={true}\r\n            title=\"وضعیت\"\r\n            wrapperClassName=\"mxa flex-1\"\r\n            inputClassName=\"\"\r\n            required={false}\r\n          />\r\n          <TextInput\r\n            value={doesExist(data?.report?.address?.region?.name)}\r\n            readOnly={true}\r\n            title=\"منطقه\"\r\n            wrapperClassName=\"mxa flex-1\"\r\n            inputClassName=\"\"\r\n            required={false}\r\n          />\r\n        </div>\r\n        <div className=\"w90 mxa frc wrap\">\r\n          <TextInput\r\n            value={data?.report?.address?.detail}\r\n            readOnly={true}\r\n            title=\"آدرس\"\r\n            wrapperClassName=\"mxa flex-1\"\r\n            inputClassName=\"\"\r\n            required={false}\r\n          />\r\n        </div>\r\n        <Textarea\r\n          value={\r\n            data?.report?.category?.formElements.length > 0\r\n              ? \"\"\r\n              : doesExist(data?.report?.comments)\r\n          }\r\n          readOnly={true}\r\n          title=\"توضیحات\"\r\n          wrapperClassName=\"mxa\"\r\n          inputClassName=\"mh150 of-x-hidden\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ReportDetails;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useClick.js",["789"],"import { useState, useEffect } from \"react\";\r\n\r\nconst useClick = (element, event = \"click\", whitelists = []) => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const onClick = (event) => {\r\n      event.stopPropagation();\r\n      const isIn =\r\n        whitelists.length > 0\r\n          ? whitelists.some(\r\n              (w) => w.current && !w.current.contains(event.target)\r\n            )\r\n          : true;\r\n      if (\r\n        element.current !== null &&\r\n        !element.current.contains(event.target) &&\r\n        isIn\r\n      ) {\r\n        console.log(\"useclick: \", !isActive);\r\n        setIsActive(!isActive);\r\n      }\r\n    };\r\n\r\n    if (isActive) {\r\n      window.addEventListener(event, onClick);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener(event, onClick);\r\n    };\r\n  }, [isActive, element]);\r\n\r\n  return [isActive, setIsActive];\r\n};\r\n\r\nexport default useClick;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Dropdown.js",["790"],"import React, { useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../stylesheets/dropdown.module.css\";\r\n\r\nconst Dropdown = ({\r\n  children,\r\n  className = \"\",\r\n  position,\r\n  theme,\r\n  scroll,\r\n  scrollHeight,\r\n  dropItemStyle = {},\r\n  dropItemClassName = \"\",\r\n  dropDownClassName = \"\",\r\n  upper = true,\r\n}) => {\r\n  let posStyle = {};\r\n  if (position === \"top\") {\r\n    posStyle = {\r\n      left: \"50%\",\r\n      top: \"-100%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n    };\r\n  }\r\n\r\n  if (position === \"right\") {\r\n    if (upper) {\r\n      posStyle = {\r\n        left: \"100%\",\r\n        top: \"50%\",\r\n        transform: \"translateY(-50%)\",\r\n      };\r\n    } else {\r\n      posStyle = {\r\n        left: \"100%\",\r\n        bottom: \"50%\",\r\n      };\r\n    }\r\n  }\r\n\r\n  if (position === \"bottom\") {\r\n    posStyle = {\r\n      left: \"50%\",\r\n      top: \"100%\",\r\n      transform: \"translateX(-50%)\",\r\n    };\r\n  }\r\n\r\n  if (position === \"left\") {\r\n    posStyle = {\r\n      left: \"-100%\",\r\n      top: \"100%\",\r\n      transform: \"translate(-75%, -50%)\",\r\n    };\r\n  }\r\n  if (position === \"bottom right\" || position === \"right bottom\") {\r\n    posStyle = {\r\n      left: \"100%\",\r\n      top: \"100%\",\r\n    };\r\n  }\r\n  if (position === \"top right\" || position === \"right top\") {\r\n    posStyle = {\r\n      left: \"50%\",\r\n      transform: \"translateY(-100%)\",\r\n    };\r\n  }\r\n\r\n  if (position === \"center bottom\" || position === \"bottom center\") {\r\n    posStyle = {\r\n      right: \"0%\",\r\n      top: \"100%\",\r\n    };\r\n  }\r\n  if (position === \"left bottom\" || position === \"bottom left\") {\r\n    posStyle = {\r\n      left: \"0%\",\r\n      top: \"100%\",\r\n    };\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={[\r\n          styles.dropdown,\r\n          styles.dropdownAnimated,\r\n          className,\r\n          dropItemClassName,\r\n          scroll ? \"scrollbar\" : \"\",\r\n        ].join(\" \")}\r\n        style={{\r\n          ...posStyle,\r\n          ...theme,\r\n          overflowY: scroll ? \"auto\" : \"\",\r\n          maxHeight: scroll ? scrollHeight : \"\",\r\n          ...dropItemStyle,\r\n          transformOrigin: upper ? \"top center\" : \"bottom center\",\r\n        }}\r\n      >\r\n        {children}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nDropdown.propTypes = {\r\n  className: PropTypes.string,\r\n  position: PropTypes.string,\r\n  theme: PropTypes.object,\r\n};\r\n\r\nexport default React.memo(Dropdown);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useAddLisener.js",["791","792"],"import React, { useEffect } from \"react\";\r\n\r\nfunction useAddLisener({\r\n  ref = \"window\",\r\n  listenTo,\r\n  condition = true,\r\n  callback,\r\n  once = false,\r\n}) {\r\n  useEffect(() => {\r\n    function handler(event) {\r\n      if (ref === \"window\") {\r\n        callback(ref, event);\r\n        return;\r\n      }\r\n      if (ref.current && !ref.current.contains(event.target) && condition) {\r\n        callback(ref, event);\r\n      }\r\n    }\r\n\r\n    if (ref === \"window\") {\r\n      window.addEventListener(listenTo, handler, { once });\r\n    } else {\r\n      document.addEventListener(listenTo, handler, { once });\r\n    }\r\n    return () => {\r\n      document.removeEventListener(listenTo, handler, { once });\r\n      window.removeEventListener(listenTo, handler, { once });\r\n    };\r\n  }, [ref, condition]);\r\n}\r\n\r\nexport default useAddLisener;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Filters.js",["793"],"import React, { useContext, useState } from \"react\";\r\nimport styles from \"../../stylesheets/filters.module.css\";\r\nimport DialogToggler from \"./DialogToggler\";\r\nimport FilterDialog from \"../commons/dialogs/FilterDialog\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Filters = ({\r\n  filterTypes = {\r\n    query: true,\r\n    from: true,\r\n    to: true,\r\n    category: true,\r\n    regions: true,\r\n    organs: true,\r\n    roles: true,\r\n    statuses: true,\r\n  },\r\n  wrapperClassName = \"\",\r\n  toggleClassName = \"\",\r\n  open = false,\r\n  excel = false,\r\n}) => {\r\n  // store\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const [dialog, setDialog] = useState(open);\r\n\r\n  const openFilterDialog = (e) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n  };\r\n\r\n  const onFilter = (payload) => {\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    dispatch({ type: \"setFilters\", payload });\r\n  };\r\n  return (\r\n    <>\r\n      <div className={[styles.wrapper, wrapperClassName].join(\" \")}>\r\n        <div className={[\"\", toggleClassName].join(\" \")}>\r\n          <div className={styles.filterToggle} onClick={openFilterDialog}>\r\n            <span className={styles.filterToggleTitle}>فیلتر</span>\r\n            <span key={\"filter-icon\"} className={styles.filterToggleIcon}>\r\n              <i className=\"fas fa-filter\"></i>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <DialogToggler\r\n        condition={dialog}\r\n        setCondition={setDialog}\r\n        width={600}\r\n        isUnique={false}\r\n        outSideClick={true}\r\n        id=\"filters\"\r\n      >\r\n        <FilterDialog\r\n          filterTypes={filterTypes}\r\n          onFilter={onFilter}\r\n          dialog={dialog}\r\n          excel={excel}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\MultiSelectBox.js",["794","795"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport inputStyles from \"../../stylesheets/input.module.css\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport useMakeRequest from \"../hooks/useMakeRequest\";\r\nimport { fixDigit, overrideStrings } from \"../../helperFuncs\";\r\n\r\nconst defaultWrapperClassName = \"px1 py1 w90 fcs relative\";\r\nconst defaultInputClassName =\r\n  \"flex-4 f12 no-outline border-light w100 br2 text-center\";\r\nconst defaultLabelClassName = \"text-primary f15 ml1 flex-1 w100 text-right\";\r\n\r\nconst MultiSelectBox = ({\r\n  label = \"\",\r\n  caller = (f) => f,\r\n  className = \"input\",\r\n  selecteds = [],\r\n  setSelected,\r\n  isStatic = false,\r\n  data = [],\r\n  handle = \"name\",\r\n  selectStyle = {},\r\n  wrapperStyle = {},\r\n  labelStyle = {},\r\n  wrapperClassName = \"\",\r\n  inputClassName = \"\",\r\n  labelClassName = \"\",\r\n}) => {\r\n  const [options, setOptions] = useState(data);\r\n\r\n  useEffect(() => {\r\n    if (data.length > 0) {\r\n      setOptions(data);\r\n    }\r\n  }, [data]);\r\n\r\n  const [, loading] = useMakeRequest(caller, 200, !isStatic, null, (res) => {\r\n    if (res.status === 200) {\r\n      let options;\r\n      if (typeof res.data[0] === \"object\" && res.data[0] !== null) {\r\n        options = res.data.map((d, i) => {\r\n          return { label: fixDigit(d[handle]), value: d.id };\r\n        });\r\n      } else {\r\n        options = res.data.map((option, i) => {\r\n          return { label: option, value: option };\r\n        });\r\n      }\r\n      setOptions(options);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div\r\n      className={[defaultWrapperClassName, wrapperClassName].join(\" \")}\r\n      style={wrapperStyle}\r\n    >\r\n      <label\r\n        className={[defaultLabelClassName, labelClassName].join(\" \")}\r\n        style={labelStyle}\r\n      >\r\n        {label}\r\n      </label>\r\n      <MultiSelect\r\n        options={options}\r\n        value={selecteds}\r\n        onChange={setSelected}\r\n        isLoading={loading}\r\n        overrideStrings={overrideStrings}\r\n        className={[\r\n          defaultInputClassName,\r\n          inputClassName,\r\n          \"customMultiSelect\",\r\n        ].join(\" \")}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nMultiSelectBox.propTypes = {};\r\n\r\nexport default MultiSelectBox;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Tab.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\LazyLoadWrapper.jsx",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ConfirmReportDialog.js",["796","797","798","799"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  findRegionId,\r\n  getRegions,\r\n  serverError,\r\n  unKnownError,\r\n} from \"../../../helperFuncs\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport SelectOnMapDialog from \"../dialogs/SelectOnMapDialog\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport { CommonAPI, ReportsAPI } from \"../../../apiCalls\";\r\nimport { toast } from \"react-toastify\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\nimport ShowAttachments from \"./ShowAttachments\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport DialogToggler from \"../../helpers/DialogToggler\";\r\nimport TreeSystem from \"../dialogs/TreeSystem\";\r\nimport Button from \"../../helpers/Button\";\r\nimport Radio from \"../../helpers/Radio/Radio\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\n\r\nconst ConfirmReportDialog = ({\r\n  report,\r\n  setDialog = (f) => f,\r\n  verifiedCallBack = (f) => f,\r\n}) => {\r\n  // store\r\n  const [store] = useContext(AppStore);\r\n  const regions = store.initials.regions;\r\n\r\n  // states\r\n  const [comments, setComments] = useState(\"\");\r\n  const [categoryTitle, setCategoryTitle] = useState(\"\");\r\n  const [categoryId, setCategoryId] = useState(null);\r\n  const [addressDetail, setAddressDetail] = useState(\"\");\r\n  const [regionId, setRegionId] = useState(\"\");\r\n  const [medias, setMedias] = useState([]);\r\n  const [tempMedias, setTempMedias] = useState([]);\r\n  const [isPublic, setIsPublic] = useState(0);\r\n  const [coordinates, setCoordinates] = useState({\r\n    latitude: null,\r\n    longitude: null,\r\n  });\r\n  const [payload, setPayload] = useState(null);\r\n  const [verifyRequset, setVerifyRequest] = useState(false);\r\n  const [mapDialog, setMapDialog] = useState(false);\r\n  const [mapLoading, setMapLoading] = useState(false);\r\n  const [categoryDialog, setCategoryDialog] = useState(false);\r\n\r\n  const onTextChange = (name) => (e) => {\r\n    let value = e.target ? e.target.value : e;\r\n    if (name === \"comments\") {\r\n      setComments(value);\r\n    } else if (name === \"addressDetail\") {\r\n      setAddressDetail(value);\r\n    } else if (name === \"regionId\") {\r\n      setRegionId(value);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (report) {\r\n      setComments(report.comments);\r\n      setCategoryTitle(report.category && report.category.title);\r\n      setCategoryId(report.category && report.category.id);\r\n      setAddressDetail(report.address && report.address.detail);\r\n      setCoordinates({\r\n        latitude: report.address && report.address.latitude,\r\n        longitude: report.address && report.address.longitude,\r\n      });\r\n      setMedias(report.medias);\r\n      setRegionId(report.address?.regionId || \"\");\r\n      setTempMedias(\r\n        report?.medias\r\n          ? report.medias.map((media) => {\r\n              return { ...media, isDeleted: false };\r\n            })\r\n          : []\r\n      );\r\n    }\r\n  }, []);\r\n\r\n  const saveLocation = (address, coordinates, geofences) => {\r\n    console.log(geofences);\r\n    const regionId = findRegionId(regions, geofences);\r\n    setAddressDetail(address);\r\n    setCoordinates(coordinates);\r\n    setRegionId(regionId);\r\n  };\r\n\r\n  const deleteHandler = (mediaToDelete) => {\r\n    const newTempMedias = tempMedias.map((media) => {\r\n      if (media.url !== mediaToDelete.url) return media;\r\n      else {\r\n        media.isDeleted = !media.isDeleted;\r\n        return media;\r\n      }\r\n    });\r\n    setTempMedias(newTempMedias);\r\n  };\r\n\r\n  const showComments = (comments) => {\r\n    const isJSON = /JSON/.test(comments);\r\n    if (isJSON) {\r\n      const array = JSON.parse(String(comments).replace(/\\[JSON\\]/, \"\"));\r\n\r\n      return array.map((a) => `${a.title}: ${a.value}`).join(\" \\n\");\r\n    } else return comments ? comments : \"\";\r\n  };\r\n\r\n  const verifyReport = () => {\r\n    if (!regionId) {\r\n      toast(\"منطقه درخواست را انتخاب نمایید\", { type: \"error\" });\r\n      return;\r\n    }\r\n    const payload = new FormData();\r\n    payload.append(\"address.detail\", addressDetail);\r\n    payload.append(\"address.latitude\", coordinates.latitude);\r\n    payload.append(\"address.longitude\", coordinates.longitude);\r\n    payload.append(\"address.regionId\", regionId);\r\n    payload.append(\"categoryId\", categoryId);\r\n    payload.append(\"visibility\", isPublic);\r\n    payload.append(\"id\", report.id);\r\n    tempMedias\r\n      .filter((media) => !media.isDeleted)\r\n      .forEach((media, i) => {\r\n        payload.append(`medias[${i}].id`, media.id);\r\n      });\r\n\r\n    setPayload(payload);\r\n    setVerifyRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    ReportsAPI.registerByOperator,\r\n    200,\r\n    verifyRequset,\r\n    payload,\r\n    (res) => {\r\n      setVerifyRequest(false);\r\n      if (res && res.status === 200) {\r\n        setDialog(false);\r\n        // modalRoot.classList.remove(\"active\");\r\n        verifiedCallBack(report);\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    }\r\n  );\r\n\r\n  const onCategoriesSelected = (selecteds) => {\r\n    const selected = selecteds[0];\r\n    setCategoryTitle(selected.title);\r\n    setCategoryId(selected.id);\r\n  };\r\n\r\n  const onVisibilityChange = (name) => (e) =>\r\n    setIsPublic(name === \"public\" ? 0 : 1);\r\n\r\n  const visibilityOptions = [\r\n    {\r\n      id: \"vs-1\",\r\n      checked: isPublic === 0,\r\n      name: \"public\",\r\n      title: \"عمومی\",\r\n    },\r\n    {\r\n      id: \"vs-2\",\r\n      checked: isPublic !== 0,\r\n      name: \"private\",\r\n      title: \"خصوصی\",\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <div className={\"w90 mxa frc row\"}>\r\n        <div className=\"w100 mxa row frc\">\r\n          <TextInput\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            value={addressDetail}\r\n            onChange={onTextChange}\r\n            name={\"addressDetail\"}\r\n            title=\"آدرس\"\r\n            required={false}\r\n            icon=\"fas fa-map-marker-alt\"\r\n            iconClassName=\"f15 text-color\"\r\n            inputClassName=\"px2 pointer\"\r\n            onClick={() => setMapDialog(true)}\r\n          >\r\n            <DialogToggler\r\n              condition={mapDialog}\r\n              setCondition={setMapDialog}\r\n              loading={mapLoading}\r\n              width={600}\r\n              height={600}\r\n              isUnique={false}\r\n              outSideClick={false}\r\n              fixedDimension={true}\r\n              id=\"select-on-map-confirm\"\r\n            >\r\n              <SelectOnMapDialog\r\n                condition={mapDialog}\r\n                setCondition={setMapDialog}\r\n                setLoading={setMapLoading}\r\n                defaultCoordinates={coordinates}\r\n                saveChanges={saveLocation}\r\n                defaultAddress={addressDetail}\r\n                height={500 - 40}\r\n              />\r\n            </DialogToggler>\r\n          </TextInput>\r\n\r\n          <TreeSystem\r\n            isStatic\r\n            staticData={store.initials.categories}\r\n            condition={categoryDialog}\r\n            setCondition={setCategoryDialog}\r\n            onChange={onCategoriesSelected}\r\n            defaultSelected={[{ id: categoryId }]}\r\n            singleSelect={true}\r\n            onClose={() => setCategoryDialog(false)}\r\n            renderToggler={(selected) => (\r\n              <TextInput\r\n                placeholder=\"انتخاب کنید.\"\r\n                title=\"گروه موضوعی\"\r\n                readOnly={true}\r\n                onClick={() => setCategoryDialog(true)}\r\n                wrapperClassName=\"col-md-6 col-sm-12 col-12\"\r\n                inputClassName=\"pointer\"\r\n                required={false}\r\n                value={\r\n                  selected.length > 0\r\n                    ? selected[0].title\r\n                    : categoryTitle\r\n                    ? categoryTitle\r\n                    : \"\"\r\n                }\r\n              />\r\n            )}\r\n          ></TreeSystem>\r\n        </div>\r\n\r\n        <div className={\"w100 mxa frc row\"}>\r\n          <SelectBox\r\n            staticData\r\n            options={store.initials.regions}\r\n            name=\"regionId\"\r\n            value={regionId}\r\n            handleChange={onTextChange}\r\n            handle={[\"name\"]}\r\n            label=\"منطقه\"\r\n            wrapperClassName=\"col-md-6 col-sm-12 col-12\"\r\n          />\r\n          <Radio\r\n            name=\"visibility\"\r\n            id=\"visibility\"\r\n            title={\"نوع انتشار\"}\r\n            options={visibilityOptions}\r\n            defaultStyles={true}\r\n            onChange={onVisibilityChange}\r\n            wrapperClassName=\"col-md-6 col-sm-12 col-12\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa\">\r\n          <Textarea\r\n            wrapperClassName=\"col-md-12\"\r\n            inputClassName=\"flex-auto mh150\"\r\n            value={showComments(comments)}\r\n            handleChange={onTextChange}\r\n            name=\"comments\"\r\n            title=\"توضیحات\"\r\n          />\r\n        </div>\r\n        <div className={\"w90 mxa px1\"}>\r\n          <label className={styles.infoLabel}>پیوست ها</label>\r\n          <ShowAttachments\r\n            medias={tempMedias}\r\n            isDeletable={true}\r\n            deleteHandler={deleteHandler}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title=\"تایید\"\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={verifyReport}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmReportDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useSignalR.js",["800","801"],"import React, { useEffect } from \"react\";\r\nimport {\r\n  HubConnectionBuilder,\r\n  HubConnectionState,\r\n  JsonHubProtocol,\r\n  LogLevel,\r\n} from \"@microsoft/signalr\";\r\n\r\nconst useSignalR = (callBack = (f) => f) => {\r\n  useEffect(() => {\r\n    let connection;\r\n\r\n    connection = new HubConnectionBuilder()\r\n      .withUrl(\r\n        `${\r\n          process.env.NODE_ENV === \"development\"\r\n            ? \"https://shahrbin.yazd.ir:6790\"\r\n            : process.env.REACT_APP_API_URL\r\n        }/eventhub`\r\n      )\r\n      .withAutomaticReconnect()\r\n      .withHubProtocol(new JsonHubProtocol())\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    connection\r\n      .start()\r\n      .then(() => {\r\n        console.log(\"connection started\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"connection failed \" + err);\r\n      });\r\n\r\n    connection.onclose((error) => {\r\n      console.assert(connection.state === HubConnectionState.Disconnected);\r\n      console.log(\r\n        \"Connection closed due to error. Try refreshing this page to restart the connection\",\r\n        error\r\n      );\r\n    });\r\n\r\n    connection.onreconnecting((error) => {\r\n      console.assert(connection.state === HubConnectionState.Reconnecting);\r\n      console.log(\"Connection lost due to error. Reconnecting.\", error);\r\n    });\r\n\r\n    connection.onreconnected((connectionId) => {\r\n      console.assert(connection.state === HubConnectionState.Connected);\r\n      console.log(\r\n        \"Connection reestablished. Connected with connectionId\",\r\n        connectionId\r\n      );\r\n    });\r\n\r\n    connection.serverTimeoutInMilliseconds = 60000;\r\n\r\n    connection.on(\"Update\", (data) => {\r\n      callBack(data);\r\n    });\r\n\r\n    return () => {\r\n      if (connection) {\r\n        connection.stop().then(() => console.log(\"connection stopped\"));\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return null;\r\n};\r\n\r\nexport default useSignalR;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ShowAttachments.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\TransitionForm.js",["802","803","804","805"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  callAPI,\r\n  clearNull,\r\n  constants,\r\n  getFromLocalStorage,\r\n  mapObjectToFormData,\r\n} from \"../../../helperFuncs\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\nimport Button from \"../../helpers/Button\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ReportsAPI } from \"../../../apiCalls\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport AttachmentToggle from \"../dataDisplay/Attachment/AttachmentToggle\";\r\n\r\n// get logged in user roles\r\nconst roles = getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_USER_ROLES);\r\n\r\nconst TransitionForm = ({\r\n  data,\r\n  transition,\r\n  createTransition,\r\n  createLoading = false,\r\n}) => {\r\n  const [store] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [referralData, setRefrerralData] = useState({\r\n    // isPublic: 0,\r\n    comment: \"\",\r\n    reasonId: transition.reasonList[0].id,\r\n    messageToCitizen: \"\",\r\n  }); // data needed for submit\r\n  const [attachments, setAttachments] = useState([]); // user attachments to be send to selected destination\r\n  const [selectedActors, setSelectedActors] = useState([]); // list of users or roles that current user can send this request to.\r\n  const [allActors, setAllActors] = useState([]); // list of users or roles that current user can send this request to.\r\n\r\n  // other states\r\n  const [defaultActors, setDefaultActors] = useState([]); // list of users that should be preselected.\r\n\r\n  // flags\r\n  const [loading, setLoading] = useState(false); // flag used to indicate loader status\r\n\r\n  const { comment, reasonId, messageToCitizen } = referralData;\r\n\r\n  useEffect(() => {\r\n    // show preselected actors\r\n    handleSelectedActors();\r\n    showActors();\r\n  }, []);\r\n\r\n  const handleSelectedActors = () => {\r\n    setSelectedActors(\r\n      transition.actors.filter((a) => a.type !== 2).map((a, i) => setActors(a))\r\n    );\r\n    const actors = transition.actors\r\n      .filter((a) => a.type !== 2)\r\n      .map((a, i) => setActors(a));\r\n    if (actors.length === 1) setDefaultActors(actors);\r\n  };\r\n\r\n  const handleChange = (name) => (e) =>\r\n    setRefrerralData({ ...referralData, [name]: e.target.value }); // func that keep track of changes in form\r\n\r\n  const validations = () => {\r\n    // should not send request if no actor has been selected\r\n    if (selectedActors.length === 0) {\r\n      toast(\"لطفا مقصد ارجاعی را انتخاب نمایید\", { type: \"error\" });\r\n      return false;\r\n    }\r\n    // should not send request if no reason has been selected\r\n    if (!reasonId) {\r\n      toast(\"لطفا دلیل ارجاع را انتخاب نمایید\", { type: \"error\" });\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const getReportPayload = () => {\r\n    // get actor ids\r\n    const actors = selectedActors.map((a, i) => {\r\n      return { id: a.value };\r\n    });\r\n    let payload = new FormData();\r\n    payload = mapObjectToFormData(\r\n      // add form data to payload\r\n      {\r\n        comment,\r\n        reasonId,\r\n        transitionId: transition.transitionId,\r\n        messageToCitizen,\r\n      },\r\n      payload\r\n    );\r\n    // add attachments to payload\r\n    attachments.forEach((attachment) => {\r\n      payload.append(\"attachments\", attachment.file);\r\n    });\r\n    // add visibility to payload\r\n    // payload.append(\"visibility\", isPublic);\r\n    // add actorIds to payload\r\n    actors.forEach((actor, i) => {\r\n      payload.append(`actors[${i}].id`, actor.id);\r\n    });\r\n    return payload;\r\n  };\r\n\r\n  const setReportPayload = (e) => {\r\n    // check validations\r\n    const isValid = validations();\r\n    if (!isValid) return;\r\n\r\n    const payload = getReportPayload();\r\n    // send payload\r\n    createTransition(payload);\r\n  };\r\n\r\n  const selectActorLabel = (actor) => {\r\n    // create proper label based on actor type, type 0 => person, type 1 => role, type 2 => auto\r\n    if (actor.type === 0) {\r\n      return actor.title\r\n        ? actor.title\r\n        : actor.firstName || actor.lastName\r\n        ? clearNull(actor.firstName) + \" \" + clearNull(actor.lastName)\r\n        : actor.phoneNumber\r\n        ? actor.phoneNumber\r\n        : \"\";\r\n    }\r\n    if (actor.type === 1) {\r\n      return \"نقش \" + actor.firstName;\r\n    }\r\n  };\r\n\r\n  const setActors = (a) => {\r\n    return {\r\n      label: selectActorLabel(a),\r\n      value: a.id,\r\n    };\r\n  };\r\n\r\n  const sendMessageToCitizen = () => {\r\n    // function to handle message to citizen request\r\n    const payload = { message: messageToCitizen };\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ReportsAPI.sendMessageToCitizen,\r\n        successStatus: 200,\r\n        payload,\r\n        successCallback: (res) =>\r\n          toast(\"پیام شما با موفقیت به شهروند ارسال شد.\", { type: \"success\" }),\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      data?.report?.id\r\n    );\r\n  };\r\n\r\n  const showActors = () => {\r\n    // this function prepare and returns the avaiable actors\r\n    let actors = [];\r\n\r\n    transition.actors\r\n      .filter((a) => a.type !== 2)\r\n      .map((a, i) => {\r\n        if (a.type === 1 && a.actors) {\r\n          actors.push(setActors(a));\r\n          a.actors.map((b) => actors.push(setActors(b)));\r\n        } else actors.push(setActors(a));\r\n      });\r\n\r\n    setAllActors(actors);\r\n  };\r\n\r\n  const onAddAttachment = (attachs) => {\r\n    setAttachments(attachs);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={[styles.infoList, \"pb5 mb1\"].join(\" \")}>\r\n        {/* list of available actors */}\r\n        <div className={[`w90 mxa mt1 row`].join(\" \")}>\r\n          <MultiSelect\r\n            staticData={allActors}\r\n            defaultSelecteds={defaultActors}\r\n            onChange={setSelectedActors}\r\n            isStatic={true}\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            nameKey=\"label\"\r\n            valueKey=\"value\"\r\n            strings={{ label: \"ارجاع به\" }}\r\n            maxHeight={300}\r\n            id=\"actors-list\"\r\n          />\r\n          {/* list of reasons */}\r\n          <SelectBox\r\n            label=\"دلیل\"\r\n            staticData={true}\r\n            name=\"reasonId\"\r\n            handleChange={handleChange}\r\n            options={transition.reasonList}\r\n            handle={[\"title\"]}\r\n            value={reasonId}\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n          />\r\n        </div>\r\n        {/* comment box */}\r\n        <div className={[\"w90 mxa mt1\"].join(\" \")}>\r\n          <Textarea\r\n            name=\"comment\"\r\n            title=\"توضیحات\"\r\n            value={comment}\r\n            handleChange={handleChange}\r\n            wrapperClassName=\"col-md-12\"\r\n            inputClassName=\"mh100\"\r\n          />\r\n        </div>\r\n        {/* a box used to send a message to citizen. visibility based on transition type */}\r\n        {transition?.canSendMessageToCitizen && (\r\n          <div className={[\"w90 mxa mt1\"].join(\" \")}>\r\n            <Textarea\r\n              name=\"messageToCitizen\"\r\n              title=\"پاسخ به شهروند:\"\r\n              value={messageToCitizen}\r\n              handleChange={handleChange}\r\n              wrapperClassName=\"col-md-12\"\r\n              inputClassName=\"mh100\"\r\n            />\r\n            <Button\r\n              title=\"ارسال پیام\"\r\n              outline={!store.darkMode}\r\n              onClick={sendMessageToCitizen}\r\n              loading={loading}\r\n            />\r\n          </div>\r\n        )}\r\n        {/* add and show attachments */}\r\n        <div className=\"w90 frc mxa mt1\">\r\n          <AttachmentToggle onAddAttachment={onAddAttachment} />\r\n        </div>\r\n        {/* submit button */}\r\n      </div>\r\n      <div className=\"w80 mxa fre py1 px2 border-t-light mt1 fixed b0 bg-white\">\r\n        <Button\r\n          title=\"ارجاع درخواست\"\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={setReportPayload}\r\n          loading={createLoading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TransitionForm;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\FiltersAccordion.js",["806"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../stylesheets/filters.module.css\";\r\n\r\nconst FiltersAccordion = ({ condition, children, expandable = true }) => {\r\n  const [className, setClassName] = useState(\"\");\r\n  const toggleClassName = (e) => {\r\n    if (condition) {\r\n      setClassName(\"op1\");\r\n    } else {\r\n      setClassName(\"op0\");\r\n    }\r\n  };\r\n  return (\r\n    <div\r\n      className={[\r\n        styles.accordion,\r\n        className,\r\n        condition ? styles.accordionOpen : \"\",\r\n        expandable ? \"\" : styles.notExpandable\r\n      ].join(\" \")}\r\n      onTransitionEnd={toggleClassName}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nFiltersAccordion.propTypes = {};\r\n\r\nexport default FiltersAccordion;\r\n",["807","808"],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Date\\DatePicker.js",["809","810","811"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport DatePicker, {\r\n  Calendar,\r\n} from \"@hassanmojab/react-modern-calendar-datepicker\";\r\nimport \"@hassanmojab/react-modern-calendar-datepicker/lib/DatePicker.css\";\r\nimport useClick from \"../../hooks/useClick\";\r\nimport TextInput from \"../TextInput\";\r\nimport { fixDigit } from \"../../../helperFuncs\";\r\nimport useResize from \"../../hooks/useResize\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\n\r\nconst modalSelectListWrapper =\r\n  document && document.getElementById(\"modal-selectlist\");\r\n\r\nconst DatePickerConatiner = ({\r\n  date,\r\n  onSelect,\r\n  name,\r\n  title,\r\n  containerClassName = \"\",\r\n  wrapperClassName = \"\",\r\n  inputClassName = \"\",\r\n  labelClassName = \"\",\r\n  isInDialog,\r\n  id,\r\n}) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const calenderRef = useRef(null);\r\n  const datePickerRef = useRef(null);\r\n  const inputRef = useRef(null);\r\n\r\n  const [calender, showCalender] = useClick(calenderRef, \"click\", [\r\n    datePickerRef,\r\n  ]);\r\n  const [selectedDay, setSelectedDay] = useState(date ? date : null);\r\n  const [style, setStyle] = useState({});\r\n\r\n  // window resize hook\r\n  const { windowWidth, windowHeight } = useResize();\r\n\r\n  useEffect(() => {\r\n    if (!!onSelect) {\r\n      onSelect(selectedDay, name);\r\n      showCalender(false);\r\n    }\r\n  }, [selectedDay]);\r\n\r\n  const clearSelected = () => {\r\n    setSelectedDay(null);\r\n  };\r\n\r\n  // functions\r\n  const handleRegular = () => {\r\n    const style = {\r\n      display: \"inline-flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      background: \"#000\",\r\n      borderRadius: \"1em\",\r\n      boxShadow: \"0 3px 12px rgba(0, 0, 0, 0.2)\",\r\n      position: \"absolute\",\r\n    };\r\n    setStyle(style);\r\n  };\r\n\r\n  const handleInDialog = () => {\r\n    const style = {\r\n      position: \"fixed\",\r\n      zIndex: 10000000,\r\n      backgroundColor: \"var(--white)\",\r\n      opacity: calender ? 1 : 0,\r\n      // transform: calender ? `translateY(0)` : `translateY(-10px)`,\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      overflowY: \"auto\",\r\n      border: \"1px solid var(--light)\",\r\n      boxShahdow: \"0 0 10px rgba(0,0,0,0.1)\",\r\n      borderRadius: 10,\r\n      transition: \"opacity 0.3s, transform 0.3s\",\r\n    };\r\n    const boundings = inputRef.current.getBoundingClientRect();\r\n    style.top = boundings?.top + boundings?.height;\r\n    style.left = boundings?.left + (boundings?.width - 332) / 2;\r\n    setStyle(style);\r\n  };\r\n\r\n  // effects\r\n  useEffect(() => {\r\n    if (isInDialog) {\r\n      handleInDialog();\r\n    } else {\r\n      handleRegular();\r\n    }\r\n    if (calender) {\r\n      dispatch({\r\n        type: \"setModals\",\r\n        payload: [\r\n          ...store.modals,\r\n          {\r\n            id,\r\n            index: store.modals.length,\r\n          },\r\n        ],\r\n      });\r\n    } else {\r\n      const newModals = store.modals.filter((m) => m.id !== id);\r\n      dispatch({\r\n        type: \"setModals\",\r\n        payload: newModals,\r\n      });\r\n    }\r\n  }, [calenderRef.current, calender, windowWidth, windowHeight]);\r\n\r\n  // renders\r\n  const renderCalendar = () => {\r\n    return (\r\n      <div\r\n        className={`calender ${calender ? \"active\" : \"\"}`}\r\n        style={{ display: calender ? \"block\" : \"none\" }}\r\n      >\r\n        <div ref={datePickerRef} style={style}>\r\n          <Calendar\r\n            value={selectedDay}\r\n            onChange={setSelectedDay}\r\n            shouldHighlightWeekends\r\n            locale={\"fa\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <div ref={calenderRef} className={containerClassName}>\r\n        <TextInput\r\n          value={\r\n            selectedDay &&\r\n            fixDigit(\r\n              selectedDay?.year +\r\n                \"/\" +\r\n                selectedDay?.month +\r\n                \"/\" +\r\n                selectedDay?.day\r\n            )\r\n          }\r\n          wrapperClassName={wrapperClassName}\r\n          inputClassName={inputClassName}\r\n          labelClassName={labelClassName}\r\n          forwardInputRef={inputRef}\r\n          readOnly={true}\r\n          title={title}\r\n          required={false}\r\n          onClick={() => showCalender(!calender)}\r\n          icon=\"fas fa-times\"\r\n          iconClassName=\"text-color\"\r\n          onIconClick={clearSelected}\r\n        />\r\n\r\n        {isInDialog\r\n          ? ReactDOM.createPortal(renderCalendar(), modalSelectListWrapper)\r\n          : renderCalendar()}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DatePickerConatiner;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\AttachItem.js",["812"],"import React, { useEffect, useState } from \"react\";\r\nimport { downloadImage, getExtension } from \"../../../helperFuncs\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport placeholder from \"../../../assets/Images/articlePlaceholder.png\";\r\nimport word from \"../../../assets/Images/word.png\";\r\nimport excel from \"../../../assets/Images/excel.png\";\r\nimport pdf from \"../../../assets/Images/pdf.png\";\r\nimport powerpoint from \"../../../assets/Images/powerpoint.png\";\r\n\r\nconst AttachItem = ({\r\n  type = 0,\r\n  media,\r\n  isDeletable = false,\r\n  deleteHandler = (f) => f,\r\n  preview = true,\r\n}) => {\r\n  const [source, setSource] = useState(\"\");\r\n\r\n  const getUrl = (slag) =>\r\n    (process.env.NODE_ENV === \"development\"\r\n      ? process.env.REACT_APP_API_URL\r\n      : process.env.REACT_APP_API_URL) + `/${slag}`;\r\n\r\n  const getSource = (media) => {\r\n    const file = media.file;\r\n    const fileReader = new FileReader();\r\n\r\n    fileReader.onload = () => {\r\n      setSource(fileReader.result);\r\n    };\r\n\r\n    fileReader.readAsDataURL(file);\r\n  };\r\n\r\n  const getPlaceHolder = () => {\r\n    const ext = getExtension(media?.file?.name);\r\n    switch (ext) {\r\n      case \"doc\":\r\n        return word;\r\n      case \"docx\":\r\n        return word;\r\n      case \"xls\":\r\n        return excel;\r\n      case \"xlsx\":\r\n        return excel;\r\n      case \"xlsm\":\r\n        return excel;\r\n      case \"ppt\":\r\n        return powerpoint;\r\n      case \"pptx\":\r\n        return powerpoint;\r\n      case \"pdf\":\r\n        return pdf;\r\n      default:\r\n        return placeholder;\r\n    }\r\n  };\r\n\r\n  const getImageSource = (media) => {\r\n    if (type === 0) return getUrl(media.url3);\r\n    if (type === 1) return getPlaceHolder();\r\n    if (type === 2) return source;\r\n  };\r\n\r\n  const onDelete = (e) => {\r\n    e.stopPropagation();\r\n    deleteHandler(media);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (type === 2) {\r\n      getSource(media);\r\n    }\r\n  }, []);\r\n\r\n  const onDisplayImage = (e) => {\r\n    e.stopPropagation();\r\n    downloadImage(media.url);\r\n  };\r\n  return (\r\n    <>\r\n      <div className={styles.media}>\r\n        <div\r\n          className={[\r\n            styles.mediaOverlay,\r\n            isDeletable ? styles.before : \"\",\r\n            preview ? styles.after : \"\",\r\n          ].join(\" \")}\r\n        >\r\n          {isDeletable ? (\r\n            <div\r\n              className={[styles.overlayPart, styles.overlayPart1].join(\" \")}\r\n            >\r\n              {media.isDeleted ? (\r\n                <span\r\n                  key=\"recycle-icon\"\r\n                  className=\"text-white f3 mx1\"\r\n                  onClick={onDelete}\r\n                >\r\n                  <i className=\"fas fa-recycle\"></i>\r\n                </span>\r\n              ) : (\r\n                <span\r\n                  key=\"times-icon\"\r\n                  className=\"text-white f3 mx1\"\r\n                  onClick={onDelete}\r\n                >\r\n                  <i className=\"fas fa-trash-alt\"></i>\r\n                </span>\r\n              )}\r\n            </div>\r\n          ) : null}\r\n          {preview && (\r\n            <div\r\n              className={[styles.overlayPart, styles.overlayPart2].join(\" \")}\r\n            >\r\n              <span className=\"text-white f3\" onClick={onDisplayImage}>\r\n                <i className=\"fas fa-eye\"></i>\r\n              </span>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <img src={getImageSource(media)} alt={media.alternateText} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AttachItem;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DateInput.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\AddCategory.js",["813","814","815","816","817","818","819"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ConfigurationsAPI } from \"../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  defaultFilters,\r\n  fixDigit,\r\n  tableLightTheme,\r\n} from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport AddCategoryDialog from \"../commons/dialogs/AddCategoryDialog\";\r\nimport Button from \"../helpers/Button\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport DropdownWrapper from \"../helpers/DropdownWrapper\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport Loader from \"../helpers/Loader\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst AddCategory = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n  const [currentCategory, setCurrentCategory] = useState(null);\r\n\r\n  // other states\r\n  const [dialogData, setDialogData] = useState(null);\r\n\r\n  //   flags\r\n  const [dialog, setDialog] = useState(false);\r\n  const [addCategoryDialog, setAddCategoryDialog] = useState(false);\r\n  const [createLoading, setCreateLoading] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [deleteLoading, setDeleteLoading] = useState(false);\r\n\r\n  const queries = {\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getCategories();\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getCategories();\r\n  }, [store.filters]);\r\n\r\n  const getCategories = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ConfigurationsAPI.getAllCategories,\r\n        successCallback: (res) => setData(res.data),\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  //   open category details dialog\r\n  const openDialog = (category) => {\r\n    setCurrentCategory(category.category);\r\n    setDialogData(category);\r\n    setDialog(true);\r\n  };\r\n\r\n  const onCategoryCreated = () => {\r\n    toast(\"دسته‌بندی جدید با موفقیت اضافه شد.\", { type: \"success\" });\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getCategories();\r\n  };\r\n\r\n  const onCategoryEdited = () => {\r\n    toast(\"دسته‌بندی با موفقیت به‌روز شد.\", { type: \"success\" });\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getCategories();\r\n  };\r\n\r\n  const deleteCategory = (id) => {\r\n    setDeleteLoading(true);\r\n    callAPI({\r\n      caller: ConfigurationsAPI.deleteCategory,\r\n      successCallback: () => {\r\n        toast(\"دسته‌بندی با موفقیت حذف شد.\", { type: \"success\" });\r\n        getCategories();\r\n      },\r\n      payload: id,\r\n      successStatus: 204,\r\n      requestEnded: () => setDeleteLoading(false),\r\n    });\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف دسته‌بندی\"\r\n          icon=\"fas fa-stream\"\r\n          onClick={() => setAddCategoryDialog(true)}\r\n        />\r\n        <Filters filterTypes={{ query: true }} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `category-${1}`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n    {\r\n      id: `category-${2}`,\r\n      title: (row) => (row?.category.isDeleted ? \"فعال کردن\" : \"غیر‌فعال کردن\"),\r\n      icon: (row) =>\r\n        row?.category.isDeleted ? \"fas fa-recycle\" : \"fas fa-times\",\r\n      onClick: (row) => deleteCategory(row.id),\r\n    },\r\n  ];\r\n\r\n  //   table columns\r\n  const columns = [\r\n    {\r\n      name: \"دسته بندی\",\r\n      cell: (row) => <span className=\"text-right\">{fixDigit(row.title)}</span>,\r\n    },\r\n    {\r\n      name: \"عملیات\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            total={data.length}\r\n            perPage={data.length}\r\n            rowData={row}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const condStyle = [\r\n    {\r\n      when: (row) => row?.category.isDeleted,\r\n      style: {\r\n        backgroundColor: \"#ddd\",\r\n        color: \"#333\",\r\n      },\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      {deleteLoading && <Loader />}\r\n\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={columns}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          pagination={false}\r\n          conditionalRowStyles={condStyle}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      <DialogToggler\r\n        condition={addCategoryDialog}\r\n        setCondition={setAddCategoryDialog}\r\n        width={700}\r\n        isUnique={false}\r\n        id=\"add-category-dialog\"\r\n      >\r\n        <AddCategoryDialog\r\n          onSuccess={onCategoryCreated}\r\n          mode={\"create\"}\r\n        />\r\n      </DialogToggler>\r\n\r\n      <DialogToggler\r\n        condition={dialog}\r\n        setCondition={setDialog}\r\n        width={700}\r\n        isUnique={false}\r\n        id=\"edit-category-dialog\"\r\n      >\r\n        <AddCategoryDialog\r\n          onSuccess={onCategoryCreated}\r\n          mode={\"edit\"}\r\n          defaltValues={currentCategory}\r\n          categoryId={dialogData?.id}\r\n          category={currentCategory}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCategory;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\map\\ScatterMap.js",["820","821","822","823","824"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport Map from \"ol/Map\";\r\nimport View from \"ol/View\";\r\nimport TileLayer from \"ol/layer/Tile\";\r\nimport VectorLayer from \"ol/layer/Vector\";\r\nimport VectorSource from \"ol/source/Vector\";\r\nimport TileWMS from \"ol/source/TileWMS\";\r\nimport { fromLonLat } from \"ol/proj\";\r\nimport Feature from \"ol/Feature\";\r\nimport Point from \"ol/geom/Point\";\r\nimport { Icon, Style } from \"ol/style\";\r\nimport scatter from \"../../../assets/Images/scatter.png\";\r\n\r\nfunction ScatterMap({\r\n  width = 400,\r\n  height = 400,\r\n  center = [54.3569, 31.8974],\r\n  zoom = 9,\r\n  locations = [],\r\n  className=\"\"\r\n}) {\r\n  const [map, setMap] = useState();\r\n  const [layer, setLayer] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  const mapElement = useRef();\r\n  const locationsRef = useRef();\r\n  mapElement.current = map;\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      addMarkerLayer();\r\n    }\r\n  }, [locations]);\r\n\r\n  const addMarkerLayer = () => {\r\n    if (layer) map.removeLayer(layer);\r\n    const iconFeatures = createMarkers(locations);\r\n    let vectorSource = new VectorSource({\r\n      features: iconFeatures,\r\n    });\r\n\r\n    vectorLayer = new VectorLayer({\r\n      source: vectorSource,\r\n    });\r\n    map.addLayer(vectorLayer);\r\n    setLayer(vectorLayer);\r\n  };\r\n\r\n  let vectorLayer;\r\n\r\n  const createMarkers = (locations) => {\r\n    const pointMarkers = locations.map(\r\n      (l) => new Point(fromLonLat([l.longitude, l.latitude]))\r\n    );\r\n    let iconFeatures = pointMarkers.map(\r\n      (p) =>\r\n        new Feature({\r\n          geometry: p,\r\n          name: \"Null Island\",\r\n          population: 4000,\r\n          rainfall: 500,\r\n        })\r\n    );\r\n\r\n    let iconStyle = new Style({\r\n      image: new Icon({\r\n        src: scatter,\r\n        // scale,\r\n      }),\r\n    });\r\n\r\n    iconFeatures.forEach((i) => i.setStyle(iconStyle));\r\n    setMarkers(iconFeatures);\r\n    return iconFeatures;\r\n  };\r\n\r\n  const onZoom = () => {\r\n    if (mapElement?.current) {\r\n      const radius = mapElement?.current.getView().getZoom();\r\n      const scale = (19 - radius) / 9;\r\n\r\n      addMarkerLayer(mapElement?.current, scale);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // create and add vector source layer\r\n    const initalFeaturesLayer = new TileLayer({\r\n      extent: [\r\n        -20037508.342789244, -20037508.342789244, 20037508.342789244,\r\n        20037508.342789244,\r\n      ],\r\n      source: new TileWMS({\r\n        url: process.env.REACT_APP_MAP_PROXY_URL,\r\n        params: {\r\n          layers: \"osm\",\r\n          // format: \"image/png\",\r\n          srs: \"EPSG:3857\",\r\n          exceptions: \"application/vnd.ogc.se_inimage\",\r\n          transparent: true,\r\n        },\r\n      }),\r\n    });\r\n\r\n    // create map\r\n    const initialMap = new Map({\r\n      target: mapElement.current,\r\n      layers: [\r\n        // USGS Topo\r\n        // new TileLayer({\r\n        //   source: new OSM(),\r\n        // }),\r\n\r\n        initalFeaturesLayer,\r\n        // vectorLayer,\r\n      ],\r\n      view: new View({\r\n        projection: \"EPSG:3857\",\r\n        center: fromLonLat(center),\r\n        zoom,\r\n      }),\r\n      controls: [],\r\n    });\r\n\r\n    // save map and vector layer references to state\r\n    // initialMap.addEventListener(\"moveend\", onZoom);\r\n    setMap(initialMap);\r\n    mapElement.current = initialMap;\r\n    // setFeaturesLayer(initalFeaturesLayer);\r\n    return () => {};\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      ref={mapElement}\r\n      id=\"map\"\r\n      className={className}\r\n      style={{ width, height, cursor: \"pointer\" }}\r\n    ></div>\r\n  );\r\n}\r\n\r\nexport default ScatterMap;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddCategoryDialog.js",["825","826","827","828","829"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport { ConfigurationsAPI, ProcessesAPI } from \"../../../apiCalls\";\r\nimport Button from \"../../helpers/Button\";\r\nimport {\r\n  constants,\r\n  getFromLocalStorage,\r\n  serverError,\r\n  unKnownError,\r\n} from \"../../../helperFuncs\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\n\r\nconst objectionValues = [\r\n  {\r\n    value: 1,\r\n    title: \"بله\",\r\n  },\r\n  {\r\n    value: 0,\r\n    title: \"خیر\",\r\n  },\r\n];\r\n\r\nconst AddCategoryDialog = ({\r\n  onSuccess = (f) => f,\r\n  mode = \"create\",\r\n  defaltValues,\r\n  categoryId,\r\n  category,\r\n}) => {\r\n  const isEditMode = mode === \"edit\";\r\n\r\n  // data states\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    processId: \"\",\r\n    order: \"\",\r\n    code: \"\",\r\n    responseDuration: \"\",\r\n    duration: \"\",\r\n    description: \"\",\r\n    objectionAllowed: \"\",\r\n  });\r\n  const [processes, setProcesses] = useState([]);\r\n  const [parents, setParents] = useState([]);\r\n  const parentId = useRef(null);\r\n\r\n  // main states\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  // flags\r\n  const [createRequest, setCreateRequest] = useState(false);\r\n\r\n  const getData = () => {\r\n    const token = getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n\r\n    const processes = new Promise((resolve, reject) => {\r\n      ConfigurationsAPI.getProcesses(token).then((res) => {\r\n        if (res && res.status === 200) resolve(res);\r\n        else reject(res);\r\n      });\r\n    });\r\n    const parents = new Promise((resolve, reject) => {\r\n      ConfigurationsAPI.getCategories(token).then((res) => {\r\n        if (res && res.status === 200) resolve(res);\r\n        else reject(res);\r\n      });\r\n    });\r\n    return Promise.all([processes, parents]);\r\n  };\r\n\r\n  const fillInputs = () => {\r\n    parentId.current = defaltValues.parentId;\r\n    setValues({\r\n      title: defaltValues.title,\r\n      processId: defaltValues.processId,\r\n      order: defaltValues.order,\r\n      code: defaltValues.code,\r\n      responseDuration: defaltValues.responseDuration / 24,\r\n      duration: defaltValues.duration / 24,\r\n      description: defaltValues.description,\r\n      objectionAllowed: defaltValues.objectionAllowed ? 1 : 0,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      fillInputs();\r\n    }\r\n\r\n    getData().then((res) => {\r\n      setProcesses(res[0]?.data);\r\n      setParents(res[1]?.data);\r\n    });\r\n  }, []);\r\n\r\n  const onParentChange = (value) => {\r\n    parentId.current = value && value[0]?.id;\r\n  };\r\n\r\n  const handleChange =\r\n    (name, options = {}) =>\r\n    (e) => {\r\n      let value = e?.target ? e.target.value : e;\r\n      if (options?.onlyDigits) {\r\n        value = String(value).replace(/\\D/g, \"\");\r\n      }\r\n      setValues({ ...values, [name]: value });\r\n    };\r\n\r\n  const createCategory = () => {\r\n    const payload = {\r\n      ...values,\r\n      responseDuration: values.responseDuration * 24,\r\n      duration: values.duration * 24,\r\n      objectionAllowed: Number(values.objectionAllowed) === 1 ? true : false,\r\n      parentId: parentId.current,\r\n      processId: values.processId ? values.processId : null,\r\n    };\r\n    setPayload(payload);\r\n    setCreateRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    isEditMode\r\n      ? ConfigurationsAPI.updateCategory\r\n      : ConfigurationsAPI.createCategory,\r\n    isEditMode ? 204 : 201,\r\n    createRequest,\r\n    payload,\r\n    (res) => {\r\n      setCreateRequest(false);\r\n      const status = isEditMode ? 204 : 201;\r\n      if (res && res.status === status) {\r\n        onSuccess();\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    categoryId\r\n  );\r\n  return (\r\n    <>\r\n      <form className=\"w100 mx-a relative\">\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            value={values.title}\r\n            title=\"عنوان\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n          <MultiSelect\r\n            strings={{ label: \"پدر\" }}\r\n            caller={ConfigurationsAPI.getCategories}\r\n            isStatic={false}\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            nameKey=\"title\"\r\n            valueKey=\"id\"\r\n            maxHeight={300}\r\n            singleSelect={true}\r\n            onChange={onParentChange}\r\n            defaultSelecteds={category ? [{ id: category.parentId }] : []}\r\n            isInDialog={true}\r\n            id=\"categories\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <SelectBox\r\n            value={values.processId}\r\n            label=\"فرآیند\"\r\n            caller={ConfigurationsAPI.getProcesses}\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"processId\"\r\n            handleChange={handleChange}\r\n            required={false}\r\n          />\r\n          <SelectBox\r\n            value={values.objectionAllowed}\r\n            label=\"امکان تجدید نظر\"\r\n            staticData={true}\r\n            options={objectionValues.map((v) => ({ ...v, id: v.value }))}\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"objectionAllowed\"\r\n            handleChange={handleChange}\r\n            required={false}\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            value={values.order}\r\n            title=\"ترتیب\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"order\"\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n          <TextInput\r\n            value={values.code}\r\n            title=\"کد\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"code\"\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            value={values.responseDuration}\r\n            title=\"ضرب‌العجل پاسخگویی\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"responseDuration\"\r\n            onChange={handleChange}\r\n            required={false}\r\n            placeholder=\"روز\"\r\n          />\r\n          <TextInput\r\n            value={values.duration}\r\n            title=\"ضرب‌العجل اتمام\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"duration\"\r\n            onChange={handleChange}\r\n            required={false}\r\n            placeholder=\"روز\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <Textarea\r\n            value={values.description}\r\n            title=\"توضیحات\"\r\n            wrapperClassName=\"col-md-12\"\r\n            inputClassName=\"\"\r\n            name=\"description\"\r\n            handleChange={handleChange}\r\n            required={false}\r\n          />\r\n        </div>\r\n      </form>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title={isEditMode ? \"ویرایش دسته‌بندی\" : \"ایجاد دسته‌بندی\"}\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={createCategory}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCategoryDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\CategoryForm.js",["830","831"],"import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  fixDigit,\r\n  fixURL,\r\n  serverError,\r\n  unKnownError,\r\n  JalaliDate,\r\n} from \"../../../helperFuncs\";\r\nimport MultiSelectBox from \"../../helpers/MultiSelectBox\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\nimport Button from \"../../helpers/Button\";\r\nimport moment from \"moment-jalaali\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport { ReportsAPI } from \"../../../apiCalls\";\r\nimport { toast } from \"react-toastify\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport DatePickerConatiner from \"../../helpers/Date/DatePicker\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\n\r\nconst CategoryForm = ({ data }) => {\r\n  // data states\r\n  const [textValues, setTextValues] = useState({});\r\n  const [dateValues, setDateValues] = useState({});\r\n  const [selectValues, setSelectValues] = useState({});\r\n  const [multiSelectValues, setMultiSelectValues] = useState({});\r\n  const [plateNumberValues, setPlateNumberValues] = useState({});\r\n  const [textAreaValues, setTextAreaValues] = useState({});\r\n  const [options, setOptions] = useState({});\r\n\r\n  // main states\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  // flags\r\n  const [editRequest, setEditRequest] = useState(false);\r\n\r\n  // get data to select from\r\n  const getOptions = () => {\r\n    const promises = data?.report?.category?.formElements\r\n      .filter((f) => f.formElementType === 3 || f.formElementType === 2)\r\n      .map((f) => {\r\n        return new Promise((resolve, reject) => {\r\n          axios.get(fixURL(f.url)).then((res) => {\r\n            if (res && res.status === 200)\r\n              resolve({ data: res.data, name: f.name });\r\n            else reject({ data: [], name: f.name });\r\n          });\r\n        });\r\n      });\r\n\r\n    return Promise.all(promises).then((res) => {\r\n      const newOptions = options;\r\n      res.forEach((r) => {\r\n        newOptions[r.name] = r.data;\r\n      });\r\n      setOptions(newOptions);\r\n      getCitizenValues();\r\n    });\r\n  };\r\n\r\n  // get citizen request input values and store them\r\n  const getCitizenValues = () => {\r\n    let citizenValues = JSON.parse(\r\n      String(data?.report?.comments).replace(/\\[JSON\\]/, \"\")\r\n    );\r\n    // citizenValues = Array.isArray(citizenValues) ? citizenValues : [];\r\n    const formElements = data?.report?.category?.formElements;\r\n    const textElements = formElements.filter((f) => f.formElementType === 1);\r\n    const selectElements = formElements.filter((f) => f.formElementType === 2);\r\n    const multiSelectElements = formElements.filter(\r\n      (f) => f.formElementType === 3\r\n    );\r\n    const dateElements = formElements.filter((f) => f.formElementType === 4);\r\n    const plateNumberElements = formElements.filter(\r\n      (f) => f.formElementType === 5\r\n    );\r\n    const textAreaElements = formElements.filter(\r\n      (f) => f.formElementType === 6\r\n    );\r\n    const textValues = {};\r\n    const selectValues = {};\r\n    const multiSelectValues = {};\r\n    const dateValues = {};\r\n    const plateNumberValues = {};\r\n    const textAreaValues = {};\r\n    textElements.forEach((e) => {\r\n      textValues[e.name] = citizenValues[e.name] || \"\";\r\n    });\r\n    selectElements.forEach((e) => {\r\n      selectValues[e.name] = citizenValues[e.name] || \"\";\r\n    });\r\n    multiSelectElements.forEach((e) => {\r\n      multiSelectValues[e.name] = citizenValues[e.name] || [];\r\n    });\r\n    dateElements.forEach((e) => {\r\n      const localeDateStrings = moment(citizenValues[e.name])\r\n        .locale(\"fa\")\r\n        .format(\"jYYYY/jMM/jDD\");\r\n      const values = localeDateStrings\r\n        .split(\"/\")\r\n        .map((v) => parseInt(fixDigit(v, true)));\r\n      const year = values[0];\r\n      const month = values[1];\r\n      const day = values[2];\r\n\r\n      dateValues[e.name] = { year, month, day };\r\n    });\r\n    plateNumberElements.forEach((e) => {\r\n      let value;\r\n      if (typeof citizenValues[e.name] === \"object\") {\r\n        value = citizenValues[e.name];\r\n      } else {\r\n        const string = String(citizenValues[e.name]);\r\n        const part4 = string.slice(0, 2);\r\n        const part3 = string.slice(3, 6);\r\n        const part2 = string.slice(6, 7);\r\n        const part1 = string.slice(7, 9);\r\n        value = { part1, part2, part3, part4 };\r\n      }\r\n      plateNumberValues[e.name] = value;\r\n    });\r\n    textAreaElements.forEach((e) => {\r\n      textAreaValues[e.name] = citizenValues[e.name] || \"\";\r\n    });\r\n    setTextValues(textValues);\r\n    setSelectValues(selectValues);\r\n    setMultiSelectValues(multiSelectValues);\r\n    setDateValues(dateValues);\r\n    setPlateNumberValues(plateNumberValues);\r\n    setTextAreaValues(textAreaValues);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getOptions();\r\n    // getCitizenValues();\r\n  }, []);\r\n\r\n  // format the data according to mutliselect package\r\n  const formatToMultiSelect = (arr) => {\r\n    return arr && !arr.some((a) => a.label)\r\n      ? arr.map((o) => {\r\n          return {\r\n            label: o.name,\r\n            value: o.id,\r\n          };\r\n        })\r\n      : arr;\r\n  };\r\n\r\n  const jallaliToGregorian = (jallali) => {\r\n    const gregorain = JalaliDate.jalaliToGregorian(\r\n      jallali.year,\r\n      jallali.month,\r\n      jallali.day\r\n    );\r\n    const date = new Date(\r\n      gregorain[0],\r\n      gregorain[1] - 1,\r\n      gregorain[2]\r\n    ).toISOString();\r\n    return date;\r\n  };\r\n\r\n  // format edit request payload\r\n  const editCitizenRequest = () => {\r\n    let payload = {};\r\n    Object.keys(dateValues).forEach((k) => {\r\n      payload[k] = jallaliToGregorian(dateValues[k]);\r\n    });\r\n    Object.keys(multiSelectValues).forEach((k) => {\r\n      payload[k] = multiSelectValues[k]\r\n        ? multiSelectValues[k].map((m) => {\r\n            return {\r\n              id: m.id,\r\n              name: m.name,\r\n            };\r\n          })\r\n        : [];\r\n    });\r\n    Object.keys(selectValues).forEach((k) => {\r\n      const id = selectValues[k].id;\r\n      const name = selectValues[k].name;\r\n      payload[k] = {\r\n        id,\r\n        name,\r\n      };\r\n    });\r\n    Object.keys(textValues).forEach((k) => {\r\n      payload[k] = textValues[k];\r\n    });\r\n    Object.keys(plateNumberValues).forEach((k) => {\r\n      payload[k] =\r\n        plateNumberValues[k].part4 +\r\n        \"-\" +\r\n        plateNumberValues[k].part3 +\r\n        plateNumberValues[k].part2 +\r\n        plateNumberValues[k].part1;\r\n    });\r\n    Object.keys(textAreaValues).forEach((k) => {\r\n      payload[k] = textAreaValues[k];\r\n    });\r\n\r\n    const prefix = \"[JSON]\";\r\n    payload = { comments: prefix + JSON.stringify(payload) };\r\n    setPayload(payload);\r\n    setEditRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    ReportsAPI.updateCitizenRequest,\r\n    204,\r\n    editRequest,\r\n    payload,\r\n    (res) => {\r\n      setEditRequest(false);\r\n      if (res && res.status === 204) {\r\n        toast(\"ویرایش انجام شد.\", { type: \"success\" });\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    data?.report?.id\r\n  );\r\n  return (\r\n    <>\r\n      <div className=\"w90 mxa fcc\">\r\n        {data?.report?.category?.formElements.map((formElement) => {\r\n          if (formElement.formElementType === 2) {\r\n            return (\r\n              <SelectBox\r\n                key={formElement.id}\r\n                name={formElement.name}\r\n                value={selectValues[formElement.name]}\r\n                label={formElement.title}\r\n                options={\r\n                  options[formElement.name] ? options[formElement.name] : []\r\n                }\r\n                staticData={true}\r\n                handle={[\"name\"]}\r\n                labelStyle={{ textAlign: \"right\" }}\r\n                selectStyle={{ flex: 5 }}\r\n                disabled={formElement.isEditable}\r\n                handleChange={(name) => (e) => {\r\n                  const selected = options[formElement.name].find(\r\n                    (a) => a.id === parseInt(e.target.value)\r\n                  );\r\n                  setSelectValues({\r\n                    ...selectValues,\r\n                    [name]: {\r\n                      id: e.target.value,\r\n                      name: selected?.name,\r\n                    },\r\n                  });\r\n                }}\r\n              />\r\n            );\r\n          }\r\n          if (formElement.formElementType === 3) {\r\n            return (\r\n              <MultiSelectBox\r\n                key={formElement.id}\r\n                name={formElement.name}\r\n                label={formElement.title}\r\n                data={formatToMultiSelect(options[formElement.name])}\r\n                isStatic={true}\r\n                labelStyle={{ textAlign: \"right\", flex: 1 }}\r\n                className=\"flex-5 selectbox\"\r\n                selecteds={formatToMultiSelect(\r\n                  multiSelectValues[formElement.name]\r\n                )}\r\n                setSelected={(e) =>\r\n                  setMultiSelectValues({\r\n                    ...multiSelectValues,\r\n                    [formElement.name]: e.map((s) => {\r\n                      return { id: s.value, name: s.label };\r\n                    }),\r\n                  })\r\n                }\r\n              />\r\n            );\r\n          }\r\n          if (formElement.formElementType === 1) {\r\n            return (\r\n              <TextInput\r\n                key={formElement.id}\r\n                name={formElement.name}\r\n                title={formElement.title}\r\n                value={\r\n                  textValues[formElement.name]\r\n                    ? textValues[formElement.name]\r\n                    : \"\"\r\n                }\r\n                onChange={(name) => (e) =>\r\n                  setTextValues({\r\n                    ...textValues,\r\n                    [formElement.name]: e.target.value,\r\n                  })}\r\n                required={false}\r\n              />\r\n            );\r\n          }\r\n          if (formElement.formElementType === 5) {\r\n            return (\r\n              <div key={formElement.id} className=\"px1 py1 w90 fcs relative\">\r\n                <label\r\n                  className={\"text-primary f15 ml1 flex-1 w100 text-right\"}\r\n                >\r\n                  {formElement.title}\r\n                </label>\r\n                <div className=\"flex-5 frc\">\r\n                  <TextInput\r\n                    name={formElement.name}\r\n                    onChange={(name) => (e) =>\r\n                      setPlateNumberValues({\r\n                        ...plateNumberValues,\r\n                        [formElement.name]: {\r\n                          part1: plateNumberValues[formElement.name]?.part1,\r\n                          part2: plateNumberValues[formElement.name]?.part2,\r\n                          part3: plateNumberValues[formElement.name]?.part3,\r\n                          part4: e.target.value,\r\n                        },\r\n                      })}\r\n                    value={\r\n                      plateNumberValues[formElement.name]\r\n                        ? plateNumberValues[formElement.name]?.part4\r\n                        : \"\"\r\n                    }\r\n                    wrapperClassName=\"flex-1\"\r\n                  />\r\n                  <TextInput\r\n                    name={formElement.name}\r\n                    onChange={(name) => (e) =>\r\n                      setPlateNumberValues({\r\n                        ...plateNumberValues,\r\n                        [formElement.name]: {\r\n                          part1: plateNumberValues[formElement.name]?.part1,\r\n                          part2: plateNumberValues[formElement.name]?.part2,\r\n                          part3: e.target.value,\r\n                          part4: plateNumberValues[formElement.name]?.part4,\r\n                        },\r\n                      })}\r\n                    value={\r\n                      plateNumberValues[formElement.name]\r\n                        ? plateNumberValues[formElement.name]?.part3\r\n                        : \"\"\r\n                    }\r\n                    wrapperClassName=\"flex-1\"\r\n                  />\r\n                  <TextInput\r\n                    name={formElement.name}\r\n                    onChange={(name) => (e) =>\r\n                      setPlateNumberValues({\r\n                        ...plateNumberValues,\r\n                        [formElement.name]: {\r\n                          part1: plateNumberValues[formElement.name]?.part1,\r\n                          part2: e.target.value,\r\n                          part3: plateNumberValues[formElement.name]?.part3,\r\n                          part4: plateNumberValues[formElement.name]?.part4,\r\n                        },\r\n                      })}\r\n                    value={\r\n                      plateNumberValues[formElement.name]\r\n                        ? plateNumberValues[formElement.name]?.part2\r\n                        : \"\"\r\n                    }\r\n                    wrapperClassName=\"flex-1\"\r\n                  />\r\n                  <TextInput\r\n                    name={formElement.name}\r\n                    onChange={(name) => (e) =>\r\n                      setPlateNumberValues({\r\n                        ...plateNumberValues,\r\n                        [formElement.name]: {\r\n                          part1: e.target.value,\r\n                          part2: plateNumberValues[formElement.name]?.part2,\r\n                          part3: plateNumberValues[formElement.name]?.part3,\r\n                          part4: plateNumberValues[formElement.name]?.part4,\r\n                        },\r\n                      })}\r\n                    value={\r\n                      plateNumberValues[formElement.name]\r\n                        ? plateNumberValues[formElement.name]?.part1\r\n                        : \"\"\r\n                    }\r\n                    wrapperClassName=\"flex-1\"\r\n                  />\r\n                </div>\r\n              </div>\r\n            );\r\n          }\r\n          if (\r\n            formElement.formElementType === 4 &&\r\n            dateValues[formElement.name]\r\n          ) {\r\n            return (\r\n              <DatePickerConatiner\r\n                key={formElement.id}\r\n                title={formElement.title}\r\n                name={formElement.name}\r\n                wrapperClassName=\"w100 mxa relative fcc\"\r\n                inputClassName=\"w100 mxa relative fcc\"\r\n                date={dateValues[formElement.name]}\r\n                onSelect={(value, name) => {\r\n                  const newValues = dateValues;\r\n                  newValues[name] = value;\r\n                  setDateValues(newValues);\r\n                }}\r\n              />\r\n            );\r\n          }\r\n          if (formElement.formElementType === 6) {\r\n            return (\r\n              <Textarea\r\n                key={formElement.id}\r\n                title={formElement.title}\r\n                name={formElement.name}\r\n                handleChange={(name) => (e) =>\r\n                  setTextAreaValues({\r\n                    ...textAreaValues,\r\n                    [formElement.name]: e.target.value,\r\n                  })}\r\n                value={\r\n                  textAreaValues[formElement.name]\r\n                    ? textAreaValues[formElement.name]\r\n                    : \"\"\r\n                }\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n      <div className=\"w90 mxa fcc\">\r\n        <Button\r\n          className=\"relative w90 frc mxa my2 py1\"\r\n          style={{ height: 70 }}\r\n          onClick={editCitizenRequest}\r\n        >\r\n          {loading ? (\r\n            <span\r\n              className=\"loader text-white my1 f1\"\r\n              style={{ width: 1, height: 1 }}\r\n            ></span>\r\n          ) : (\r\n            <span>به روز‌رسانی</span>\r\n          )}\r\n        </Button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CategoryForm;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\StageForm.js",["832"],"import React, { useState } from \"react\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport { getFileExtension } from \"../../../helperFuncs\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\nimport AddAttachments from \"../../helpers/AddAttachments\";\r\nimport Button from \"../../helpers/Button\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst StageForm = ({ data, createStage = (f) => f }) => {\r\n  // data states\r\n  const [values, setValues] = useState({\r\n    stageId: \"\",\r\n    comments: \"\",\r\n  });\r\n  const [attachments, setAttachments] = useState([]);\r\n\r\n  // flags\r\n  const [isAccepted, setIsAccepted] = useState(false);\r\n\r\n  // func that keep track of changes in form\r\n  const handleChange = (name) => (e) => {\r\n    const value = e.target.value;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  // this function adds selected attachments to list\r\n  const handleAttachments = (e) => {\r\n    const file = e.target.files[0];\r\n    let newAttachmnets = attachments;\r\n    newAttachmnets = [...newAttachmnets, file];\r\n    setAttachments(newAttachmnets);\r\n  };\r\n\r\n  const validations = () => {\r\n    // should not send request if no stage has been selected\r\n    if (!values.stageId) {\r\n      toast(\"لطفا مرحله ارجاع را انتخاب نمایید\", { type: \"error\" });\r\n      return;\r\n    }\r\n  };\r\n\r\n  const getReportPayload = () => {\r\n    const payload = new FormData();\r\n    payload.append(\"isAccepted\", isAccepted);\r\n    payload.append(\"stageId\", values.stageId);\r\n    payload.append(\"comment\", values.comments);\r\n    attachments.forEach((attachment) => {\r\n      payload.append(\"attachments\", attachment);\r\n    });\r\n    return payload;\r\n  };\r\n\r\n  const onSubmit = (e) => {\r\n    // check validations\r\n    e.preventDefault();\r\n    const isValid = validations();\r\n    if (!isValid) return;\r\n\r\n    // get payload\r\n    const payload = getReportPayload();\r\n    // send payload\r\n    createStage(payload);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={styles.infoList}>\r\n        <div\r\n          className={[styles.infoGroup].join(\" \")}\r\n          style={{ padding: \"10px 0\" }}\r\n        >\r\n          <label className={styles.label}>مورد تایید است؟</label>\r\n          <div className={styles.radioList}>\r\n            <div className={styles.radioGroup}>\r\n              <label htmlFor=\"publicReport\">تایید</label>\r\n              <input\r\n                type=\"radio\"\r\n                className={styles.radio}\r\n                name=\"isAccepted\"\r\n                id=\"publicReport\"\r\n                checked={isAccepted}\r\n                onChange={() => setIsAccepted(true)}\r\n              />\r\n            </div>\r\n            <div className={styles.radioGroup}>\r\n              <label htmlFor=\"privateReport\">رد</label>\r\n              <input\r\n                type=\"radio\"\r\n                className={styles.radio}\r\n                name=\"isAccepted\"\r\n                id=\"privateReport\"\r\n                checked={!isAccepted}\r\n                onChange={() => setIsAccepted(false)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={[styles.infoGroup].join(\" \")}\r\n          style={{ padding: \"10px 0\" }}\r\n        >\r\n          <SelectBox\r\n            label=\"مراحل:\"\r\n            staticData={true}\r\n            horizontal={false}\r\n            name=\"stageId\"\r\n            handleChange={handleChange}\r\n            options={data?.possibleStages}\r\n            handle={[\"displayName\"]}\r\n            value={values.stageId}\r\n            wrapperStyle={{ margin: \"0 auto\", padding: \"0 10px\" }}\r\n            selectStyle={{ border: \"1px solid #ddd\", flex: 4 }}\r\n          />\r\n        </div>\r\n        <div\r\n          className={[styles.infoGroup].join(\" \")}\r\n          style={{ padding: \"10px 0\" }}\r\n        >\r\n          <Textarea\r\n            name=\"comments\"\r\n            title=\"توضیحات:\"\r\n            value={values.comments}\r\n            handleChange={handleChange}\r\n            wrapperStyle={{ margin: \"0 auto\", padding: \"0 10px\" }}\r\n            inputStyle={{ border: \"1px solid #ddd\", flex: 4 }}\r\n          />\r\n        </div>\r\n        <div className=\"w80 flex-around-row mx-a\">\r\n          <AddAttachments handleChange={handleAttachments} className=\"attach\" />\r\n          <div\r\n            className={styles.attachments}\r\n            style={{ minHeight: \"100px\", margin: \"10px\" }}\r\n          >\r\n            {attachments.map((media, i) => {\r\n              if (\r\n                [\"jpg\", \"jpeg\", \"png\", \"jfif\", \"svg\", \"gif\"].some(\r\n                  (ext) => ext === getFileExtension(media.name).toLowerCase()\r\n                )\r\n              ) {\r\n                return (\r\n                  <div key={i} className={styles.media}>\r\n                    <div className=\"w100 h100 flex-center-row\">\r\n                      <img src={URL.createObjectURL(media)} />\r\n                    </div>\r\n                  </div>\r\n                );\r\n              } else {\r\n                return (\r\n                  <div key={i} className={styles.media}>\r\n                    <div className=\"w100 h100 flex-center-row\">\r\n                      <span title={media.name} className=\"f5 text-primary\">\r\n                        <i className=\"fas fa-link\"></i>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n        <div className={[styles.btnGroup, \"my-2\"].join(\" \")}>\r\n          <Button\r\n            title=\"ارجاع درخواست\"\r\n            className=\"w80 py-1\"\r\n            fullWidth={true}\r\n            onClick={onSubmit}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StageForm;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\ScatterMapAccordion.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\SideBar.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\SideLink.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\constants.js",[],"D:\\projects\\shahrbin-admin\\src\\store\\AppContext.js",[],"D:\\projects\\shahrbin-admin\\src\\store\\reducer.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\NoData\\NoData.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\MultiSelect.js",["833","834","835","836","837","838","839","840","841","842"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { callAPI } from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport useClick from \"../hooks/useClick\";\r\nimport useResize from \"../hooks/useResize\";\r\nimport TextInput from \"./TextInput\";\r\n\r\nconst defaultStrings = {\r\n  choosePlaceholder: \"انتخاب کنید.\",\r\n  label: \"\",\r\n  allSelected: \"همه گزینه‌ها انتخاب شده‌اند.\",\r\n  search: \"جستجو\",\r\n};\r\n\r\nconst modalSelectListWrapper =\r\n  document && document.getElementById(\"modal-selectlist\");\r\n\r\nconst MultiSelect = ({\r\n  nameKey = \"name\",\r\n  valueKey = \"id\",\r\n  staticData = [],\r\n  isStatic = true,\r\n  caller = (f) => new Promise((rs, rj) => rs()),\r\n  requestArgs = [],\r\n  strings = {},\r\n  wrapperClassName = \"\",\r\n  inputClassName = \"\",\r\n  labelClassName = \"\",\r\n  onChange = (f) => f,\r\n  defaultSelecteds = [],\r\n  singleSelect = false,\r\n  defaultStyles = true,\r\n  maxHeight = \"auto\",\r\n  isInDialog = false,\r\n  id = \"\",\r\n}) => {\r\n  //   references\r\n  const clickRef = useRef(null);\r\n  const selectListRef = useRef(null);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n  const [options, setOptions] = useState([]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [selectedText, setSelectedText] = useState(\"\");\r\n\r\n  //   other states\r\n\r\n  //   flags\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [isActive, setIsActive] = useClick(clickRef, \"click\", [selectListRef]);\r\n\r\n  const getData = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: caller,\r\n        requestEnded: () => setLoading(false),\r\n        successCallback: (res) => {\r\n          setData(res.data);\r\n        },\r\n        errorCallback: (res) => setOptions([]),\r\n      },\r\n      ...requestArgs\r\n    );\r\n  };\r\n\r\n  const formatData = (data, shouldUpdate = true) => {\r\n    const options = data.map((d, i) => {\r\n      return { ...d, selected: false };\r\n    });\r\n    setOptions(options);\r\n    if (shouldUpdate) {\r\n      handleDefaultSelecteds(defaultSelecteds, options);\r\n    }\r\n    return options;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isStatic) {\r\n      setData(staticData);\r\n    }\r\n  }, [staticData]);\r\n\r\n  useEffect(() => {\r\n    if (!isStatic) {\r\n      getData();\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    formatData(data);\r\n  }, [data]);\r\n\r\n  const onClick = (e) => {\r\n    setIsActive(!isActive);\r\n  };\r\n\r\n  const handleDefaultSelecteds = (defaults, options) => {\r\n    const newOptions = options;\r\n    defaults.map((ds) => {\r\n      const index = newOptions.findIndex((o) => o[valueKey] === ds[valueKey]);\r\n      if (index !== -1) {\r\n        newOptions[index].selected = true;\r\n      }\r\n    });\r\n    setOptions(newOptions);\r\n\r\n    formatSelectedStrings();\r\n  };\r\n\r\n  const handleChange = (item) => {\r\n    let newOptions = [];\r\n    if (singleSelect) {\r\n      newOptions = options.map((s) => {\r\n        if (item[valueKey] === s[valueKey]) {\r\n          s.selected = !s.selected;\r\n          return s;\r\n        } else {\r\n          s.selected = false;\r\n          return s;\r\n        }\r\n      });\r\n    } else {\r\n      newOptions = options.map((s) => {\r\n        if (item[valueKey] === s[valueKey]) {\r\n          s.selected = !s.selected;\r\n          return s;\r\n        } else return s;\r\n      });\r\n    }\r\n    const selecteds = newOptions.filter((o) => o.selected);\r\n    onChange(selecteds);\r\n    setOptions(newOptions);\r\n    formatSelectedStrings();\r\n  };\r\n\r\n  useEffect(() => {\r\n    formatSelectedStrings();\r\n  }, [options]);\r\n\r\n  const formatSelectedStrings = () => {\r\n    const selecteds = options.filter((o) => o.selected);\r\n    if (options.length !== 0 && selecteds.length === options.length) {\r\n      setSelectedText(\r\n        selecteds.length === 1\r\n          ? selecteds[0][nameKey]\r\n          : inputStrings.allSelected\r\n      );\r\n    } else {\r\n      setSelectedText(selecteds.map((s) => s[nameKey]).join(\", \"));\r\n    }\r\n  };\r\n\r\n  const clearSelecteds = (e) => {\r\n    e.stopPropagation();\r\n    const newOptions = data.map((o) => {\r\n      o.selected = false;\r\n      return o;\r\n    });\r\n    setOptions(newOptions);\r\n    onChange([]);\r\n  };\r\n\r\n  const handleSearch = (name) => (e) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    search(value);\r\n  };\r\n\r\n  const search = (value) => {\r\n    if (value === \"\") {\r\n      setOptions(formatData(data));\r\n      return;\r\n    }\r\n    const results = data.filter((o) => String(o[nameKey]).includes(value));\r\n\r\n    setOptions(results);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleDefaultSelecteds(defaultSelecteds, options);\r\n  }, [defaultSelecteds]);\r\n\r\n  const inputStrings = { ...defaultStrings, ...strings };\r\n\r\n  return (\r\n    <>\r\n      <TextInput\r\n        placeholder={inputStrings.choosePlaceholder}\r\n        wrapperClassName={wrapperClassName}\r\n        inputClassName={inputClassName + \"pointer\"}\r\n        labelClassName={labelClassName}\r\n        title={inputStrings.label}\r\n        required={false}\r\n        onClick={onClick}\r\n        forwardInputRef={clickRef}\r\n        name={\"multiSelect\" + new Date().getTime()}\r\n        value={selectedText}\r\n        defaultStyles={defaultStyles}\r\n        onChange={handleSearch}\r\n        readOnly={true}\r\n      >\r\n        {options.some((o) => o.selected) && (\r\n          <span\r\n            className=\"f12 absolute pointer\"\r\n            style={{ top: \"50%\", left: 20 }}\r\n            onClick={clearSelecteds}\r\n          >\r\n            <i className=\"fas fa-times\"></i>\r\n          </span>\r\n        )}\r\n        <ul\r\n          className={[\r\n            isActive ? \"fcs\" : \"d-none\",\r\n            \"animate w100 bg-color absolute br1\",\r\n          ].join(\" \")}\r\n          style={{\r\n            top: \"100%\",\r\n            zIndex: 1000,\r\n            maxHeight,\r\n            overflow: \"auto\",\r\n          }}\r\n        >\r\n          <SelectList\r\n            options={options}\r\n            onChange={handleChange}\r\n            nameKey={nameKey}\r\n            isInDialog={isInDialog}\r\n            inputRef={clickRef}\r\n            selectListRef={selectListRef}\r\n            inputStrings={inputStrings}\r\n            isActive={isActive}\r\n            searchText={searchText}\r\n            onSearch={handleSearch}\r\n            defaultStyles={defaultStyles}\r\n            maxHeight={maxHeight}\r\n            id={id}\r\n          />\r\n        </ul>\r\n      </TextInput>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(MultiSelect);\r\n\r\nconst SelectList = ({\r\n  options = [],\r\n  onChange = (f) => f,\r\n  nameKey = \"\",\r\n  isInDialog = false,\r\n  inputRef = { current: null },\r\n  inputStrings = {},\r\n  isActive = false,\r\n  searchText = \"\",\r\n  onSearch = (f) => f,\r\n  defaultStyles = false,\r\n  maxHeight = 300,\r\n  selectListRef = {},\r\n  id = \"\",\r\n}) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // refrences\r\n  const wrapperRef = useRef(null);\r\n\r\n  // state\r\n  const [style, setStyle] = useState({});\r\n\r\n  // window resize hook\r\n  const { windowWidth, windowHeight } = useResize();\r\n\r\n  // variables\r\n  const uniqueId = \"select-item-\" + Math.random();\r\n\r\n  // functions\r\n  const handleRegular = () => {\r\n    const style = {\r\n      width: \"100%\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      display: isActive ? \"flex\" : \"none\",\r\n      // maxHeight,\r\n      border: \"1px solid var(--light)\",\r\n      boxShadow: \"0 0 10px 1px rgba(0,0,0,0.1)\",\r\n      borderRadius: 5,\r\n    };\r\n    setStyle(style);\r\n  };\r\n\r\n  const handleInDialog = () => {\r\n    const style = {\r\n      position: \"fixed\",\r\n      zIndex: 10000000,\r\n      backgroundColor: \"var(--white)\",\r\n      opacity: isActive ? 1 : 0,\r\n      // transform: isActive ? `translateY(0)` : `translateY(-5px)`,\r\n      pointerEvents: isActive ? \"visible\" : \"none\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-start\",\r\n      flexDirection: \"column\",\r\n      maxHeight,\r\n      overflowY: \"auto\",\r\n      border: \"1px solid var(--light)\",\r\n      boxShadow: \"0 2px 12px 0px rgba(0,0,0,0.1)\",\r\n      borderRadius: 5,\r\n      transition: \"opacity 0.3s, transform 0.3s\",\r\n    };\r\n    const boundings = inputRef.current.getBoundingClientRect();\r\n    style.top = boundings?.top + boundings?.height;\r\n    style.left = boundings?.right - boundings.width;\r\n    style.width = boundings.width;\r\n    setStyle(style);\r\n  };\r\n\r\n  // effects\r\n  useEffect(() => {\r\n    if (isInDialog) {\r\n      handleInDialog();\r\n    } else {\r\n      handleRegular();\r\n    }\r\n    if (isActive) {\r\n      dispatch({\r\n        type: \"setModals\",\r\n        payload: [\r\n          ...store.modals,\r\n          {\r\n            id,\r\n            index: store.modals.length,\r\n          },\r\n        ],\r\n      });\r\n    } else {\r\n      const newModals = store.modals.filter((m) => m.id !== id);\r\n      dispatch({\r\n        type: \"setModals\",\r\n        payload: newModals,\r\n      });\r\n    }\r\n  }, [\r\n    inputRef.current,\r\n    selectListRef.current,\r\n    isActive,\r\n    windowWidth,\r\n    windowHeight,\r\n  ]);\r\n\r\n  const renderList = () => (\r\n    <>\r\n      <section style={style} className=\"scrollbar\" ref={selectListRef}>\r\n        {/* <TextInput\r\n          placeholder={inputStrings.search}\r\n          wrapperClassName={isActive ? \"fcs w100\" : \"d-none\"}\r\n          inputClassName={\"w100 py1 br1 no-outline text-center relative\"}\r\n          labelClassName={\"\"}\r\n          required={false}\r\n          name=\"searchText\"\r\n          value={searchText}\r\n          defaultStyles={defaultStyles}\r\n          onChange={onSearch}\r\n          autoFocus={true}\r\n        /> */}\r\n        {options.length > 0 ? (\r\n          options.map((o, i) => (\r\n            <label\r\n              htmlFor={uniqueId + i}\r\n              key={i}\r\n              className=\"w100 frs hv-primary trans-1 pointer py1 px1 border-b-light text-dark\"\r\n            >\r\n              <input\r\n                type=\"checkbox\"\r\n                name={uniqueId + i}\r\n                id={uniqueId + i}\r\n                onChange={() => onChange(o)}\r\n                checked={o.selected}\r\n              />\r\n              <span className=\"mx1 flex-1 h100\">{o[nameKey]}</span>\r\n            </label>\r\n          ))\r\n        ) : (\r\n          <span className=\"w100 frc f15 py1 px1\">گزینه‌ای وجود ندارد.</span>\r\n        )}\r\n      </section>\r\n    </>\r\n  );\r\n\r\n  return isInDialog\r\n    ? ReactDOM.createPortal(renderList(), modalSelectListWrapper)\r\n    : renderList();\r\n};\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\TreeSystem.js",["843","844","845","846","847","848","849","850"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"../../helpers/Button\";\r\nimport DialogToggler from \"../../helpers/DialogToggler\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport DialogButtons from \"./DialogButtons\";\r\nimport TreeItem from \"./TreeItem\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst buttonsStyle = {\r\n  bottom: 0,\r\n  right: 0,\r\n  left: 0,\r\n  transition: \"all 0.3s\",\r\n};\r\n\r\nconst TreeSystem = ({\r\n  caller = new Promise((resolve) => resolve([])),\r\n  isStatic = false,\r\n  staticData = [],\r\n  children,\r\n  condition,\r\n  setCondition = (f) => f,\r\n  treeKey = \"categories\",\r\n  nameKey = \"title\",\r\n  valuekey = \"id\",\r\n  onChange = (f) => f,\r\n  defaultSelecteds = [],\r\n  singleSelect = false,\r\n  onClose,\r\n  renderToggler = (f) => f,\r\n  reset = false,\r\n}) => {\r\n  // refs\r\n  const searchInputRef = useRef(null);\r\n\r\n  // data states\r\n  const [data, setData] = useState(isStatic ? staticData : []);\r\n  const [allData, setAllData] = useState(isStatic ? staticData : []);\r\n  const [flatData, setFlatData] = useState([]);\r\n  const [displayedData, setDisplayedData] = useState(\r\n    isStatic ? staticData[treeKey] : []\r\n  );\r\n  const [selecteds, setSelecteds] = useState(defaultSelecteds);\r\n  const [confirmedSelecteds, setConfirmedSelecteds] = useState([]);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n\r\n  let loading;\r\n\r\n  // const [, loading] = useMakeRequest(caller, 200, !isStatic, null, (res) => {\r\n  //   if (res.status === 200) {\r\n  //     setData(res.data);\r\n  //     setAllData(res.data);\r\n  //     setDisplayedData(res.data[treeKey]);\r\n  //     const flatData = getFlatData(res.data);\r\n  //     setFlatData(flatData);\r\n  //   }\r\n  // });\r\n\r\n  // useEffect(() => {\r\n  //   if (condition) {\r\n  //     setSelecteds(confirmedSelecteds);\r\n  //   }\r\n  // }, [condition]);\r\n\r\n  useEffect(() => {\r\n    setSelecteds(defaultSelecteds);\r\n    if (isStatic) {\r\n      const flatData = getFlatData(staticData);\r\n      setFlatData(flatData);\r\n    }\r\n  }, []);\r\n\r\n  // *********************temporary***************\r\n  // useEffect(() => {\r\n  //   setSelecteds((prev) => {\r\n  //     return defaultSelecteds;\r\n  //   });\r\n  // }, [defaultSelecteds]);\r\n  // *********************temporary***************\r\n\r\n  const getFlatData = (data) => {\r\n    const flatData = [];\r\n    data[treeKey].forEach((d) => {\r\n      const branches = getAllBranches(d);\r\n      flatData.push(d);\r\n      flatData.push(...branches);\r\n    });\r\n    return flatData;\r\n  };\r\n\r\n  const handleSelecting = ({ value, item }) => {\r\n    if (singleSelect) {\r\n      const children = getAllBranches(item);\r\n      const isNode = !children.length;\r\n      if (isNode) {\r\n        if (value) {\r\n          setSelecteds([item]);\r\n        } else {\r\n          setSelecteds([]);\r\n        }\r\n      }\r\n    } else {\r\n      const children = getAllBranches(item);\r\n      if (value) {\r\n        setSelecteds([...selecteds, ...children, item]);\r\n      } else {\r\n        const parent = findParent(item);\r\n        const shouldParentDeselect =\r\n          parent &&\r\n          parent[treeKey].filter((a) => selecteds.some((s) => s.id === a.id))\r\n            .length === 1;\r\n        if (shouldParentDeselect) {\r\n          setSelecteds(\r\n            selecteds.filter(\r\n              (s) => ![...children, item, parent].find((a) => a.id === s.id)\r\n            )\r\n          );\r\n        } else {\r\n          setSelecteds(\r\n            selecteds.filter(\r\n              (s) => ![...children, item].find((a) => a.id === s.id)\r\n            )\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const isSelected = (item) => {\r\n    const children = getAllBranches(item);\r\n    return children.length > 0\r\n      ? children.some((c) => selecteds.find((s) => s.id === c.id))\r\n      : !!selecteds.find((s) => s.id === item.id);\r\n  };\r\n\r\n  const getAllBranches = (item) => {\r\n    const children = [];\r\n    item[treeKey].forEach((child) => {\r\n      children.push(child);\r\n      children.push(...getAllBranches(child));\r\n    });\r\n    return children;\r\n  };\r\n\r\n  const findParent = (item) => {\r\n    const allNodes = getAllBranches(data);\r\n    let parent;\r\n    for (let i = 0; i < allNodes.length; i++) {\r\n      const node = allNodes[i];\r\n      if (node[treeKey].some((n) => n.id === item.id)) {\r\n        parent = node;\r\n        break;\r\n      }\r\n    }\r\n    return parent;\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setCondition(false);\r\n    modalRoot.classList.remove(\"active\");\r\n  };\r\n\r\n  const onConfirmClick = (e) => {\r\n    e.stopPropagation();\r\n    onChange(selecteds);\r\n    setConfirmedSelecteds(selecteds);\r\n    if (onClose) onClose();\r\n    else closeDialog();\r\n  };\r\n\r\n  const onRemoveClick = (e) => {\r\n    e.stopPropagation();\r\n    setSelecteds([]);\r\n    setConfirmedSelecteds([]);\r\n    onChange([]);\r\n    if (onClose) onClose();\r\n    else closeDialog();\r\n  };\r\n\r\n  const onSearch = (name) => (e) => {\r\n    const value = e.target.value;\r\n    setSearchText(value);\r\n    if (value === \"\") {\r\n      setDisplayedData(allData[treeKey]);\r\n      return;\r\n    }\r\n    const newData = flatData.filter((d) => d[nameKey].includes(value));\r\n    // newData.map((d) => {\r\n    //   if(!findParent(d)) {\r\n\r\n    //   } else return d;\r\n    // })\r\n    setDisplayedData(newData);\r\n  };\r\n\r\n  const clear = () => {\r\n    setSelecteds([]);\r\n    setSearchText(\"\");\r\n  };\r\n\r\n  // effects\r\n  useEffect(() => {\r\n    if (reset) {\r\n      clear();\r\n    }\r\n  }, [reset]);\r\n\r\n  useEffect(() => {\r\n    if (condition) {\r\n      searchInputRef.current.focus();\r\n    }\r\n  }, [condition, searchInputRef.current]);\r\n  return (\r\n    <>\r\n      {renderToggler(selecteds, flatData)}\r\n      <DialogToggler\r\n        condition={condition}\r\n        setCondition={setCondition}\r\n        isUnique={false}\r\n        width={600}\r\n        height={600}\r\n        loading={loading}\r\n        id=\"treesystem\"\r\n      >\r\n        <section\r\n          className=\"d-flex fdc w100 of-auto-y pb5 scrollbar\"\r\n          style={{ maxHeight: 500 }}\r\n        >\r\n          <TextInput\r\n            name=\"searchText\"\r\n            value={searchText}\r\n            onChange={onSearch}\r\n            placeholder=\"جستجو کنید\"\r\n            wrapperClassName=\"mxa\"\r\n            forwardInputRef={searchInputRef}\r\n          />\r\n          {displayedData.map((item) => (\r\n            <TreeItem\r\n              key={item.id}\r\n              item={item}\r\n              treeKey={treeKey}\r\n              nameKey={nameKey}\r\n              valuekey={valuekey}\r\n              selecteds={selecteds}\r\n              handleSelecting={handleSelecting}\r\n              isSelected={isSelected}\r\n              findParent={findParent}\r\n            />\r\n          ))}\r\n        </section>\r\n\r\n        <DialogButtons\r\n          primaryTitle=\"تایید\"\r\n          secondaryTitle=\"پاک‌کردن\"\r\n          onPrimaryClick={onConfirmClick}\r\n          onSecondaryClick={onRemoveClick}\r\n          wrapperClassName=\"absolute b0\"\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(TreeSystem);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\TreeItem.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\CheckBox\\CheckBox.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\Processes.js",["851","852","853","854"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ConfigurationsAPI } from \"../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  defaultFilters,\r\n  fixDigit,\r\n  tableLightTheme,\r\n} from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport AddProcessDialog from \"../commons/dialogs/AddProcessDialog\";\r\nimport Button from \"../helpers/Button\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport DropdownWrapper from \"../helpers/DropdownWrapper\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Processes = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // other states\r\n  const [dialogData, setDialogData] = useState(null);\r\n\r\n  //   flags\r\n  const [dialog, setDialog] = useState(false);\r\n  const [addProcessDialog, setAddProcessDialog] = useState(false);\r\n  const [createLoading, setCreateLoading] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const queries = {\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getProccesses();\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getProccesses();\r\n  }, [store.filters]);\r\n\r\n  const getProccesses = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ConfigurationsAPI.getProcesses,\r\n        successCallback: (res) => setData(res.data),\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  //   open category details dialog\r\n  const openDialog = (process) => {\r\n    setDialogData(process);\r\n    setDialog(true);\r\n  };\r\n\r\n  const onProcessCreated = () => {\r\n    toast(\"فرآیند جدید با موفقیت اضافه شد.\", { type: \"success\" });\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getProccesses();\r\n  };\r\n\r\n  const onProccessUpdated = () => {\r\n    toast(\"فرآیند با موفقیت ویرایش شد.\", { type: \"success\" });\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getProccesses();\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف فرآیند\"\r\n          icon=\"fas fa-tasks\"\r\n          onClick={() => setAddProcessDialog(true)}\r\n        />\r\n        <Filters filterTypes={{ query: true }} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `proccess-${1}`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n  ];\r\n\r\n  //   table columns\r\n  const columns = [\r\n    {\r\n      name: \"فرآیند\",\r\n      cell: (row) => <span className=\"text-right\">{fixDigit(row.title)}</span>,\r\n    },\r\n    {\r\n      name: \"عملیات\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            total={data.length}\r\n            perPage={data.length}\r\n            rowData={row}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const condStyle = [\r\n    {\r\n      when: (row) => row?.category?.isDeleted,\r\n      style: {\r\n        backgroundColor: \"#ddd\",\r\n        color: \"#333\",\r\n      },\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={columns}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          pagination={false}\r\n          conditionalRowStyles={condStyle}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      <DialogToggler\r\n        condition={addProcessDialog}\r\n        setCondition={setAddProcessDialog}\r\n        width={600}\r\n        isUnique={false}\r\n        loading={createLoading}\r\n        id=\"add-proccess-dialog\"\r\n      >\r\n        <AddProcessDialog\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onProcessCreated}\r\n          mode={\"create\"}\r\n        />\r\n      </DialogToggler>\r\n\r\n      {/* edit dialog */}\r\n      <DialogToggler\r\n        condition={dialog}\r\n        setCondition={setDialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        width={800}\r\n        loading={createLoading}\r\n        id=\"edit-proccess-dialog\"\r\n      >\r\n        <AddProcessDialog\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onProccessUpdated}\r\n          mode={\"edit\"}\r\n          processId={dialogData?.id}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Processes;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddProcessDialog.js",["855","856"],"import React, { useEffect, useState } from \"react\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport { ProcessesAPI } from \"../../../apiCalls\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport Button from \"../../helpers/Button\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport { callAPI, serverError, unKnownError } from \"../../../helperFuncs\";\r\n\r\nconst AddProcessDialog = ({\r\n  setLoading = (f) => f,\r\n  onSuccess = (f) => f,\r\n  mode = \"create\",\r\n  defaltValues,\r\n  processId,\r\n}) => {\r\n  const isEditMode = mode === \"edit\";\r\n\r\n  // data states\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    actorIds: [],\r\n  });\r\n  const [defaultActors, setDefaultActors] = useState([]);\r\n\r\n  // other states\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  // flags\r\n  const [createRequest, setCreateRequest] = useState(false);\r\n\r\n  const fillInputs = (data) => {\r\n    const actors =\r\n      data.stages.find((s) => s.name === \"Executive\")?.actors || [];\r\n    setValues({\r\n      title: data.title,\r\n      actorIds: actors,\r\n    });\r\n    setDefaultActors(actors);\r\n  };\r\n\r\n  const getData = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ProcessesAPI.getProcessById,\r\n        successStatus: 200,\r\n        successCallback: (res) => fillInputs(res.data),\r\n        requestEnded: (res) => setLoading(false),\r\n      },\r\n      processId\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      getData();\r\n    }\r\n  }, []);\r\n\r\n  const handleChange =\r\n    (name, options = {}) =>\r\n    (e) => {\r\n      let value = e.target ? e.target.value : e;\r\n      if (options?.onlyDigits) {\r\n        value = String(value).replace(/\\D/g, \"\");\r\n      }\r\n      setValues({ ...values, [name]: value });\r\n    };\r\n\r\n  const createProcess = () => {\r\n    const actorIds = values.actorIds.map((a) => a.id);\r\n    const payload = {\r\n      title: values.title,\r\n      actorIds,\r\n    };\r\n    setPayload(payload);\r\n    setCreateRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    isEditMode ? ProcessesAPI.updateProcess : ProcessesAPI.createProcess,\r\n    isEditMode ? 204 : 201,\r\n    createRequest,\r\n    payload,\r\n    (res) => {\r\n      setCreateRequest(false);\r\n      const status = isEditMode ? 204 : 201;\r\n      if (res && res.status === status) {\r\n        onSuccess();\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    processId\r\n  );\r\n  return (\r\n    <>\r\n      <form className=\"w90 mx-a relative fcc\">\r\n        <div className=\"w100 mxa row\">\r\n          <MultiSelect\r\n            strings={{ label: \"واحدهای اجرایی\" }}\r\n            caller={ProcessesAPI.getExecutives}\r\n            isStatic={false}\r\n            nameKey=\"displayName\"\r\n            valueKey=\"id\"\r\n            maxHeight={250}\r\n            onChange={(values) => handleChange(\"actorIds\")(values)}\r\n            defaultSelecteds={defaultActors}\r\n            isInDialog={true}\r\n            wrapperClassName=\"col-md-12\"\r\n            id=\"proccesses\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            wrapperClassName=\"col-md-12\"\r\n            title=\"عنوان\"\r\n            required={false}\r\n            value={values.title}\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </form>\r\n\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title={isEditMode ? \"ویرایش فرآیند\" : \"ایجاد فرآیند\"}\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={createProcess}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddProcessDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\OrganizationalUnits.js",["857","858","859","860"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { OrganizationalUnitAPI } from \"../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  defaultFilters,\r\n  fixDigit,\r\n  tableLightTheme,\r\n} from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport AddOrganizationalUnit from \"../commons/dialogs/AddOrganizationalUnit\";\r\nimport Button from \"../helpers/Button\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport DropdownWrapper from \"../helpers/DropdownWrapper\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst OrganizationalUnits = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // other states\r\n  const [currentUnit, setCurrentUnit] = useState(null);\r\n\r\n  //   flags\r\n  const [addUnitDialog, setAddUnitDialog] = useState(false);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState(null);\r\n  const [createLoading, setCreateLoading] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const queries = {\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getAllOrgans();\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getAllOrgans();\r\n  }, [store.filters]);\r\n\r\n  const getAllOrgans = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: OrganizationalUnitAPI.getAllOrgans,\r\n        successCallback: (res) => setData(res.data),\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  //   open category details dialog\r\n  const openDialog = (unit) => {\r\n    setDialogData(unit);\r\n    setCurrentUnit(unit);\r\n    setEditDialog(true);\r\n  };\r\n\r\n  const onUnitCreated = () => {\r\n    toast(\"واحد جدید با موفقیت اضافه شد.\", { type: \"success\" });\r\n    setAddUnitDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getAllOrgans();\r\n  };\r\n\r\n  const onOrganizationEdited = () => {\r\n    toast(\"واحد با موفقیت ویرایش شد.\", { type: \"success\" });\r\n    setEditDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    setDialogData(null);\r\n    getAllOrgans();\r\n  };\r\n\r\n  const getDisplayName = (row) => {\r\n    return `${row.title} ${\r\n      row?.user?.firstName ? `(${row.user.firstName} ${row.user.lastName})` : \"\"\r\n    }`;\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف واحد‌سازمانی\"\r\n          icon=\"fas fa-building\"\r\n          onClick={() => setAddUnitDialog(true)}\r\n        />\r\n        <Filters filterTypes={{ query: true }} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `orginaztion-1`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n  ];\r\n\r\n  //   table columns\r\n  const columns = [\r\n    {\r\n      name: \"عنوان\",\r\n      cell: (row) => (\r\n        <span className=\"text-right\">{fixDigit(getDisplayName(row))}</span>\r\n      ),\r\n    },\r\n    {\r\n      name: \"عملیات\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            total={data.length}\r\n            perPage={data.length}\r\n            rowData={row}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={columns}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          pagination={false}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      {/* create dialog */}\r\n      <DialogToggler\r\n        condition={addUnitDialog}\r\n        setCondition={setAddUnitDialog}\r\n        width={700}\r\n        isUnique={false}\r\n        loading={createLoading}\r\n        id=\"add-OrganizationalUnit-dialog\"\r\n      >\r\n        <AddOrganizationalUnit\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onUnitCreated}\r\n          mode={\"create\"}\r\n        />\r\n      </DialogToggler>\r\n\r\n      {/* edit dialog */}\r\n      <DialogToggler\r\n        condition={editDialog}\r\n        setCondition={setEditDialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        width={700}\r\n        loading={createLoading}\r\n        id=\"edit-OrganizationalUnit-dialog\"\r\n      >\r\n        <AddOrganizationalUnit\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onOrganizationEdited}\r\n          mode={\"edit\"}\r\n          defaltValues={currentUnit}\r\n          organizationId={dialogData?.id}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default OrganizationalUnits;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddOrganizationalUnit.js",["861","862","863"],"import React, { useEffect, useState } from \"react\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport { OrganizationalUnitAPI } from \"../../../apiCalls\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport Button from \"../../helpers/Button\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport { callAPI, serverError, unKnownError } from \"../../../helperFuncs\";\r\n\r\nconst AddOrganizationalUnit = ({\r\n  setLoading = (f) => f,\r\n  onSuccess = (f) => f,\r\n  mode = \"create\",\r\n  organizationId,\r\n}) => {\r\n  const isEditMode = mode === \"edit\";\r\n\r\n  // data states\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    userName: \"\",\r\n    password: \"\",\r\n    actorIds: [],\r\n    organizationalUnitIds: [],\r\n  });\r\n  const [defaultUnits, setDefaultUnits] = useState([]);\r\n  const [defaultActors, setDefaultActors] = useState([]);\r\n\r\n  // other states\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  // flags\r\n  const [createRequest, setCreateRequest] = useState(false);\r\n\r\n  const fillInputs = (data) => {\r\n    const actorIds = data.organizationalUnits\r\n      .filter((o) => o.type === 0)\r\n      .map((o) => {\r\n        o.id = o.actorId;\r\n        return o;\r\n      });\r\n    const organizationalUnitIds = data.organizationalUnits.filter(\r\n      (o) => o.type === 3\r\n    );\r\n    setValues({\r\n      title: data.title,\r\n      userName: data.userName,\r\n      password: data.password,\r\n      actorIds: actorIds,\r\n      organizationalUnitIds: organizationalUnitIds,\r\n    });\r\n    setDefaultActors(actorIds);\r\n    setDefaultUnits(organizationalUnitIds);\r\n  };\r\n\r\n  const getData = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: OrganizationalUnitAPI.getUnit,\r\n        successStatus: 200,\r\n        successCallback: (res) => fillInputs(res.data),\r\n        requestEnded: (res) => setLoading(false),\r\n      },\r\n      organizationId\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      getData();\r\n    }\r\n  }, []);\r\n\r\n  const handleChange =\r\n    (name, options = {}) =>\r\n    (e) => {\r\n      let value = e.target ? e.target.value : e;\r\n      if (options?.onlyDigits) {\r\n        value = String(value).replace(/\\D/g, \"\");\r\n      }\r\n      setValues({ ...values, [name]: value });\r\n    };\r\n\r\n  const createUnit = () => {\r\n    const actorIds = values.actorIds.map((a) => (a.actorId ? a.actorId : a.id));\r\n    const organizationalUnitIds = values.organizationalUnitIds.map((a) => a.id);\r\n    const payload = {\r\n      id: organizationId,\r\n      title: values.title,\r\n      actorIds,\r\n      organizationalUnitIds,\r\n      userName: values.userName,\r\n      password: values.password,\r\n    };\r\n    setPayload(payload);\r\n    setCreateRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    isEditMode\r\n      ? OrganizationalUnitAPI.updateUnit\r\n      : OrganizationalUnitAPI.createUnit,\r\n    isEditMode ? 204 : 200,\r\n    createRequest,\r\n    payload,\r\n    (res) => {\r\n      setCreateRequest(false);\r\n      const status = isEditMode ? 204 : 200;\r\n      if (res && res.status === status) {\r\n        onSuccess();\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    organizationId\r\n  );\r\n  return (\r\n    <>\r\n      <form className=\"w90 mx-a relative fcc\">\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            wrapperClassName=\"col-md-12\"\r\n            title=\"عنوان\"\r\n            required={false}\r\n            value={values.title}\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n            wrapperClassName=\"w100 mxa\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <MultiSelect\r\n            strings={{ label: \"واحدهای اجرایی\" }}\r\n            caller={OrganizationalUnitAPI.getOrgansActors}\r\n            isStatic={false}\r\n            nameKey=\"title\"\r\n            valueKey={\"id\"}\r\n            maxHeight={300}\r\n            onChange={(values) => handleChange(\"actorIds\")(values)}\r\n            defaultSelecteds={defaultActors}\r\n            isInDialog={true}\r\n            wrapperClassName=\"col-md-12\"\r\n            id=\"organs-list\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <MultiSelect\r\n            strings={{ label: \"واحدهای سازمانی\" }}\r\n            caller={OrganizationalUnitAPI.getAllOrgans}\r\n            isStatic={false}\r\n            nameKey=\"title\"\r\n            valueKey=\"id\"\r\n            maxHeight={300}\r\n            onChange={(values) => handleChange(\"organizationalUnitIds\")(values)}\r\n            defaultSelecteds={defaultUnits}\r\n            isInDialog={true}\r\n            wrapperClassName=\"col-md-12\"\r\n            id=\"organizationalunits-list\"\r\n          />\r\n        </div>\r\n        {!isEditMode && (\r\n          <>\r\n            <div className=\"w100 mxa row\">\r\n              <TextInput\r\n                title=\"نام کاربری\"\r\n                required={false}\r\n                value={values.userName}\r\n                name=\"userName\"\r\n                onChange={handleChange}\r\n                wrapperClassName=\"col-md-12\"\r\n              />\r\n            </div>\r\n            <div className=\"w100 mxa row\">\r\n              <TextInput\r\n                title=\"رمز عبور\"\r\n                required={false}\r\n                value={values.password}\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n                wrapperClassName=\"col-md-12\"\r\n                type=\"password\"\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n      </form>\r\n\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title={isEditMode ? \"ویرایش واحد سازمانی\" : \"ایجاد واحد سازمانی\"}\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={createUnit}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddOrganizationalUnit;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Violations.js",["864","865","866"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { InfoAPI, ViolationAPI } from \"../../apiCalls\";\r\nimport {\r\n  convertserverTimeToDateString,\r\n  doesExist,\r\n  tableLightTheme,\r\n  callAPI,\r\n  defaultFilters,\r\n} from \"../../helperFuncs\";\r\nimport ViolationDialog from \"../commons/dialogs/ViolationDialog\";\r\nimport Button from \"../helpers/Button\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport Tabs from \"../helpers/Tabs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TabLabel from \"../helpers/Tabs/TabLabel\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport ReportDialog from \"../commons/dataDisplay/ReportDialog\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst Violations = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const [reportViolations, setReportViolations] = useState([]);\r\n  const [commentViolations, setCommentViolations] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [dialog, setDialog] = useState(false);\r\n  const [reportDialog, setReportDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n  const [submitLoading, setSubmitLoading] = useState(false);\r\n  const [activeTab, setActiveTab] = useState(\"violation-tab-1\");\r\n\r\n  const queries = {\r\n    page,\r\n    perPage,\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getViolations();\r\n    }\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getViolations();\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [page, perPage, store.filters]);\r\n\r\n  const getViolations = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ViolationAPI.getViolations,\r\n        successCallback: (res) => {\r\n          const reportViolations = res.data.filter((v) => v.reportId);\r\n          const commentViolations = res.data.filter((v) => v.commentId);\r\n          setReportViolations(reportViolations);\r\n          setCommentViolations(commentViolations);\r\n        },\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const openDialog = (row) => {\r\n    modalRoot.classList.add(\"modal-root\");\r\n    setDialog(true);\r\n    setDialogData(row);\r\n  };\r\n\r\n  const openReportDialog = (row) => {\r\n    modalRoot.classList.add(\"modal-root\");\r\n    setReportDialog(true);\r\n    setDialogData(row);\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      name: \"نوع تخلف\",\r\n      cell: (row) => <span>{doesExist(row?.violationType?.title)}</span>,\r\n    },\r\n    {\r\n      name: \"تاریخ\",\r\n      cell: (row) => (\r\n        <span>{doesExist(convertserverTimeToDateString(row?.dateTime))}</span>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const closeDialog = () => {\r\n    setDialog(false);\r\n    setReportDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n  };\r\n\r\n  const onSuccess = () => {\r\n    closeDialog();\r\n    getViolations();\r\n  };\r\n\r\n  const onTabChange = (tabId) => setActiveTab(tabId);\r\n\r\n  const onPageChange = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setPerPage(newPerPage);\r\n  };\r\n\r\n  const renderViolationsHeader = () => {\r\n    return (\r\n      <>\r\n        <Tabs\r\n          mainClass=\"report-tab\"\r\n          activeClass=\"active\"\r\n          onTabChange={onTabChange}\r\n        >\r\n          {tabs.map((tab) => (\r\n            <div\r\n              key={tab.id}\r\n              label={<TabLabel key={tab.id} tab={tab} activeTab={activeTab} />}\r\n              id={tab.id}\r\n            ></div>\r\n          ))}\r\n        </Tabs>\r\n\r\n        <Filters\r\n          filterTypes={{ from: true, to: true, query: true, category: true }}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const tabs = [\r\n    {\r\n      id: \"violation-tab-1\",\r\n      badge: reportViolations.length,\r\n      title: \"گزارش‌ها\",\r\n      data: reportViolations,\r\n    },\r\n    {\r\n      id: \"violation-tab-2\",\r\n      badge: commentViolations.length,\r\n      title: \"نظر‌ها\",\r\n      data: commentViolations,\r\n    },\r\n  ];\r\n\r\n  const tableData = activeTab ? tabs.find((t) => t.id === activeTab)?.data : [];\r\n\r\n  const actions = [\r\n    {\r\n      id: \"violations-1\",\r\n      icon: \"fas fa-search\",\r\n      title: \"بررسی\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n    {\r\n      id: \"violations-2\",\r\n      icon: \"fas fa-eye\",\r\n      title: \"مشاهده گزارش\",\r\n      onClick: (row) => openReportDialog(row),\r\n    },\r\n  ];\r\n\r\n  const total =\r\n    activeTab === \"reports\"\r\n      ? reportViolations.length\r\n      : commentViolations.length;\r\n\r\n  const moreButton = {\r\n    name: \"\",\r\n    cell: (row, index) => (\r\n      <>\r\n        <TableActions\r\n          actions={actions}\r\n          rowData={row}\r\n          index={index}\r\n          total={total}\r\n          perPage={total}\r\n        />\r\n      </>\r\n    ),\r\n  };\r\n  return (\r\n    <>\r\n      <>\r\n        <DialogToggler\r\n          condition={dialog}\r\n          setCondition={setDialog}\r\n          data={dialogData}\r\n          dialogId={dialogData?.id}\r\n          width={500}\r\n          loading={submitLoading}\r\n          id=\"violation-dialog\"\r\n        >\r\n          <ViolationDialog\r\n            dialogData={dialogData}\r\n            onSuccess={onSuccess}\r\n            setLoading={setSubmitLoading}\r\n            type={dialogData.reportId ? \"report\" : \"comment\"}\r\n          />\r\n        </DialogToggler>\r\n\r\n        <TableHeader renderHeader={renderViolationsHeader} />\r\n\r\n        <MyDataTable\r\n          data={tableData}\r\n          columns={[...columns, moreButton]}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          pagination={false}\r\n          totalRows={tableData.length}\r\n          onRowsPageChange={onRowsPageChange}\r\n          onPageChange={onPageChange}\r\n        />\r\n\r\n        <DialogToggler\r\n          condition={reportDialog}\r\n          setCondition={setReportDialog}\r\n          width={800}\r\n          height={650}\r\n          dialogId={dialogData?.id}\r\n          data={dialogData}\r\n          id=\"report-dialog\"\r\n        >\r\n          <ReportDialog\r\n            setDialog={setReportDialog}\r\n            readOnly={true}\r\n            caller={InfoAPI.getReportById}\r\n            childData={{ id: dialogData?.reportId }}\r\n            onNext={closeDialog}\r\n          />\r\n        </DialogToggler>\r\n      </>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Violations;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ViolationDialog.js",["867","868"],"import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ViolationAPI } from \"../../../apiCalls\";\r\nimport { serverError, unKnownError } from \"../../../helperFuncs\";\r\nimport Button from \"../../helpers/Button\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\n\r\nconst ViolationDialog = ({\r\n  dialogData,\r\n  onSuccess = (f) => f,\r\n  setLoading = (f) => f,\r\n  type = \"\",\r\n}) => {\r\n  const [action, setAction] = useState(\"\");\r\n  const [comments, setComments] = useState(\"\");\r\n  const [payload, setPayload] = useState(null);\r\n  const [submitRequest, setSubmitRequest] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (type === \"report\") setComments(dialogData?.report?.comments || \"\");\r\n    if (type === \"comment\") setComments(dialogData?.comment?.text || \"\");\r\n  }, []);\r\n\r\n  const onChange = (e) => {\r\n    const action = e.target.value;\r\n    setAction(action);\r\n  };\r\n\r\n  const handleTextChange = (name) => (e) => {\r\n    const value = e.target.value;\r\n    if (name === \"comments\") setComments(value);\r\n  };\r\n\r\n  const onSubmit = () => {\r\n    if (!action) {\r\n      toast(\"لطفا یکی از اقدامات را انتخاب کنید.\", { type: \"error\" });\r\n      return;\r\n    }\r\n    const payload = {\r\n      violationCheckResult: parseInt(action),\r\n      comments,\r\n      id: dialogData?.id,\r\n    };\r\n    setLoading(true);\r\n    setPayload(payload);\r\n    setSubmitRequest(true);\r\n  };\r\n\r\n  const [] = useMakeRequest(\r\n    ViolationAPI.handleViolation,\r\n    204,\r\n    submitRequest,\r\n    payload,\r\n    (res) => {\r\n      setSubmitRequest(false);\r\n      setLoading(false);\r\n      if (res && res.status === 204) {\r\n        toast(\"گزارش تخلف با موفقیت بررسی شد.\", { type: \"success\" });\r\n        onSuccess();\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    dialogData?.id\r\n  );\r\n  return (\r\n    <>\r\n      <div className=\"w90 mxa my2 fcc\">\r\n        <div className=\"f2 text-dark\">توضیحات</div>\r\n        <div className=\"f15 text-dark w100 border-mute py1 px1\">\r\n          {dialogData.description\r\n            ? dialogData.description\r\n            : \"توضیحی ثبت نشده است.\"}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"w90 mxa fcs py1 px1\">\r\n        <div className=\"w100 my1 frs\">\r\n          <input\r\n            type=\"radio\"\r\n            className=\"text-dark ml1\"\r\n            name=\"action\"\r\n            onChange={onChange}\r\n            value={\"0\"}\r\n            checked={action === \"0\"}\r\n          />\r\n          <label className=\"f12\">علامت‌گذاری به عنوان خوانده شده</label>\r\n        </div>\r\n        <div className=\"w100 my1 frs\">\r\n          <input\r\n            type=\"radio\"\r\n            className=\"text-dark ml1\"\r\n            name=\"action\"\r\n            onChange={onChange}\r\n            value={\"1\"}\r\n            checked={action === \"1\"}\r\n          />\r\n          <label className=\"f12\">حذف</label>\r\n        </div>\r\n        <div className=\"w100 my1 frs\">\r\n          <input\r\n            type=\"radio\"\r\n            className=\"text-dark ml1\"\r\n            name=\"action\"\r\n            onChange={onChange}\r\n            value={\"2\"}\r\n            checked={action === \"2\"}\r\n          />\r\n          <label className=\"f12\">ویرایش</label>\r\n        </div>\r\n      </div>\r\n\r\n      {action === \"2\" && (\r\n        <div className=\"w90 mxa\">\r\n          <Textarea\r\n            wrapperClassName=\"w100\"\r\n            inputClassName=\"w100 mxa border-light br1 no-outline\"\r\n            inputStyle={{ minHeight: 100 }}\r\n            value={comments}\r\n            name=\"comments\"\r\n            handleChange={handleTextChange}\r\n            defaultStyles={false}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"w90 mxa frc my2\">\r\n        <Button title=\"ثبت\" className=\"w100 mxa\" onClick={onSubmit} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViolationDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\NavigatableDialog.js",["869","870","871","872"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Portal } from \"react-portal\";\r\nimport styles from \"../../stylesheets/dialog.module.css\";\r\nimport Loader from \"./Loader\";\r\nimport useClick from \"../hooks/useClick\";\r\nimport useAddLisener from \"../hooks/useAddLisener\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\nconst pageRoot = document && document.getElementById(\"content\");\r\nconst Toastify = document && document.querySelector(\"Toastify\");\r\nconst multiSelectWrapper =\r\n  document && document.getElementById(\"modal-selectlist\");\r\n\r\nconst NavigatableDialog = ({\r\n  condition,\r\n  setCondition,\r\n  data,\r\n  width = 400,\r\n  height,\r\n  isUnique = true,\r\n  loading = false,\r\n  outSideClick = true,\r\n  fixedDimension = true,\r\n  list = [],\r\n  childProps,\r\n  Child,\r\n  id = \"\",\r\n}) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const dialogRef = useRef(null);\r\n  const dataRef = useRef(null);\r\n  const isOnTopRef = useRef(null);\r\n  const modalLengthRef = useRef(null);\r\n\r\n  const [isShowing, setIsShowing] = useState(\"d-none\");\r\n  const [currentData, setCurrentData] = useState(null);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [isOnTop, setIsInTop] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (condition) {\r\n      handleData();\r\n      showDialog();\r\n    } else {\r\n      hideDialog();\r\n    }\r\n  }, [condition]);\r\n\r\n  const [isClicked, setIsClicked] = useClick(dialogRef, \"click\", [\r\n    // {\r\n    //   current: multiSelectWrapper,\r\n    // },\r\n    {\r\n      current: Toastify,\r\n    },\r\n  ]);\r\n\r\n  const addClassNames = () => {\r\n    pageRoot.classList.add(\"modal\");\r\n    document.body.style.overflowY = \"hidden\";\r\n  };\r\n\r\n  const removeClassNames = () => {\r\n    pageRoot.classList.remove(\"modal\");\r\n    document.body.style.overflowY = \"auto\";\r\n  };\r\n\r\n  const handleData = () => {\r\n    setCurrentData(data);\r\n    const currentIndex = list.findIndex((d) => d.id === data.id);\r\n    setCurrentIndex(currentIndex + 1);\r\n    dataRef.current = data;\r\n  };\r\n\r\n  const showDialog = () => {\r\n    modalRoot.classList.add(\"active\");\r\n    setIsClicked(true);\r\n    setIsShowing(\"fcs\");\r\n    addClassNames();\r\n    setTimeout(() => {\r\n      setIsShowing(\"fcs slidein\");\r\n    }, 50);\r\n    dispatch({\r\n      type: \"setModals\",\r\n      payload: [...store.modals, { id, index: store.modals.length + 1 }],\r\n    });\r\n  };\r\n\r\n  const hideDialog = () => {\r\n    setIsShowing(\"hide\");\r\n    removeClassNames();\r\n    setTimeout(() => {\r\n      setIsShowing(\"d-none\");\r\n      modalRoot.classList.remove(\"active\");\r\n    }, 50);\r\n    const newModals = store.modals.filter((m) => m.id !== id);\r\n    dispatch({\r\n      type: \"setModals\",\r\n      payload: newModals,\r\n    });\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    if (modalRoot.children.length === 2) {\r\n      modalRoot.classList.remove(\"active\");\r\n    }\r\n    setCondition(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (outSideClick) {\r\n      if (isClicked) {\r\n        modalRoot.classList.add(\"active\");\r\n        setCondition(true);\r\n      } else {\r\n        if (isOnTop) {\r\n          setCondition(false);\r\n          if (modalRoot.children.length === 1) {\r\n            modalRoot.classList.remove(\"active\");\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [isClicked]);\r\n\r\n  useEffect(() => {\r\n    const isOnTop =\r\n      store.modals.find((m) => m.id === id)?.index === store.modals.length;\r\n    setIsInTop(isOnTop);\r\n    setIsClicked(isOnTop);\r\n    isOnTopRef.current = isOnTop;\r\n    modalLengthRef.current = store.modals.length;\r\n  }, [store.modals]);\r\n\r\n  const onEscape = () => {\r\n    if (isOnTopRef.current) {\r\n      setCondition(false);\r\n      if (modalLengthRef.current === 1) {\r\n        setIsShowing(\"hide\");\r\n        removeClassNames();\r\n        modalRoot.classList.remove(\"active\");\r\n        setIsShowing(\"d-none\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const onRightKey = (e, refer = false) => {\r\n    if (e) e.stopPropagation();\r\n\r\n    const currentIndex = list.findIndex((d) => d.id === dataRef.current?.id);\r\n    const nextIndex = currentIndex + 1;\r\n    const next = list[nextIndex];\r\n    if (!next) closeDialog();\r\n    setCurrentData(next);\r\n    if (!refer) setCurrentIndex(nextIndex + 1);\r\n    dataRef.current = next;\r\n  };\r\n\r\n  const onLeftKey = (e) => {\r\n    if (e) e.stopPropagation();\r\n\r\n    const currentIndex = list.findIndex((d) => d.id === dataRef.current?.id);\r\n    const prevIndex = currentIndex - 1;\r\n    const prev = list[prevIndex];\r\n    if (!prev) closeDialog();\r\n    setCurrentData(prev);\r\n    setCurrentIndex(prevIndex + 1);\r\n    dataRef.current = prev;\r\n  };\r\n\r\n  useAddLisener({\r\n    ref: \"window\",\r\n    listenTo: \"keydown\",\r\n    condition: condition,\r\n    callback: (ref, event) => {\r\n      if (event.type === \"keydown\" && event.keyCode === 27) onEscape();\r\n      if (event.type === \"keydown\" && event.keyCode === 39) onRightKey(event);\r\n      if (event.type === \"keydown\" && event.keyCode === 37) onLeftKey(event);\r\n    },\r\n  });\r\n\r\n  const container = fixedDimension\r\n    ? {\r\n        maxWidth: width + \"px\",\r\n        width: \"100%\",\r\n        maxHeight: height ? height + \"px\" : \"auto\",\r\n        height: height ? \"100%\" : \"auto\",\r\n      }\r\n    : {};\r\n\r\n  const createContent = () => {\r\n    return (\r\n      <div className={styles.dialog}>\r\n        <div\r\n          className={styles.nextBtn}\r\n          onClick={(e) => {\r\n            e.stopPropagation();\r\n            onRightKey();\r\n          }}\r\n        >\r\n          <i className=\"fas fa-angle-right\"></i>\r\n        </div>\r\n        <div className={styles.prevBtn} onClick={onLeftKey}>\r\n          <i className=\"fas fa-angle-left\"></i>\r\n        </div>\r\n        <div className={styles.index}>\r\n          <span className=\"text-white\">\r\n            {list.length} / {currentIndex}\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={[styles.dialogContainer, isShowing].join(\" \")}\r\n          style={container}\r\n          ref={dialogRef}\r\n        >\r\n          {loading && <Loader absolute={true} />}\r\n          <div className={styles.dialogClose}>\r\n            <span className={styles.dialogCloseIcon} onClick={closeDialog}>\r\n              <i className=\"fas fa-times\"></i>\r\n            </span>\r\n          </div>\r\n          <Child\r\n            {...childProps}\r\n            childData={currentData}\r\n            onNext={onRightKey}\r\n            onPrev={onLeftKey}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return isUnique\r\n    ? condition && <Portal node={modalRoot}>{createContent()}</Portal>\r\n    : condition && <Portal node={modalRoot}>{createContent()}</Portal>;\r\n};\r\n\r\nNavigatableDialog.propTypes = {\r\n  condition: PropTypes.bool,\r\n  setCondition: PropTypes.func,\r\n  children: PropTypes.instanceOf(Object),\r\n  width: PropTypes.number,\r\n  height: PropTypes.number,\r\n};\r\n\r\nexport default React.memo(NavigatableDialog);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\RegionsDialog.js",["873"],"import React, { useEffect, useState } from \"react\";\r\nimport { AuthenticateAPI, CommonAPI, UserInfoAPI } from \"../../../apiCalls\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport { getAuthToken, serverError, unKnownError } from \"../../../helperFuncs\";\r\nimport Button from \"../../helpers/Button\";\r\nimport { toast } from \"react-toastify\";\r\nimport CheckBoxGroup from \"../../helpers/CheckBox/CheckBoxGroup\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst RolesDialog = ({ userId, setCondition }) => {\r\n  const [regions, setRegions] = useState([]);\r\n  const [makeRequest, setMakeRequest] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  const handleRegionChange = (items = []) => {\r\n    const newRegions = regions.map((region) => ({\r\n      ...region,\r\n      selected: items.findIndex((item) => item === region.id) !== -1,\r\n    }));\r\n    setRegions(newRegions);\r\n  };\r\n\r\n  const saveRegions = (e) => {\r\n    const regionIds = regions.filter((r) => r.selected).map((r) => r.id);\r\n    const payload = {\r\n      regionIds,\r\n      id: userId,\r\n    };\r\n    setPayload(payload);\r\n    setMakeRequest(true);\r\n  };\r\n\r\n  const getNeccessaryData = () => {\r\n    const regionsPromise = new Promise((resolve, reject) => {\r\n      const token = getAuthToken();\r\n      return CommonAPI.getYazdRegions(token).then((res) => {\r\n        if (res && res.status === 200) resolve(res.data);\r\n        else if (serverError(res)) {\r\n          reject([]);\r\n          return;\r\n        } else if (unKnownError(res)) {\r\n          reject([]);\r\n          return;\r\n        }\r\n      });\r\n    });\r\n    const userRegionsPromise = new Promise((resolve, reject) => {\r\n      const token = getAuthToken();\r\n      return AuthenticateAPI.getuserRegions(token, userId).then((res) => {\r\n        if (res && res.status === 200) resolve(res.data);\r\n        else if (serverError(res)) {\r\n          reject([]);\r\n          return;\r\n        } else if (unKnownError(res)) {\r\n          reject([]);\r\n          return;\r\n        }\r\n      });\r\n    });\r\n\r\n    return Promise.all([regionsPromise, userRegionsPromise]);\r\n  };\r\n\r\n  const handleData = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const res = await getNeccessaryData();\r\n      let regions = res[0];\r\n      regions.forEach((region) => {\r\n        const exists = res[1].find((r) => r === region.id);\r\n        if (exists) region.selected = true;\r\n        else region.selected = false;\r\n      });\r\n      setRegions(regions);\r\n      setLoading(false);\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setCondition(false);\r\n      modalRoot.classList.remove(\"active\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleData();\r\n  }, []);\r\n\r\n  const [, saveLoading] = useMakeRequest(\r\n    UserInfoAPI.saveUserRegions,\r\n    204,\r\n    makeRequest,\r\n    payload,\r\n    (res) => {\r\n      setMakeRequest(false);\r\n      setCondition(false);\r\n      modalRoot.classList.remove(\"active\");\r\n      if (res.status === 204) {\r\n        toast(\"تغییرات با موفقیت ذخیره شد.\", { type: \"success\" });\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    userId\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div className=\"w100 h100 relative fcc bg-white\">\r\n          <Loader absolute />\r\n        </div>\r\n      )}\r\n      <CheckBoxGroup\r\n        items={regions.map((region) => ({\r\n          id: region.id,\r\n          label: region.name,\r\n          checked: region.selected,\r\n          wrapperClassName: \"w30 d-flex al-c ju-s my1\",\r\n          labelClassName: \"f12 my05\",\r\n        }))}\r\n        onChange={handleRegionChange}\r\n        wrapperClassName=\"px1 mh100\"\r\n        title=\"نقش‌ها\"\r\n      />\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title=\"ذخیره تغییرات\"\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={saveRegions}\r\n          loading={saveLoading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RolesDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Logo.js",["874"],"import React from \"react\";\r\n\r\nconst style = {\r\n  width: \"auto\",\r\n  height: \"50px\",\r\n};\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <>\r\n      <img\r\n        src={\r\n          require(`../../../assets/Images/${process.env.REACT_APP_LOGO}`)\r\n            .default\r\n        }\r\n        style={style}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Logo;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\QuickAccess.js",["875","876"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { QuickAccessAPI } from \"../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  defaultFilters,\r\n  fixDigit,\r\n  tableLightTheme,\r\n} from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport Avatar from \"../commons/dataDisplay/Avatar\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport AddQuickAccessDialog from \"../commons/dialogs/AddQuickAccessDialog\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst QuickAccess = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // others\r\n  const [dialogData, setDialogData] = useState(null);\r\n\r\n  //   flags\r\n  const [addAccessDialog, setAddAccessDialog] = useState(false);\r\n  const [createLoading, setCreateLoading] = useState(false);\r\n  const [mode, setMode] = useState(\"create\");\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const queries = {\r\n    ...store.filters,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getPolls();\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getPolls();\r\n  }, [store.filters]);\r\n\r\n  const getPolls = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: QuickAccessAPI.getAccesses,\r\n        successCallback: (res) => setData(res.data),\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  //   open category details dialog\r\n  const openDialog = (access, mode = \"create\") => {\r\n    setMode(mode);\r\n    setDialogData(access);\r\n    setAddAccessDialog(true);\r\n  };\r\n\r\n  const onAccessCreated = () => {\r\n    toast(\"دسترسی جدید با موفقیت اضافه شد.\", { type: \"success\" });\r\n    setAddAccessDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getPolls();\r\n  };\r\n\r\n  const deleteAccess = (accessId) => {\r\n    setLoading(true);\r\n    callAPI({\r\n      caller: QuickAccessAPI.deleteAccess,\r\n      successStatus: 204,\r\n      payload: accessId,\r\n      successCallback: () => {\r\n        toast(\"عملیات با موفقیت انجام شد.\", { type: \"success\" });\r\n        getPolls();\r\n      },\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف دسترسی‌سریع\"\r\n          icon=\"fas fa-star\"\r\n          onClick={() => openDialog(null, \"create\")}\r\n        />\r\n        <Filters filterTypes={{ query: true }} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `quickaccess-1`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => openDialog(row, \"edit\"),\r\n    },\r\n    {\r\n      id: `quickaccess-2`,\r\n      title: (row) => (row.isDeleted ? \"بازیابی\" : \"حذف\"),\r\n      icon: (row) => (row.isDeleted ? \"fas fa-times\" : \"fas fa-recycle\"),\r\n      onClick: (row) => deleteAccess(row.id),\r\n    },\r\n  ];\r\n\r\n  //   table columns\r\n  const columns = [\r\n    {\r\n      name: \"تصویر\",\r\n      cell: (row) => (\r\n        <Avatar url={row?.media?.url3} placeholder={!row?.media?.url3} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"عنوان\",\r\n      cell: (row) => <span className=\"text-right\">{fixDigit(row.title)}</span>,\r\n    },\r\n    {\r\n      name: \"ترتیب\",\r\n      cell: (row) => <span className=\"text-right\">{fixDigit(row.order)}</span>,\r\n    },\r\n    {\r\n      name: \"عملیات\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            total={data.length}\r\n            perPage={data.length}\r\n            rowData={row}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const condStyle = [\r\n    {\r\n      when: (row) => row?.isDeleted,\r\n      style: {\r\n        backgroundColor: \"#ddd\",\r\n        color: \"#333\",\r\n      },\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={columns}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          pagination={false}\r\n          conditionalRowStyles={condStyle}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      <DialogToggler\r\n        condition={addAccessDialog}\r\n        setCondition={setAddAccessDialog}\r\n        width={500}\r\n        isUnique={false}\r\n        loading={createLoading}\r\n        id=\"add-quickaccess-dialog\"\r\n      >\r\n        <AddQuickAccessDialog\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onAccessCreated}\r\n          mode={mode}\r\n          accessId={dialogData?.id}\r\n          defaltValues={dialogData}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuickAccess;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Mode\\Mode.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\TableActions.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\EditReportDialog.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\IsIdentityVisible.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\Charts\\BarChart.js",["877"],"import React, { useContext } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { formatLabel, randomColor } from \"../../../helperFuncs\";\r\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\n\r\nconst COLORS = [\r\n  \"#fbe33f\",\r\n  \"#70c68e\",\r\n  \"#f68d46\",\r\n  \"#90908e\",\r\n  \"#6bacf4\",\r\n  \"#2a9d8f\",\r\n  \"#03071e\",\r\n  \"#c77dff\",\r\n  \"#90be6d\",\r\n  \"#70e000\",\r\n];\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  ChartDataLabels\r\n);\r\nChartJS.defaults.font.family = \"iranyekan\";\r\n\r\nconst BarChart = ({\r\n  chartData = [],\r\n  chartTitle,\r\n  isHorizontal = true,\r\n  height,\r\n  width,\r\n}) => {\r\n  const [store] = useContext(AppStore);\r\n\r\n  const labels = chartData.series.map((d) => formatLabel(d.title, 30));\r\n\r\n  // configs\r\n  const defaultOptions = {\r\n    indexAxis: \"y\",\r\n    plugins: {\r\n      title: {\r\n        display: true,\r\n        text: \"\",\r\n      },\r\n      datalabels: {\r\n        display: true,\r\n        color: \"#000\",\r\n        align: \"end\",\r\n        anchor: \"end\",\r\n        offset: 80,\r\n        // rotation: 30,\r\n        font: { size: \"12\" },\r\n        formatter: function (value, context, index) {\r\n          return value === \"0\"\r\n            ? \"\"\r\n            : context.dataset.customLabel[context.dataIndex];\r\n        },\r\n      },\r\n      legend: {\r\n        labels: {\r\n          // This more specific font property overrides the global property\r\n          font: {\r\n            size: 14,\r\n            family: \"iranyekan\",\r\n          },\r\n        },\r\n      },\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: true,\r\n    scales: {\r\n      x: {\r\n        stacked: false,\r\n        suggestedMax:\r\n          Math.max(\r\n            ...chartData.series.map((l, j) => {\r\n              return Math.max(...l.values.map((v) => v.item2));\r\n            })\r\n          ) * 1.2,\r\n      },\r\n      y: {\r\n        stacked: false,\r\n      },\r\n    },\r\n    barThickness: 20,\r\n  };\r\n  const options = defaultOptions;\r\n  options.plugins.title.text = chartTitle;\r\n  options.indexAxis = isHorizontal ? \"y\" : \"x\";\r\n\r\n  const data = {\r\n    labels,\r\n    datasets:\r\n      chartData.series.length > 0\r\n        ? chartData.series[0].values.map((value, i) => {\r\n            return {\r\n              label: value.item1,\r\n              data: labels.map((l, j) => {\r\n                return chartData.series[j].values.find(\r\n                  (v) => v.item1 === value.item1\r\n                ).item2;\r\n              }),\r\n              backgroundColor: COLORS[i] || randomColor(),\r\n              customLabel: labels.map((l, j) => {\r\n                return chartData.series[j].values.find(\r\n                  (v) => v.item1 === value.item1\r\n                ).item3;\r\n              }),\r\n            };\r\n          })\r\n        : [],\r\n  };\r\n\r\n  console.log(defaultOptions);\r\n  return (\r\n    <>\r\n      <Bar\r\n        options={options}\r\n        data={data}\r\n        width={width}\r\n        height={height}\r\n        style={{}}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(BarChart);\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\Charts\\PieChart.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useResize.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\MoreDetails.js",["878"],"import React from \"react\";\r\nimport { convertserverTimeToDateString, doesExist } from \"../../../helperFuncs\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport ShowAttachments from \"./ShowAttachments\";\r\n\r\nconst MoreDetails = ({ data }) => {\r\n  return (\r\n    <>\r\n      <section className={styles.reportDetails}>\r\n        <div className={styles.infoList}>\r\n          <div className=\"w90 mxa frc wrap\">\r\n            <TextInput\r\n              value={convertserverTimeToDateString(data?.report?.sent)}\r\n              readOnly={true}\r\n              title=\"تاریخ ایجاد\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n            <TextInput\r\n              value={convertserverTimeToDateString(data?.report?.deadline)}\r\n              readOnly={true}\r\n              title=\"زمان اتمام\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n          </div>\r\n          <div className=\"w90 mxa frc wrap\">\r\n            <TextInput\r\n              value={convertserverTimeToDateString(\r\n                data?.report?.responseDeadline\r\n              )}\r\n              readOnly={true}\r\n              title=\"زمان پاسخگویی\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n            <TextInput\r\n              value={doesExist(data?.report?.rating)}\r\n              readOnly={true}\r\n              title=\"امتیاز شهروند\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n          </div>\r\n          <div className=\"w90 mxa frc wrap\">\r\n            <TextInput\r\n              value={doesExist(data?.report?.visibility === 0 ? \"عمومی\" : \"خصوصی\")}\r\n              readOnly={true}\r\n              title=\"وضعیت انتشار\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n            <TextInput\r\n              value={doesExist(\r\n                data?.report?.isIdentityVisible ? \"قابل رویت\" : \"مخفی\"\r\n              )}\r\n              readOnly={true}\r\n              title=\"اطلاعات هویتی شهروند\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n          </div>\r\n          <div className=\"w90 mxa frc wrap\">\r\n            <TextInput\r\n              value={doesExist(data?.report?.likes)}\r\n              readOnly={true}\r\n              title=\"تعداد پسند‌ها\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n            <TextInput\r\n              value={doesExist(data?.report?.commentsCount)}\r\n              readOnly={true}\r\n              title=\"تعداد نظر‌ها\"\r\n              wrapperClassName=\"mxa flex-1\"\r\n              inputClassName=\"\"\r\n              required={false}\r\n            />\r\n          </div>\r\n          <div className={\"px1 py1 w90 mxa d-flex fdc al-s ju-c relative\"}>\r\n            <label\r\n              className={\r\n                \"text-color f15 mr2 w-auto text-right mb-1 d-flex z1 bg-color px1\"\r\n              }\r\n            >\r\n              پیوست ها{\" \"}\r\n            </label>\r\n            <hr className=\"w100 border-t-light\" />\r\n            <ShowAttachments medias={data?.report?.medias} isDeletable={false} />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MoreDetails;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddQuickAccessDialog.js",["879","880","881","882"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { ConfigurationsAPI, QuickAccessAPI } from \"../../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  fixURL,\r\n  serverError,\r\n  unKnownError,\r\n} from \"../../../helperFuncs\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport styles from \"../../../stylesheets/reportdialog.module.css\";\r\nimport Button from \"../../helpers/Button\";\r\n\r\nconst AddQuickAccessDialog = ({\r\n  setLoading = (f) => f,\r\n  onSuccess = (f) => f,\r\n  mode = \"create\",\r\n  defaltValues,\r\n  accessId,\r\n}) => {\r\n  const isEditMode = mode === \"edit\";\r\n\r\n  const parentId = useRef(null);\r\n  const fileInputRef = useRef(null);\r\n  const previewRef = useRef(null);\r\n\r\n  // data states\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    order: \"\",\r\n  });\r\n  const [image, setImage] = useState(null);\r\n\r\n  // other states\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  // flags\r\n  const [createRequest, setCreateRequest] = useState(false);\r\n  const [preview, setPreview] = useState(false);\r\n\r\n  const fillInputs = (data) => {\r\n    parentId.current = data?.categoryId;\r\n    setValues({\r\n      title: data?.title,\r\n      order: data?.order,\r\n    });\r\n    previewRef.current.src = fixURL(data?.media?.url3, false);\r\n    setPreview(true);\r\n    setImage(data?.media?.url3);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      fillInputs(defaltValues);\r\n    }\r\n  }, []);\r\n\r\n  const handleChange = (name, onlyDigit) => (e) => {\r\n    let value = e.target ? e.target.value : e;\r\n    if (onlyDigit) {\r\n      value = String(value).replace(/\\D/g, \"\");\r\n    }\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const handleImageChange = (e) => {\r\n    if (!e.target.files[0]) return;\r\n    const file = e.target.files[0];\r\n\r\n    setImage(file);\r\n    showPreview(file);\r\n  };\r\n\r\n  const showPreview = (image) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n      previewRef.current.src = reader.result;\r\n      setPreview(true);\r\n    };\r\n\r\n    reader.readAsDataURL(image);\r\n  };\r\n\r\n  const clearPreview = (e) => {\r\n    if (e) e.stopPropagation();\r\n    setImage(null);\r\n    setPreview(false);\r\n  };\r\n\r\n  const createAccess = () => {\r\n    const payload = new FormData();\r\n    payload.append(\"title\", values.title);\r\n    payload.append(\"order\", values.order);\r\n    payload.append(\"categoryId\", parentId.current);\r\n    payload.append(\"image\", image);\r\n    setPayload(payload);\r\n    setCreateRequest(true);\r\n  };\r\n\r\n  const onParentChange = (value) => {\r\n    parentId.current = value && value[0]?.id;\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    isEditMode ? QuickAccessAPI.editAccess : QuickAccessAPI.createAccess,\r\n    isEditMode ? 204 : 201,\r\n    createRequest,\r\n    payload,\r\n    (res) => {\r\n      setCreateRequest(false);\r\n      const status = isEditMode ? 204 : 201;\r\n      if (res && res.status === status) {\r\n        onSuccess();\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    accessId\r\n  );\r\n  return (\r\n    <>\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        className=\"d-none\"\r\n        onChange={handleImageChange}\r\n      />\r\n\r\n      <section className=\"w90 mxa fcc\">\r\n        <div className=\"w100 mxa row\">\r\n          <MultiSelect\r\n            strings={{ label: \"دسته‌بندی\" }}\r\n            caller={ConfigurationsAPI.getCategories}\r\n            isStatic={false}\r\n            nameKey=\"title\"\r\n            valueKey=\"id\"\r\n            maxHeight={200}\r\n            singleSelect={true}\r\n            onChange={onParentChange}\r\n            defaultSelecteds={\r\n              defaltValues?.categoryId ? [{ id: defaltValues?.categoryId }] : []\r\n            }\r\n            wrapperClassName=\"col-md-12\"\r\n            id=\"categories\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            title=\"عنوان\"\r\n            required={false}\r\n            value={values.title}\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n            wrapperClassName=\"col-md-12\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            title=\"ترتیب\"\r\n            required={false}\r\n            value={values.order}\r\n            name=\"order\"\r\n            onChange={handleChange}\r\n            wrapperClassName=\"col-md-12\"\r\n            onlyDigit={true}\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            title=\"تصویر\"\r\n            required={false}\r\n            name=\"image\"\r\n            onClick={() => fileInputRef.current.click()}\r\n            wrapperClassName=\"col-md-12\"\r\n            inputClassName=\"pointer\"\r\n            readOnly={true}\r\n            placeholder=\"انتخاب کنید.\"\r\n            icon={image ? \"fas fa-times\" : \"\"}\r\n            onIconClick={clearPreview}\r\n          />\r\n        </div>\r\n        <img\r\n          className={`sq75 border-mute br1 f3 my1 text-mute ${\r\n            preview ? \"frc\" : \"d-none\"\r\n          }`}\r\n          ref={previewRef}\r\n        />\r\n        {!preview && (\r\n          <span className=\"sq75 border-mute br1 f3 frc my1 text-mute\">\r\n            <i className=\"fas fa-image\"></i>\r\n          </span>\r\n        )}\r\n      </section>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title={isEditMode ? \"ویرایش\" : \"ایجاد\"}\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={createAccess}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddQuickAccessDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ChangePasswordDialog.js",["883"],"import React, { useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { AuthenticateAPI } from \"../../../apiCalls\";\r\nimport { serverError, unKnownError, checkPassword } from \"../../../helperFuncs\";\r\nimport Button from \"../../helpers/Button\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst { errorMessage } = checkPassword(\"\");\r\n\r\nconst ChangePasswordDialog = ({ id, setCondition, type = 1 }) => {\r\n  const [password, setPassword] = useState(\"\");\r\n  const [oldPassword, setOldPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [payload, setPayload] = useState(undefined);\r\n  const [makeRequest, setMakeRequest] = useState(false);\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleChange = (name) => (e) => {\r\n    let value = e.target.value;\r\n    if (name === \"password\") {\r\n      const { isValid } = checkPassword(value);\r\n      setErrors({ password: !isValid });\r\n      setPassword(e.target.value);\r\n    }\r\n    if (name === \"oldPassword\") {\r\n      setOldPassword(e.target.value);\r\n    }\r\n    if (name === \"confirmPassword\") {\r\n      setConfirmPassword(e.target.value);\r\n    }\r\n  };\r\n\r\n  const changePassword = (e) => {\r\n    if (!password && !oldPassword) {\r\n      toast(\"رمز عبور سابق و جدید خود را وارد نمایید.\", { type: \"error\" });\r\n      return;\r\n    }\r\n    if (password !== confirmPassword) {\r\n      toast(\"رمز عبور و تکرار آن مطابقت ندارند.\", { type: \"error\" });\r\n      return;\r\n    }\r\n    const { isValid } = checkPassword(password);\r\n    if (!isValid) {\r\n      toast(errorMessage, { type: \"error\" });\r\n      return;\r\n    }\r\n    const payload = { newPassword: password };\r\n    if (type === 2) payload[\"oldPassword\"] = oldPassword;\r\n    setPayload(payload);\r\n    setMakeRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    type === 1 ? AuthenticateAPI.resetPassword : AuthenticateAPI.changePassword,\r\n    204,\r\n    makeRequest,\r\n    payload,\r\n    (res) => {\r\n      setMakeRequest(false);\r\n      setCondition(false);\r\n      modalRoot.classList.remove(\"active\");\r\n      if (res.status === 204) {\r\n        toast(\"رمز عبور با موفقیت تنظیم شد.\", { type: \"success\" });\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    id\r\n  );\r\n  return (\r\n    <>\r\n      <div style={{ width: 350 }} className=\"fcc py2\">\r\n        {type === 2 && (\r\n          <TextInput\r\n            name=\"oldPassword\"\r\n            value={oldPassword}\r\n            onChange={handleChange}\r\n            title=\"رمز عبور سابق\"\r\n            wrapperClassName=\"rw3\"\r\n            type=\"password\"\r\n          />\r\n        )}\r\n        <TextInput\r\n          name=\"password\"\r\n          value={password}\r\n          onChange={handleChange}\r\n          title=\"رمز عبور جدید\"\r\n          wrapperClassName=\"rw3\"\r\n          type=\"password\"\r\n          isValid={!errors.password}\r\n          errorMessage={errorMessage}\r\n        />\r\n        <TextInput\r\n          name=\"confirmPassword\"\r\n          value={confirmPassword}\r\n          onChange={handleChange}\r\n          title=\" تکرار رمز عبور جدید\"\r\n          wrapperClassName=\"rw3\"\r\n          type=\"password\"\r\n        />\r\n      </div>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title=\"ذخیره\"\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={changePassword}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChangePasswordDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Radio\\Radio.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\CreatePoll.js",["884","885","886","887","888","889"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { PollAPI } from \"../../apiCalls\";\r\nimport {\r\n  constants,\r\n  getFromLocalStorage,\r\n  initialSteps,\r\n  pollTypes,\r\n} from \"../../helperFuncs\";\r\nimport Button from \"../helpers/Button\";\r\nimport EditorContainer from \"../helpers/EditorContainer\";\r\nimport Loader from \"../helpers/Loader\";\r\nimport useMakeRequest from \"../hooks/useMakeRequest\";\r\nimport styles from \"../../stylesheets/polls.module.css\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { Fragment } from \"react\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\n\r\nconst CreatePoll = ({ onPollCreated = (f) => f, pollData }) => {\r\n  const [store] = useContext(AppStore);\r\n\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [pollTitle, setPollTitle] = useState(\"\");\r\n  const [pollQuestion, setPollQuestion] = useState(\"\");\r\n  const [pollAnswers, setPollAnswers] = useState([]);\r\n  const [pollId, setPollId] = useState(null);\r\n  const [pollType, setPollType] = useState(0);\r\n  const [tempContent, setTempContent] = useState(\"\");\r\n  const [editor, setEditor] = useState(false);\r\n  const [input, setInput] = useState(false);\r\n  const [radio, setRadio] = useState(false);\r\n  const [button, setButton] = useState(false);\r\n  const [payload, setPayload] = useState(undefined);\r\n  const [publishRequest, setPublishRequest] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isEditing, setIsEditing] = useState({ id: null, bool: false });\r\n  const [steps, setSteps] = useState(initialSteps);\r\n  const [mode, setMode] = useState(\"create\");\r\n\r\n  useEffect(() => {\r\n    if (pollData) {\r\n      setMode(\"edit\");\r\n      initializePoll(pollData);\r\n    } else {\r\n      setSteps([\r\n        {\r\n          id: 1,\r\n          title: \"نوع نظرسنجی را انتخاب نمایید.\",\r\n          type: \"radio\",\r\n          finished: false,\r\n          role: \"\",\r\n          writable: true,\r\n        },\r\n        {\r\n          id: 2,\r\n          title: \"عنوان نظر سنجی را وارد نمایید.\",\r\n          type: \"input\",\r\n          finished: false,\r\n          role: \"\",\r\n          writable: true,\r\n        },\r\n        {\r\n          id: 3,\r\n          title: \"سوال نظرسنجی را اینجا وارد نمایید.\",\r\n          type: \"editor\",\r\n          finished: false,\r\n          role: \"question\",\r\n          writable: true,\r\n        },\r\n        {\r\n          id: 4,\r\n          title: \"گزینه نظرسنجی را اینجا وارد نمایید.\",\r\n          type: \"editor\",\r\n          finished: false,\r\n          role: \"answer\",\r\n          writable: true,\r\n          shortTitle: \"\",\r\n        },\r\n      ]);\r\n      setMode(\"create\");\r\n    }\r\n  }, []);\r\n\r\n  const initializePoll = (data) => {\r\n    const steps = [\r\n      {\r\n        id: 1,\r\n        title: \"نوع نظرسنجی را انتخاب نمایید.\",\r\n        type: \"radio\",\r\n        finished: false,\r\n        role: \"\",\r\n        writable: true,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"عنوان نظر سنجی را وارد نمایید.\",\r\n        type: \"input\",\r\n        finished: true,\r\n        role: \"\",\r\n        writable: false,\r\n      },\r\n    ];\r\n    steps.push({\r\n      id: 3,\r\n      title: \"سوال نظرسنجی را اینجا وارد نمایید.\",\r\n      type: \"editor\",\r\n      finished: true,\r\n      role: \"question\",\r\n      writable: false,\r\n    });\r\n    data.choices.map((choice, i) => {\r\n      steps.push({\r\n        id: i + 4,\r\n        title: \"گزینه نظرسنجی را اینجا وارد نمایید.\",\r\n        type: \"editor\",\r\n        finished: true,\r\n        role: \"answer\",\r\n        writable: false,\r\n        shortTitle: choice.shortTitle,\r\n      });\r\n    });\r\n    steps.push(\r\n      {\r\n        id: steps.length + 1,\r\n        title: \"گزینه نظرسنجی را اینجا وارد نمایید.\",\r\n        type: \"editor\",\r\n        role: \"answer\",\r\n        finished: false,\r\n        writable: true,\r\n        shortTitle: \"\",\r\n      },\r\n      {\r\n        id: steps.length + 2,\r\n        title: \"گزینه نظرسنجی را اینجا وارد نمایید.\",\r\n        type: \"editor\",\r\n        role: \"answer\",\r\n        finished: false,\r\n        writable: true,\r\n        shortTitle: \"\",\r\n      }\r\n    );\r\n    const answers = data.choices.map((choice) => choice.text);\r\n    setSteps(steps);\r\n    setPollQuestion(data.question);\r\n    setPollAnswers(answers);\r\n    setPollTitle(data.title);\r\n    setPollId(data.id);\r\n    setEditor(true);\r\n    setButton(true);\r\n    setCurrentStep(steps.length - 2);\r\n  };\r\n\r\n  const handlePollCreation = (step) => {\r\n    if (steps[step].type === \"editor\") setEditor(true);\r\n    else if (steps[step].type === \"input\") setInput(true);\r\n    else if (steps[step].type === \"radio\") setRadio(true);\r\n    setButton(true);\r\n  };\r\n\r\n  const addPoll = (e) => {\r\n    handlePollCreation(currentStep);\r\n  };\r\n\r\n  const handleTitleAdd = (e) => {\r\n    setPollTitle(e.target.value);\r\n  };\r\n\r\n  const createPoll = (e) => {\r\n    setLoading(true);\r\n    setButton(false);\r\n    const token = getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n    return new Promise((resolve, reject) => {\r\n      PollAPI.createPoll(token, {\r\n        title: pollTitle,\r\n        pollType: parseInt(pollType),\r\n        pollState: 0,\r\n      }).then((res) => {\r\n        setLoading(false);\r\n        if (res.status === 201) {\r\n          setPollId(res.data.id);\r\n          resolve(true);\r\n        } else resolve(false);\r\n      });\r\n    });\r\n  };\r\n\r\n  const stepForward = () => {\r\n    setSteps((prev) =>\r\n      prev.map((step) => {\r\n        if (step.id === currentStep + 1) {\r\n          step.finished = true;\r\n          step.writable = false;\r\n          if (step.role === \"question\") {\r\n            setPollQuestion(tempContent);\r\n          } else if (step.role === \"answer\") {\r\n            setPollAnswers((prev) => [...prev, tempContent]);\r\n          }\r\n          return step;\r\n        } else return step;\r\n      })\r\n    );\r\n    if (currentStep > steps.length - 3) {\r\n      const newSteps = [\r\n        ...steps,\r\n        {\r\n          id: steps.length + 1,\r\n          title: \"گزینه نظرسنجی را اینجا وارد نمایید.\",\r\n          type: \"editor\",\r\n          role: \"answer\",\r\n          finished: false,\r\n          writable: true,\r\n          shortTitle: \"\",\r\n        },\r\n      ];\r\n      setSteps(newSteps);\r\n    }\r\n    handlePollCreation(currentStep + 1);\r\n  };\r\n\r\n  const proceed = async (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setCurrentStep((prev) => prev + 1);\r\n    setInput(false);\r\n    setEditor(false);\r\n    setRadio(false);\r\n    setTempContent(\"\");\r\n    if (currentStep === 1) {\r\n      const isSuccess = await createPoll();\r\n      if (isSuccess) {\r\n        stepForward();\r\n      } else {\r\n        toast(\"در ساختن نظرسنجی مشکلی پیش آمد. لطفا دوباره امتحان نمایید.\", {\r\n          type: \"error\",\r\n        });\r\n        return;\r\n      }\r\n    } else {\r\n      stepForward();\r\n    }\r\n  };\r\n\r\n  const editStep = (id) => (e) => {\r\n    setIsEditing({ id, bool: !isEditing.bool });\r\n    setSteps((prev) =>\r\n      prev.map((step) => {\r\n        if (step.id === id) {\r\n          step.writable = isEditing.bool ? false : true;\r\n          return step;\r\n        } else return step;\r\n      })\r\n    );\r\n  };\r\n\r\n  const onEditStep = (value, role, id) => {\r\n    if (role === \"question\") {\r\n      setPollQuestion(value);\r\n    } else if (role === \"answer\") {\r\n      const newPollAnswers = pollAnswers;\r\n      newPollAnswers[id - 4] = value;\r\n      setPollAnswers(newPollAnswers);\r\n    }\r\n  };\r\n\r\n  const onEditShortTitle = (value, id) => {\r\n    setSteps((prev) =>\r\n      prev.map((step, i) => {\r\n        if (id - 1 === i) {\r\n          step.shortTitle = value;\r\n          return step;\r\n        } else return step;\r\n      })\r\n    );\r\n  };\r\n\r\n  const publishPoll = (e) => {\r\n    const choices = pollAnswers.map((pollAnswer, i) => {\r\n      return {\r\n        text: pollAnswer,\r\n        shortTitle: steps[i + 3].shortTitle,\r\n        order: i,\r\n      };\r\n    });\r\n    const payload = {\r\n      id: pollId,\r\n      question: pollQuestion,\r\n      choices,\r\n    };\r\n    setPayload(payload);\r\n    setPublishRequest(true);\r\n  };\r\n\r\n  const handleShortTitleChange = (e) => {\r\n    setSteps((prev) =>\r\n      prev.map((step, i) => {\r\n        if (i === currentStep) {\r\n          step.shortTitle = e.target.value;\r\n          return step;\r\n        } else return step;\r\n      })\r\n    );\r\n  };\r\n\r\n  const [, publishLoading] = useMakeRequest(\r\n    PollAPI.publishPoll,\r\n    204,\r\n    publishRequest,\r\n    payload,\r\n    (res) => {\r\n      setPublishRequest(false);\r\n      if (res.status === 204) {\r\n        toast(\"نظرسنجی با موفقیت ایجاد شد.\", { type: \"success\" });\r\n        onPollCreated();\r\n      }\r\n    },\r\n    pollId\r\n  );\r\n  return (\r\n    <>\r\n      {(loading || publishLoading) && <Loader />}\r\n      <div className=\"w100 mx-a px-4 frc\" style={{height: window.innerHeight * 0.2}}>\r\n        {mode === \"create\" && (\r\n          <Button\r\n            title=\"ایجاد نظرسنجی\"\r\n            onClick={addPoll}\r\n            className=\"rw2 br2 mx1\"\r\n            outline={!store.darkMode}\r\n          />\r\n        )}\r\n        <Button\r\n          disabled={currentStep <= 3}\r\n          title=\"انتشار نظرسنجی\"\r\n          onClick={publishPoll}\r\n          className=\"rw2 br2 mx1\"\r\n          outline={!store.darkMode}\r\n        />\r\n      </div>\r\n      <div className=\"w100 mx-a px-4 of-auto-y scrollbar\" style={{height: window.innerHeight * 0.8}}>\r\n        {steps\r\n          .filter((step) => step.finished)\r\n          .map((step, i) => {\r\n            if (step.type === \"editor\") {\r\n              return (\r\n                <Fragment key={i}>\r\n                  <div className={styles.stepTitle}>{step.title}</div>\r\n                  <EditorContainer\r\n                    isReadOnly={!step.writable}\r\n                    content={\r\n                      step.role === \"question\"\r\n                        ? pollQuestion\r\n                        : step.role === \"answer\"\r\n                        ? pollAnswers[step.id - 4]\r\n                        : \"\"\r\n                    }\r\n                    setContent={(value) =>\r\n                      onEditStep(value, step.role, step.id)\r\n                    }\r\n                  />\r\n                  {step.role === \"answer\" && (\r\n                    <input\r\n                      type=\"text\"\r\n                      value={step.shortTitle}\r\n                      onChange={(e) =>\r\n                        onEditShortTitle(e.target.value, step.id)\r\n                      }\r\n                      readOnly={!step.writable}\r\n                      className={[styles.input, \"my-2\"].join(\" \")}\r\n                      placeholder=\"عنوان کوتاه گزینه\"\r\n                    />\r\n                  )}\r\n                  <Button className=\"my-1\" onClick={editStep(step.id)}>\r\n                    {isEditing.bool && isEditing.id === step.id\r\n                      ? \"تایید\"\r\n                      : \"ویرایش\"}\r\n                  </Button>\r\n                </Fragment>\r\n              );\r\n            } else if (step.type === \"input\") {\r\n              return (\r\n                <>\r\n                  <div className={styles.stepTitle}>{step.title}</div>\r\n                  <input\r\n                    type=\"text\"\r\n                    className={styles.input}\r\n                    readOnly={true}\r\n                    value={pollTitle}\r\n                  />\r\n                </>\r\n              );\r\n            }\r\n          })}\r\n        {editor && (\r\n          <>\r\n            <div className={styles.stepTitle}>{steps[currentStep].title}</div>\r\n            <EditorContainer\r\n              content={tempContent}\r\n              setContent={setTempContent}\r\n              pollId={pollId}\r\n            />\r\n            {steps[currentStep].role === \"answer\" && (\r\n              <input\r\n                type=\"text\"\r\n                value={steps[currentStep].shortTitle}\r\n                onChange={handleShortTitleChange}\r\n                className={[styles.input, \"my-2\"].join(\" \")}\r\n                placeholder=\"عنوان کوتاه گزینه\"\r\n              />\r\n            )}\r\n          </>\r\n        )}\r\n        {input && (\r\n          <>\r\n            <div className={styles.stepTitle}>{steps[currentStep].title}</div>\r\n            <input\r\n              type=\"text\"\r\n              className={styles.input}\r\n              onChange={handleTitleAdd}\r\n            />\r\n          </>\r\n        )}\r\n        {radio && (\r\n          <>\r\n            <div className={styles.stepTitle}>{steps[currentStep].title}</div>\r\n            {pollTypes.map((pollType, i) => (\r\n              <div className=\"pollRadio\" key={i}>\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"pollType\"\r\n                  id={pollType.id}\r\n                  value={pollType.id}\r\n                  onChange={(e) => setPollType(e.target.value)}\r\n                />\r\n                <label htmlFor={pollType.id} className=\"pollRadioLabel\">\r\n                  {pollType.label}\r\n                </label>\r\n              </div>\r\n            ))}\r\n          </>\r\n        )}\r\n        {button && (\r\n          <form onSubmit={proceed}>\r\n            <Button\r\n              type=\"submit\"\r\n              title=\"تایید\"\r\n              className=\"my-1\"\r\n              onClick={proceed}\r\n            />\r\n          </form>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreatePoll;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Infos.js",["890","891","892","893"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { InfoAPI, ReportsAPI } from \"../../apiCalls\";\r\nimport widgetStyle from \"../../stylesheets/infowidget.module.css\";\r\nimport ReportCard from \"../commons/dataDisplay/ReportCard\";\r\nimport Loader from \"../helpers/Loader\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport { callAPI, defaultFilters } from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport NoData from \"../helpers/NoData/NoData\";\r\nimport BarChart from \"../commons/Charts/BarChart\";\r\nimport PieChart from \"../commons/Charts/PieChart\";\r\nimport useResize from \"../hooks/useResize\";\r\nimport ScatterMap from \"../commons/map/ScatterMap\";\r\nimport { toast } from \"react-toastify\";\r\nimport layoutStyle from \"../../stylesheets/layout.module.css\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport DropdownWrapper from \"../helpers/DropdownWrapper\";\r\nimport DropDownItem from \"../helpers/DropDown/DropDownItem\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\n\r\nconst filterTypes = { from: true, to: true, category: true, regions: true };\r\nconst filterDefaults = {\r\n  fromDate: \"\",\r\n  toDate: \"\",\r\n  categoryIds: [],\r\n  regions: [],\r\n};\r\n\r\nconst Infos = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // states\r\n  const [chartsList, setChartsList] = useState([]);\r\n  const [selectedChartId, setSlectedChartId] = useState(\"\");\r\n  const [selectedChartTitle, setSelectedChartTitle] = useState(\"\");\r\n  const [pieChartsData, setPieChartsData] = useState([]);\r\n  const [barChartsData, setBarChartsData] = useState([]);\r\n  const [singletons, setSingletons] = useState([]);\r\n  const [locations, setLocations] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [isScatterMap, setIsScatterMap] = useState(false);\r\n  const [filters, setFilters] = useState(filterDefaults);\r\n\r\n  useEffect(() => {\r\n    getChartsList({});\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getInfos({});\r\n    }\r\n\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    if (selectedChartId) {\r\n      clearData();\r\n      if (isScatterMap) {\r\n        getLocations(store.filters);\r\n      } else {\r\n        getInfos({ filters: store.filters, chartId: selectedChartId });\r\n      }\r\n    }\r\n  }, [store.filters]);\r\n\r\n  // functions\r\n  const getChartsList = () => {\r\n    callAPI({\r\n      caller: InfoAPI.getListCharts,\r\n      successStatus: 200,\r\n      successCallback: (res) => {\r\n        setChartsList(res.data);\r\n      },\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  const getInfos = ({ filters = {}, chartId = null }) => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: InfoAPI.getChart,\r\n        successStatus: 200,\r\n        payload: chartId,\r\n        successCallback: (res) => {\r\n          setPieChartsData(res.data.pieCharts);\r\n          setBarChartsData(res.data.barCharts);\r\n          setSingletons(res.data.singletons);\r\n        },\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      filters\r\n    );\r\n  };\r\n\r\n  const clearData = () => {\r\n    setBarChartsData([]);\r\n    setPieChartsData([]);\r\n    setSingletons([]);\r\n    setLocations([]);\r\n  };\r\n\r\n  const getLocations = (queries) => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ReportsAPI.getReportLocations,\r\n        successCallback: (res) => setLocations(res.data),\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const onChartSelected = (chart) => {\r\n    const selectedChartId = chart.id;\r\n    const chartCode = chartsList.find(\r\n      (c) => String(c.id) === String(selectedChartId)\r\n    )?.code;\r\n    const isScatterMap = chartCode === 141;\r\n    setSelectedChartTitle(chart.title);\r\n    setSlectedChartId(selectedChartId);\r\n    setIsScatterMap(isScatterMap);\r\n    clearData();\r\n    dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    if (selectedChartId) {\r\n      if (isScatterMap) {\r\n        getLocations({});\r\n      } else {\r\n        getInfos({ chartId: selectedChartId });\r\n      }\r\n    }\r\n  };\r\n\r\n  // renders\r\n  const renderInfoHeader = () => {\r\n    return (\r\n      <>\r\n        <ChartsList\r\n          charts={chartsList}\r\n          onSelectChart={onChartSelected}\r\n          selectedChart={selectedChartTitle}\r\n        />\r\n        <Filters filterTypes={filterTypes} filterValues={filters} />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const hasNoData =\r\n    !loading &&\r\n    singletons.length === 0 &&\r\n    pieChartsData.length === 0 &&\r\n    barChartsData.length === 0 &&\r\n    !isScatterMap;\r\n\r\n  const { windowWidth, windowHeight } = useResize();\r\n\r\n  return (\r\n    <>\r\n      <section className={layoutStyle.wrapper}>\r\n        <TableHeader renderHeader={renderInfoHeader} />\r\n        <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n          <div className=\"w100 mxa\">\r\n            <section className=\"w100 mxa mt1 bg-white br1\">\r\n              {loading ? (\r\n                <section className=\"relative w100 vh100 fcc\">\r\n                  <Loader absolute={true} />\r\n                </section>\r\n              ) : (\r\n                <>\r\n                  <div className={widgetStyle.infowidgets}>\r\n                    {singletons.length > 0 &&\r\n                      singletons.map((s, i) => (\r\n                        <ReportCard\r\n                          key={`reportcard-${i}`}\r\n                          title={s.title}\r\n                          value={s.value}\r\n                        />\r\n                      ))}\r\n                  </div>\r\n\r\n                  {pieChartsData.length > 0 &&\r\n                    pieChartsData.map((pieChartData, i) => (\r\n                      <PieChart\r\n                        key={`piechart-${i}`}\r\n                        chartData={pieChartData}\r\n                        chartTitle={pieChartData.chartTitle}\r\n                        height={(windowHeight * 37) / 48 - 20}\r\n                        width={\"100%\"}\r\n                        radius={((windowHeight * 37) / 48 - 120) / 2}\r\n                      />\r\n                    ))}\r\n                  {barChartsData.length > 0 &&\r\n                    barChartsData.map((barChartData, i) => {\r\n                      const barChartItemHeight =\r\n                        (barChartData.series.length > 0\r\n                          ? Object.keys(barChartData.series[0].values).length\r\n                          : 1) * 30;\r\n                      return (\r\n                        <BarChart\r\n                          key={`barchart-${i}`}\r\n                          chartTitle={barChartData.chartTitle}\r\n                          chartData={barChartData}\r\n                          height={\r\n                            barChartData.series.length * barChartItemHeight +\r\n                            barChartItemHeight * 5\r\n                          }\r\n                          width={windowWidth - (store.sidebarIsOpen ? 250 : 70)}\r\n                        />\r\n                      );\r\n                    })}\r\n                  {isScatterMap && !loading && (\r\n                    <ScatterMap\r\n                      width=\"100%\"\r\n                      className=\"mxa\"\r\n                      height={400}\r\n                      locations={locations}\r\n                    />\r\n                  )}\r\n                  {hasNoData ? (\r\n                    <NoData\r\n                      title=\"اطلاعاتی وجود ندارد.\"\r\n                      icon=\"fas fa-chart-pie\"\r\n                    />\r\n                  ) : null}\r\n                </>\r\n              )}\r\n            </section>\r\n          </div>\r\n        </LayoutScrollable>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Infos;\r\n\r\nconst ChartsList = ({\r\n  charts = [],\r\n  onSelectChart = (f) => f,\r\n  selectedChart,\r\n}) => {\r\n  return (\r\n    <>\r\n      <DropdownWrapper\r\n        toggleElement={\r\n          <TableHeaderAction\r\n            title={\r\n              <>\r\n                <span className=\"ml05\">نوع ‌نمودار</span>\r\n                <span>{selectedChart ? `(${selectedChart})` : \"\"}</span>\r\n              </>\r\n            }\r\n            icon=\"fas fa-list\"\r\n          />\r\n        }\r\n        position=\"center bottom\"\r\n        theme={{ background: \"var(--white)\", color: \"var(--dark)\" }}\r\n        index={0}\r\n        total={charts.length}\r\n        scroll\r\n        scrollHeight={300}\r\n        className=\"frc\"\r\n      >\r\n        {charts.map((chart, i) => (\r\n          <DropDownItem\r\n            key={`chart-item-${i}`}\r\n            title={chart.title}\r\n            value={chart}\r\n            onClick={onSelectChart}\r\n            index={i}\r\n          />\r\n        ))}\r\n      </DropdownWrapper>\r\n    </>\r\n  );\r\n};\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\ManageUsers.js",["894","895","896","897","898","899","900","901"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { AuthenticateAPI, UserInfoAPI } from \"../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  defaultFilters,\r\n  doesExist,\r\n  hasRole,\r\n  tableLightTheme,\r\n} from \"../../helperFuncs\";\r\nimport Avatar from \"../commons/dataDisplay/Avatar\";\r\nimport DropdownWrapper from \"../helpers/DropdownWrapper\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport dropdownStyles from \"../../stylesheets/dropdown.module.css\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport RolesDialog from \"../commons/dialogs/RolesDialog\";\r\nimport ChangePasswordDialog from \"../commons/dialogs/ChangePasswordDialog\";\r\nimport RegisterForm from \"../commons/submission/RegisterForm\";\r\nimport Button from \"../helpers/Button\";\r\nimport RegionsDialog from \"../commons/dialogs/RegionsDialog\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport Filters from \"../helpers/Filters\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst ManageUsers = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [perPage, setPerPage] = useState(10);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [roles, setRoles] = useState([]);\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [rolesDialog, setRolesDialog] = useState(false);\r\n  const [passwordDialog, setPasswordDialog] = useState(false);\r\n  const [regionsDialog, setRegionsDialog] = useState(null);\r\n  const [userDialog, setUserDialog] = useState(false);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const queries = {\r\n    page: currentPage,\r\n    perPage,\r\n    ...store.filters,\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `manageUser-${1}`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => handlePortalClick(\"edit\", row),\r\n    },\r\n    {\r\n      id: `manageUser-${2}`,\r\n      title: \"نقش‌ها\",\r\n      icon: \"far fa-user\",\r\n      onClick: (row) => handlePortalClick(\"roles\", row),\r\n    },\r\n    {\r\n      id: `manageUser-${3}`,\r\n      title: \"مناطق\",\r\n      icon: \"far fa-map\",\r\n      onClick: (row) => handlePortalClick(\"regions\", row),\r\n    },\r\n    {\r\n      id: `manageUser-${4}`,\r\n      title: \"تغییر رمز عبور\",\r\n      icon: \"fas fa-key\",\r\n      onClick: (row) => handlePortalClick(\"password\", row),\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      cell: (row) => (\r\n        <Avatar url={row.avatar?.url3} placeholder={!row.avatar} />\r\n      ),\r\n    },\r\n    {\r\n      name: \"نام\",\r\n      cell: (row) => doesExist(row.firstName),\r\n    },\r\n    {\r\n      name: \"نام خانوادگی\",\r\n      cell: (row) => doesExist(row.lastName),\r\n    },\r\n    {\r\n      name: \"عنوان\",\r\n      cell: (row) => doesExist(row.title),\r\n    },\r\n    {\r\n      name: \"نام کاربری\",\r\n      cell: (row) => doesExist(row.userName),\r\n    },\r\n    {\r\n      name: \"تلفن همراه\",\r\n      cell: (row) => doesExist(row.phoneNumber),\r\n    },\r\n    {\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            rowData={row}\r\n            total={data.length}\r\n            perPage={perPage}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const handlePortalClick = (dialog, dialogData) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialogData(dialogData);\r\n    if (dialog === \"roles\") {\r\n      setRolesDialog(true);\r\n    }\r\n    if (dialog === \"regions\") {\r\n      setRegionsDialog(true);\r\n    }\r\n    if (dialog === \"password\") {\r\n      setPasswordDialog(true);\r\n    }\r\n    if (dialog === \"create\") {\r\n      setEditDialog(false);\r\n      setUserDialog(true);\r\n    }\r\n    if (dialog === \"edit\") {\r\n      setEditDialog(true);\r\n      setUserDialog(true);\r\n    }\r\n  };\r\n\r\n  const makeQueryRequset = (payload) => {\r\n    setQuery(payload.query);\r\n    setRoles(payload.roles.map((role) => role.roleName));\r\n  };\r\n\r\n  const onPageChange = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setPerPage(newPerPage);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getAllUsers();\r\n    }\r\n    return () => {\r\n      dispatch({ type: \"setFilters\", payload: defaultFilters });\r\n    };\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getAllUsers();\r\n  }, [store.filters, currentPage, perPage]);\r\n\r\n  const getAllUsers = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: UserInfoAPI.getAllUsers,\r\n        successCallback: (res) => {\r\n          setData(res.data);\r\n          if (res.headers[\"x-pagination\"]) {\r\n            const paginationData = JSON.parse(res.headers[\"x-pagination\"]);\r\n            setTotalRows(paginationData.TotalCount);\r\n          }\r\n        },\r\n        requestEnded: () => setLoading(false),\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف کاربر\"\r\n          icon=\"fas fa-user-plus\"\r\n          onClick={() => handlePortalClick(\"create\")}\r\n        />\r\n        <Filters\r\n          filterTypes={{\r\n            from: true,\r\n            to: true,\r\n            query: true,\r\n            regions: true,\r\n            roles: true,\r\n          }}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const fields = editDialog\r\n    ? [\"firstName\", \"lastName\", \"title\"]\r\n    : [\r\n        \"firstName\",\r\n        \"lastName\",\r\n        \"userName\",\r\n        \"regions\",\r\n        \"roles\",\r\n        \"password\",\r\n        \"title\",\r\n      ];\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={columns}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          setLoading={setLoading}\r\n          filters={true}\r\n          filterTypes={{ query: true, roles: true }}\r\n          makeQueryRequset={makeQueryRequset}\r\n          onPageChange={onPageChange}\r\n          onRowsPageChange={onRowsPageChange}\r\n          totalRows={totalRows}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      {/* roles dialog */}\r\n      <DialogToggler\r\n        condition={rolesDialog}\r\n        setCondition={setRolesDialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        width={500}\r\n        height={300}\r\n        id=\"roles-dialog\"\r\n      >\r\n        <RolesDialog userId={dialogData?.id} setCondition={setRolesDialog} />\r\n      </DialogToggler>\r\n\r\n      {/* change password dialog */}\r\n      <DialogToggler\r\n        condition={passwordDialog}\r\n        data={dialogData}\r\n        setCondition={setPasswordDialog}\r\n        dialogId={dialogData?.id}\r\n        width={400}\r\n        height={200}\r\n        fixedDimension={false}\r\n        id=\"change-password-dialog\"\r\n      >\r\n        <ChangePasswordDialog\r\n          id={dialogData?.id}\r\n          setCondition={setPasswordDialog}\r\n        />\r\n      </DialogToggler>\r\n\r\n      <DialogToggler\r\n        condition={regionsDialog}\r\n        data={dialogData}\r\n        setCondition={setRegionsDialog}\r\n        dialogId={dialogData?.id}\r\n        width={500}\r\n        height={300}\r\n        fixedDimension={false}\r\n        id=\"regions-dialog\"\r\n      >\r\n        <RegionsDialog\r\n          userId={dialogData?.id}\r\n          setCondition={setRegionsDialog}\r\n        />\r\n      </DialogToggler>\r\n      <DialogToggler\r\n        condition={userDialog}\r\n        setCondition={setUserDialog}\r\n        isUnique={false}\r\n        width={editDialog ? 400 : 700}\r\n        id=\"register-form-dialog\"\r\n      >\r\n        <RegisterForm\r\n          setCondition={setUserDialog}\r\n          fields={fields}\r\n          caller={\r\n            editDialog\r\n              ? UserInfoAPI.updateUserById\r\n              : AuthenticateAPI.registerWithRoles\r\n          }\r\n          edit={editDialog}\r\n          values={dialogData}\r\n          successCallback={getAllUsers}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ManageUsers;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\Login.js",["902","903","904","905","906","907","908","909","910","911"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../stylesheets/login.module.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport { AuthenticateAPI } from \"../../apiCalls\";\r\nimport {\r\n  appRoutes,\r\n  checkLoginState,\r\n  serverError,\r\n  signUserIn,\r\n} from \"../../helperFuncs\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Loader from \"../helpers/Loader\";\r\nimport Brands from \"../commons/dataDisplay/Brands\";\r\nimport LoginForm from \"./Login/LoginForm\";\r\n\r\nconst Login = () => {\r\n  const _isMounted = useRef(true);\r\n\r\n  useEffect(() => {\r\n    const loginState = checkLoginState();\r\n    if (loginState) {\r\n      history.push(appRoutes.newReports);\r\n    }\r\n    return () => {\r\n      _isMounted.current = false;\r\n    };\r\n  }, []);\r\n\r\n  const history = useHistory();\r\n  return (\r\n    <>\r\n      <div className={styles.wrapper}>\r\n        <div className={styles.container}>\r\n          <Brands />\r\n          <LoginForm />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\NavBar.js",["912"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { constants, getFromLocalStorage, hasRole } from \"../../../helperFuncs\";\r\nimport styles from \"./SideBar/sidebar.module.css\";\r\nimport SideLink from \"./SideBar/SideLink\";\r\nimport { links } from \"./SideBar/constants\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\n\r\nconst NavBar = () => {\r\n  // context\r\n  const [{ sidebarIsOpen }] = useContext(AppStore);\r\n\r\n  // flags\r\n  const [openVisible, setOpenVisible] = useState(true);\r\n  const [closeVisible, setCloseVisible] = useState(false);\r\n\r\n  const userRoles = getFromLocalStorage(\r\n    constants.SHAHRBIN_MANAGEMENT_USER_ROLES\r\n  ) || [];\r\n\r\n  // opened navbar ui\r\n  const openedNavbar = (\r\n    <>\r\n      <div className={styles.sidepanel__list}>\r\n        <ul className={styles.sidepanel__listItems}>\r\n          {links\r\n            .sort((a, b) => (a.order > b.order ? 1 : -1))\r\n            .map((link, i) =>\r\n              hasRole(userRoles, link.roles) ? (\r\n                <SideLink\r\n                  key={link.id}\r\n                  title={link.title}\r\n                  handle={link.path}\r\n                  icon={link.icon}\r\n                />\r\n              ) : null\r\n            )}\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  // closed navbar ui\r\n  const closedNavbar = (\r\n    <>\r\n      <ul className={styles.icons__list}>\r\n        {links\r\n          .sort((a, b) => (a.order > b.order ? 1 : -1))\r\n          .map((link, i) =>\r\n            hasRole(userRoles, link.roles) ? (\r\n              <SideLink\r\n                key={link.id}\r\n                title={link.title}\r\n                handle={link.path}\r\n                icon={link.icon}\r\n                justIcon\r\n              />\r\n            ) : null\r\n          )}\r\n      </ul>\r\n    </>\r\n  );\r\n\r\n  const onTransitionEnd = (e) => {\r\n    if (sidebarIsOpen) {\r\n      setCloseVisible(true);\r\n      setOpenVisible(false);\r\n    } else {\r\n      setOpenVisible(true);\r\n      setCloseVisible(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={[\r\n        styles.page__sidepanel,\r\n        sidebarIsOpen ? \"\" : styles.sidepanelClose,\r\n      ].join(\" \")}\r\n      onTransitionEnd={onTransitionEnd}\r\n    >\r\n      <div\r\n        className={[\r\n          styles.sidepanel__lists,\r\n          openVisible ? \"\" : styles.hide,\r\n        ].join(\" \")}\r\n      >\r\n        {sidebarIsOpen ? null : closedNavbar}\r\n      </div>\r\n\r\n      <div\r\n        className={[\r\n          styles.sidepanel__lists,\r\n          closeVisible ? \"\" : styles.hide,\r\n        ].join(\" \")}\r\n      >\r\n        {sidebarIsOpen ? openedNavbar : null}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\navigations\\SideBar\\SideBarToggle.js",["913"],"import React, { useContext, useState } from \"react\";\r\nimport { AppStore } from \"../../../../store/AppContext\";\r\nimport Icon from \"../../../helpers/Icon/Icon\";\r\nimport styles from \"./sidebar.module.css\";\r\n\r\nconst SideBarToggle = () => {\r\n  // store\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // flags\r\n  const [openVisible, setOpenVisible] = useState(true);\r\n  const [closeVisible, setCloseVisible] = useState(false);\r\n\r\n  // functions\r\n  const toggleNavbar = (e) => {\r\n    dispatch({ type: \"setSideBar\", payload: !store.sidebarIsOpen });\r\n  };\r\n\r\n  // opened toggle ui\r\n  const openedNavbar = (\r\n    <>\r\n      <span className=\"w100 frc wrap ml1\">\r\n        <Icon icon=\"fas fa-users-cog\" />\r\n        <span className={styles.appTitle}>پنل مدیریت</span>\r\n      </span>\r\n    </>\r\n  );\r\n  const onTransitionEnd = () => {\r\n    if (store.sidebarIsOpen) {\r\n      setCloseVisible(true);\r\n      setOpenVisible(false);\r\n    } else {\r\n      setOpenVisible(true);\r\n      setCloseVisible(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <section\r\n        className={[\r\n          styles.sideBarToggle,\r\n          store.sidebarIsOpen ? \"\" : styles.sidepanelClose,\r\n        ].join(\" \")}\r\n        onTransitionEnd={onTransitionEnd}\r\n      >\r\n        <span\r\n          className={\r\n            store.sidebarIsOpen\r\n              ? \"frc absolute l0 b0 t0 br1\"\r\n              : \"frc absolute l0 r0 b0 t0 br1\"\r\n          }\r\n        >\r\n          <Toggle onClick={toggleNavbar} open={store.sidebarIsOpen} />\r\n        </span>\r\n        <div\r\n          className={[\r\n            styles.sidebarToggleContent,\r\n            closeVisible ? \"\" : styles.hide,\r\n          ].join(\" \")}\r\n        >\r\n          {store.sidebarIsOpen ? openedNavbar : null}\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideBarToggle;\r\n\r\nconst Toggle = ({ onClick = (f) => f, open = false }) => {\r\n  return (\r\n    <span\r\n      className={[styles.bars, open ? styles.close : \"\"].join(\" \")}\r\n      onClick={onClick}\r\n    >\r\n      <span className={[styles.bar, styles.bar1].join(\" \")}></span>\r\n      <span className={[styles.bar, styles.bar2].join(\" \")}></span>\r\n      <span className={[styles.bar, styles.bar3].join(\" \")}></span>\r\n    </span>\r\n  );\r\n};\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\CurrentDate.js",["914","915"],"import moment from \"moment-jalaali\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { jalaaliMonth, jalaalWeekDays } from \"../../../helperFuncs\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport Icon from \"../../helpers/Icon/Icon\";\r\nimport styles from \"../navigations/SideBar/sidebar.module.css\";\r\n// require('moment/locale/fa')\r\nmoment.loadPersian({ usePersianDigits: true, dialect: \"persian-modern\" });\r\n\r\nconst CurrentDate = () => {\r\n  // store\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // flags\r\n  const [openVisible, setOpenVisible] = useState(true);\r\n  const [closeVisible, setCloseVisible] = useState(false);\r\n\r\n  // functions\r\n  const getTodayDate = () => {\r\n    const todayDate = new Date();\r\n    const momentDate = moment(todayDate);\r\n    const weekDayIndex =\r\n      momentDate.day() + 1 > jalaalWeekDays.length - 1\r\n        ? 0\r\n        : momentDate.day() + 1;\r\n    const weekDay = jalaalWeekDays[weekDayIndex];\r\n    const monthIndex =\r\n      momentDate.jMonth() > jalaaliMonth.length - 1 ? 0 : momentDate.jMonth();\r\n    const month = jalaaliMonth[monthIndex];\r\n    const dateString = `${weekDay} ${momentDate.jDate()} ${month} ماه ${momentDate.jYear()}`;\r\n    return dateString;\r\n  };\r\n\r\n  // opened toggle ui\r\n  const openedNavbar = (\r\n    <>\r\n      <span className=\"f15 mx1 text-right\">{getTodayDate()}</span>\r\n    </>\r\n  );\r\n  const onTransitionEnd = () => {\r\n    if (store.sidebarIsOpen) {\r\n      setCloseVisible(true);\r\n      setOpenVisible(false);\r\n    } else {\r\n      setOpenVisible(true);\r\n      setCloseVisible(false);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <section\r\n        className={[\r\n          styles.currentDate,\r\n          store.sidebarIsOpen ? \"\" : styles.sidepanelClose,\r\n        ].join(\" \")}\r\n        onTransitionEnd={onTransitionEnd}\r\n      >\r\n        <div\r\n          className={[\r\n            styles.currentDateContent,\r\n            closeVisible ? \"\" : styles.hide,\r\n          ].join(\" \")}\r\n        >\r\n          {store.sidebarIsOpen ? openedNavbar : null}\r\n        </div>\r\n        <span\r\n          className={\r\n            store.sidebarIsOpen\r\n              ? \"frc absolute l0 b0 t0 br1 mx1\"\r\n              : \"frc absolute l0 r0 b0 t0 br1 mx1\"\r\n          }\r\n        >\r\n          <Icon icon=\"far fa-calendar\" />\r\n        </span>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CurrentDate;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\DropDown\\DropDownItem.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Accordion\\Accordion.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Icon\\Icon.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Brands.js",["916","917","918","919"],"import React from \"react\";\r\nimport shahrbin from \"../../../assets/Images/shahrbin_integrated.png\";\r\nimport fava from \"../../../assets/Images/fava.png\";\r\nimport province from \"../../../assets/Images/province-logo.png\";\r\nimport styles from \"../../../stylesheets/login.module.css\";\r\n\r\nconst Brands = () => {\r\n  return (\r\n    <>\r\n      <section className={styles.loginBrands}>\r\n        {/* <img\r\n          src={\r\n            require(`../../../assets/Images/${process.env.REACT_APP_LOGO}`)\r\n              .default\r\n          }\r\n          className=\"mr1 sq75 objfit-contain\"\r\n        /> */}\r\n        {/* <img src={fava} className=\"mr1 sq75 objfit-contain\" /> */}\r\n        <img src={province} className=\"mr1 sq75 objfit-contain\" />\r\n        {process.env.REACT_APP_MUNICIPALITY_LOGO && (\r\n          <img\r\n            src={\r\n              require(`../../../assets/Images/${process.env.REACT_APP_MUNICIPALITY_LOGO}`)\r\n                .default\r\n            }\r\n            className=\"mr1 sq75 objfit-contain\"\r\n          />\r\n        )}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Brands;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Layout\\LayoutScrollable.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Table\\TableHeader.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Tabs\\TabLabel.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Table\\TableHeaderAction.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\Login\\LoginForm.js",["920","921"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport styles from \"../../../stylesheets/login.module.css\";\r\nimport image from \"../../../assets/Images/login-img.png\";\r\nimport shahrbinTitle from \"../../../assets/Images/shahrbin_title.png\";\r\nimport { callAPI, signUserIn } from \"../../../helperFuncs\";\r\nimport { AuthenticateAPI } from \"../../../apiCalls\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport Button from \"../../helpers/Button\";\r\n\r\nconst LoginForm = () => {\r\n  const _isMounted = useRef(true);\r\n\r\n  const history = useHistory();\r\n\r\n  const [values, setValues] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  const [loading, setLoading] = useState(false);\r\n  const { username, password } = values;\r\n\r\n  //   functions\r\n  const handleChange = (name) => (e) => {\r\n    const value = e.target.value;\r\n    setValues({ ...values, [name]: value });\r\n  };\r\n\r\n  const login = (e) => {\r\n    e.preventDefault();\r\n    if (!username || !password) {\r\n      toast(\"لطفا تمام فیلد ها را کامل نمایید.\", { type: \"error\" }); // { /* => add error message object */}\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    const payload = { username, password };\r\n    callAPI({\r\n      caller: AuthenticateAPI.signin,\r\n      payload,\r\n      successCallback: (res) => signUserIn(res, history),\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  //   effects\r\n  useEffect(() => {\r\n    return () => {\r\n      _isMounted.current = false;\r\n    };\r\n  }, []);\r\n  return (\r\n    <>\r\n      <section className={styles.loginFormWrapper}>\r\n        <img src={image} className={styles.loginImage} />\r\n        <div className={styles.loginContainer}>\r\n          {/* <div className=\"mx1\">\r\n            <img src={shahrbinTitle} className={styles.loginFormTitleImage} />\r\n          </div> */}\r\n          <h1 className={styles.loginTitle}>ورود به پنل کاربری</h1>\r\n          <form className={styles.loginForm} onSubmit={login}>\r\n            <LoginInput\r\n              name=\"username\"\r\n              value={username}\r\n              placeholder=\"نام کاربری\"\r\n              icon=\"fas fa-user\"\r\n              onChange={handleChange}\r\n              disabled={loading}\r\n            />\r\n            <LoginInput\r\n              name=\"password\"\r\n              value={password}\r\n              type=\"password\"\r\n              placeholder=\"رمز عبور\"\r\n              icon=\"fas fa-unlock\"\r\n              onChange={handleChange}\r\n              disabled={loading}\r\n            />\r\n\r\n            <Button\r\n              className={styles.loginBtn}\r\n              loading={loading}\r\n              onClick={login}\r\n              type=\"submit\"\r\n            >\r\n              <span>ورود</span>\r\n              <span className={styles.btnIcon}>\r\n                <i className=\"fas fa-arrow-left\"></i>\r\n              </span>\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n\r\nconst LoginInput = ({\r\n  icon = \"\",\r\n  value = \"\",\r\n  type = \"text\",\r\n  name = \"\",\r\n  placeholder = \"\",\r\n  onChange = (f) => f,\r\n  disabled = false,\r\n}) => {\r\n  const inputRef = useRef(null);\r\n\r\n  const showPassword = (e) => {\r\n    if (inputRef.current.type === \"password\") {\r\n      inputRef.current.type = \"text\";\r\n    } else {\r\n      inputRef.current.type = \"password\";\r\n    }\r\n  };\r\n  return (\r\n    <div className={styles.inputGroup}>\r\n      <span className={styles.inputIcon}>\r\n        <i className={icon}></i>\r\n      </span>\r\n      <div className={styles.inputContainer}>\r\n        <input\r\n          type={type}\r\n          className={styles.input}\r\n          name={name}\r\n          value={value}\r\n          onChange={onChange(name)}\r\n          placeholder={placeholder}\r\n          disabled={disabled}\r\n          ref={inputRef}\r\n        />\r\n        <span className={styles.inputUnderline}></span>\r\n        {type === \"password\" && (\r\n          <span\r\n            className=\"absolute pointer f12\"\r\n            style={{\r\n              top: \"50%\",\r\n              left: 20,\r\n              transform: \"translateY(-50%)\",\r\n            }}\r\n            onClick={showPassword}\r\n          >\r\n            <i className=\"fas fa-eye\"></i>\r\n          </span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Attachment\\AttachmentToggle.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\FilterDialog.js",["922","923","924","925","926","927"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  ActorsAPI,\r\n  CommonAPI,\r\n  InfoAPI,\r\n  ReportsAPI,\r\n  UserInfoAPI,\r\n} from \"../../../apiCalls\";\r\nimport {\r\n  constants,\r\n  defaultFilters,\r\n  getDatePickerFormat,\r\n  getFromLocalStorage,\r\n  JalaliDate,\r\n} from \"../../../helperFuncs\";\r\nimport { AppStore } from \"../../../store/AppContext\";\r\nimport Button from \"../../helpers/Button\";\r\nimport DatePickerConatiner from \"../../helpers/Date/DatePicker\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport DialogButtons from \"./DialogButtons\";\r\nimport TreeSystem from \"./TreeSystem\";\r\n\r\nconst FilterDialog = ({\r\n  filterTypes = [],\r\n  onFilter = (f) => f,\r\n  dialog,\r\n  excel = false,\r\n}) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  const [allOrgans, setAllOrgans] = useState([]);\r\n  const [filterData, setFilterData] = useState({\r\n    fromDate: getDatePickerFormat(store.filters.fromDate),\r\n    toDate: getDatePickerFormat(store.filters.toDate),\r\n    query: store.filters.query,\r\n  });\r\n  const [stages, setStages] = useState([]);\r\n  const [regions, setRegions] = useState(store.filters.regions);\r\n  const [statuses, setStatuses] = useState(store.filters.statuses);\r\n  const [organs, setOrgans] = useState(store.filters.organs);\r\n  const [priorities, setPriorities] = useState([]);\r\n  const [categoryIds, setCategoryIds] = useState(\r\n    store.filters.categoryIds || []\r\n  );\r\n  const [categoryTitles, setCategoryTitles] = useState([]);\r\n  const [roles, setRoles] = useState(store.filters.roles || []);\r\n  const [groupCategories, setGroupCategories] = useState(false);\r\n\r\n  const [categoryDialog, setCategoryDialog] = useState(false);\r\n  const [excelLoading, setExcelLoading] = useState(false);\r\n\r\n  const { fromDate, toDate, query } = filterData;\r\n  const lastStatuses = [\r\n    {\r\n      id: \"ls-1\",\r\n      title: \"در حال بررسی\",\r\n      value: 0,\r\n    },\r\n    {\r\n      id: \"ls-2\",\r\n      title: \"پایان‌یافته\",\r\n      value: 1,\r\n    },\r\n    {\r\n      id: \"ls-3\",\r\n      title: \"ارجاع به واحد بازرسی\",\r\n      value: 2,\r\n    },\r\n    {\r\n      id: \"ls-4\",\r\n      title: \"تایید‌شده\",\r\n      value: 3,\r\n    },\r\n  ];\r\n\r\n  const clearFilters = () => {\r\n    onFilter(defaultFilters);\r\n  };\r\n\r\n  const handleChange = (name) => (e) => {\r\n    setFilterData({ ...filterData, [name]: e.target.value });\r\n  };\r\n\r\n  const onDateChange = (date, name) => {\r\n    setFilterData({ ...filterData, [name]: date });\r\n  };\r\n\r\n  const formatDate = (date) => {\r\n    return date\r\n      ? JalaliDate.jalaliToGregorian(date.year, date.month, date.day)\r\n      : \"\";\r\n  };\r\n\r\n  const getDateFormat = (dateValues, type = \"from\") =>\r\n    `${parseInt(dateValues[0])}-${parseInt(dateValues[1])}-${parseInt(\r\n      dateValues[2]\r\n    )}T${type === \"from\" ? \"00:00:00.000\" : \"23:59:59.999\"}Z`;\r\n\r\n  const onQueryRequest = (e) => {\r\n    e.preventDefault();\r\n    const GregorianFrom = filterData.fromDate\r\n      ? JalaliDate.jalaliToGregorian(\r\n          filterData.fromDate.year,\r\n          filterData.fromDate.month,\r\n          filterData.fromDate.day\r\n        )\r\n      : \"\";\r\n    const GregorianTo = filterData.toDate\r\n      ? JalaliDate.jalaliToGregorian(\r\n          filterData.toDate.year,\r\n          filterData.toDate.month,\r\n          filterData.toDate.day\r\n        )\r\n      : \"\";\r\n    const fromDate = filterData.fromDate\r\n      ? getDateFormat(GregorianFrom, \"from\")\r\n      : \"\";\r\n    const toDate = filterData.toDate ? getDateFormat(GregorianTo, \"to\") : \"\";\r\n    const newStages = stages.map((s) => s.value);\r\n    const newPriorities = priorities.map((s) => s.value);\r\n    setStages(stages);\r\n    setPriorities(priorities);\r\n    onFilter({\r\n      fromDate,\r\n      toDate,\r\n      query,\r\n      categoryIds,\r\n      stages: newStages,\r\n      priorities: newPriorities,\r\n      regions,\r\n      organs,\r\n      roles,\r\n      groupCategories,\r\n      statuses,\r\n    });\r\n  };\r\n\r\n  const [] = useMakeRequest(\r\n    InfoAPI.getExecutives,\r\n    200,\r\n    filterTypes.organs,\r\n    null,\r\n    (res) => {\r\n      if (res.status === 200) {\r\n        const allOrgans = res.data.map((o) => {\r\n          return { label: o.title, value: o.id };\r\n        });\r\n        setAllOrgans(allOrgans);\r\n      }\r\n    }\r\n  );\r\n\r\n  const excelQueries = {\r\n    fromDate: formatDate(filterData.fromDate),\r\n    toDate: formatDate(filterData.toDate),\r\n    query: filterData.query,\r\n    categoryIds,\r\n    regions,\r\n    organs,\r\n    statuses,\r\n  };\r\n\r\n  const getExcel = () => {\r\n    setExcelLoading(true);\r\n    const instanceId = getFromLocalStorage(\r\n      constants.SHAHRBIN_MANAGEMENT_INSTANCE_ID\r\n    );\r\n    ReportsAPI.getExcel(excelQueries, instanceId).then((res) => {\r\n      setExcelLoading(false);\r\n      if (res.status === 200) {\r\n        const url = window.URL.createObjectURL(new Blob([res.data]));\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        const filename = new Date().getTime() + \".xlsx\";\r\n        link.setAttribute(\"download\", filename);\r\n        link.setAttribute(\"target\", \"_blank\");\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      }\r\n    });\r\n  };\r\n\r\n  const onCategoriesSelected = (selecteds) => {\r\n    const categoryIds = selecteds.map((s) => s.id);\r\n    const categoryTitles = selecteds.map((s) => s.title);\r\n    setCategoryIds(categoryIds);\r\n    setCategoryTitles(categoryTitles);\r\n  };\r\n\r\n  // varibles\r\n  const clearButton = {\r\n    id: \"clear-button\",\r\n    title: \"پاک‌کردن\",\r\n    onClick: clearFilters,\r\n    loading: false,\r\n    style: {\r\n      backgroundColor: \"var(--glassPrimary)\",\r\n      color: \"var(--primary)\",\r\n    },\r\n    className: \"rw1 w100 mx1\",\r\n  };\r\n  return (\r\n    <>\r\n      {dialog && (\r\n        <>\r\n          <div className=\"w100 mx-a relative\">\r\n            <div className=\"w100 mxa row frc\">\r\n              {filterTypes.from && (\r\n                <DatePickerConatiner\r\n                  date={fromDate}\r\n                  onSelect={onDateChange}\r\n                  name=\"fromDate\"\r\n                  title=\"از تاریخ\"\r\n                  wrapperClassName=\"w100 px0\"\r\n                  containerClassName=\"col-md-12\"\r\n                  isInDialog={true}\r\n                  id=\"fromDate\"\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"w100 mx-a relative frc\">\r\n              {filterTypes.to && (\r\n                <DatePickerConatiner\r\n                  date={toDate}\r\n                  onSelect={onDateChange}\r\n                  name=\"toDate\"\r\n                  title=\"تا تاریخ\"\r\n                  wrapperClassName=\"w100 px0\"\r\n                  containerClassName=\"col-md-12\"\r\n                  isInDialog={true}\r\n                  id=\"toDate\"\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"w100 mxa row frc\">\r\n              {filterTypes.roles && (\r\n                <MultiSelect\r\n                  strings={{ label: \"نقش‌ها\" }}\r\n                  caller={UserInfoAPI.getRoles}\r\n                  defaultSelecteds={roles}\r\n                  onChange={setRoles}\r\n                  isStatic={false}\r\n                  wrapperClassName=\"col-md-12\"\r\n                  nameKey=\"displayName\"\r\n                  valueKey=\"roleName\"\r\n                  maxHeight={300}\r\n                  isInDialog={true}\r\n                  id=\"roles-list\"\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"w100 mx-a relative frc\">\r\n              {filterTypes.category && (\r\n                <TreeSystem\r\n                  caller={CommonAPI.getSubjectGroups}\r\n                  condition={categoryDialog}\r\n                  setCondition={setCategoryDialog}\r\n                  onChange={onCategoriesSelected}\r\n                  onClose={() => setCategoryDialog(false)}\r\n                  defaultSelecteds={categoryIds.map((c) => ({ id: c }))}\r\n                  renderToggler={(selecteds, data) => {\r\n                    return (\r\n                      <TextInput\r\n                        placeholder=\"انتخاب کنید.\"\r\n                        title=\"گروه موضوعی\"\r\n                        readOnly={true}\r\n                        onClick={() => setCategoryDialog(true)}\r\n                        wrapperClassName=\"col-md-12\"\r\n                        inputClassName=\"pointer\"\r\n                        required={false}\r\n                        value={selecteds\r\n                          .map((s) => {\r\n                            if (s.title) return s.title;\r\n                            else {\r\n                              const item = data.find((d) => d.id === s.id);\r\n                              return item?.title;\r\n                            }\r\n                          })\r\n                          .join(\", \")}\r\n                      />\r\n                    );\r\n                  }}\r\n                ></TreeSystem>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"w100 mxa row frc\">\r\n              {filterTypes.regions && (\r\n                <MultiSelect\r\n                  strings={{ label: \"مناطق\" }}\r\n                  caller={ActorsAPI.getActorRegions}\r\n                  onChange={setRegions}\r\n                  isStatic={false}\r\n                  wrapperClassName=\"col-md-12\"\r\n                  defaultSelecteds={regions}\r\n                  isInDialog={true}\r\n                  id=\"regions-list\"\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"w100 mxa row frc\">\r\n              {filterTypes.statuses && (\r\n                <MultiSelect\r\n                  strings={{ label: \"وضعیت\" }}\r\n                  onChange={setStatuses}\r\n                  isStatic={true}\r\n                  staticData={lastStatuses}\r\n                  wrapperClassName=\"col-md-12\"\r\n                  defaultSelecteds={statuses}\r\n                  isInDialog={true}\r\n                  id=\"statuses-list\"\r\n                  nameKey=\"title\"\r\n                  valueKey=\"value\"\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"w100 mxa row frc\">\r\n              {filterTypes.organs && allOrgans.length > 0 && (\r\n                <MultiSelect\r\n                  strings={{ label: \"واحد های اجرایی\" }}\r\n                  selecteds={organs}\r\n                  onChange={setOrgans}\r\n                  isStatic={false}\r\n                  caller={InfoAPI.getExecutives}\r\n                  wrapperClassName=\"col-md-12\"\r\n                  nameKey=\"title\"\r\n                  valueKey=\"id\"\r\n                  defaultSelecteds={organs}\r\n                  maxHeight={300}\r\n                  id=\"organs-list\"\r\n                  isInDialog\r\n                />\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"w100 mxa row frc\">\r\n              {filterTypes.query && (\r\n                <form className=\"col-md-12\" onSubmit={onQueryRequest}>\r\n                  <TextInput\r\n                    placeholder={\"جستجو...\"}\r\n                    value={query}\r\n                    title=\" جستجو\"\r\n                    required={false}\r\n                    onChange={handleChange}\r\n                    name=\"query\"\r\n                    wrapperClassName=\"w100 px0\"\r\n                    focusonSelect={true}\r\n                  />\r\n                </form>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <DialogButtons\r\n            primaryTitle=\"اعمال\"\r\n            onPrimaryClick={onQueryRequest}\r\n            secondaryTitle={excel ? \"خروجی اکسل\" : \"\"}\r\n            onSecondaryClick={getExcel}\r\n            secondaryLoading={excelLoading}\r\n            secondaryStyle={{\r\n              backgroundColor: \"var(--glassSuccess)\",\r\n              margin: \"0 10px\",\r\n              color: \"var(--white)\",\r\n            }}\r\n            otherButtons={[clearButton]}\r\n          />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Badge\\Badge.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\Attachment\\AddAttachment.js",["928","929"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport DialogToggler from \"../../../helpers/DialogToggler\";\r\nimport {\r\n  checkExtensions,\r\n  checkOverlAllSize,\r\n  isFile,\r\n  showExtensionError,\r\n  showSizeError,\r\n} from \"../../../../helperFuncs\";\r\nimport ShowAttachments from \"../ShowAttachments\";\r\nimport DialogButtons from \"../../dialogs/DialogButtons\";\r\n\r\nconst AddAttachment = ({\r\n  open = false,\r\n  setOpen = (f) => f,\r\n  onAdd = (f) => f,\r\n  reset = false,\r\n  id=\"add-attachment\"\r\n}) => {\r\n  // refrences\r\n  const fileInputRef = useRef(null);\r\n\r\n  //   states\r\n  const [attachments, setAttachments] = useState([]);\r\n  const [isOpen, setIsOpen] = useState(open);\r\n\r\n  // functions\r\n  const openFilePicker = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const validateSize = (files) => {\r\n    const isSizeOkay = checkOverlAllSize([...attachments, ...files]);\r\n    if (!isSizeOkay) {\r\n      showSizeError();\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const validateExtensions = (files) => {\r\n    const isExtensionAllowed = files.some((f) => checkExtensions(f.name));\r\n    if (!isExtensionAllowed) {\r\n      showExtensionError();\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const checkFiles = (files) => {\r\n    const supported = isFile(files[0]);\r\n    if (supported) {\r\n      const isSizeOkay = validateSize(files);\r\n      const isExtensionAllowed = validateExtensions(files);\r\n      if (isSizeOkay && isExtensionAllowed) return true;\r\n      else return false;\r\n    } else return false;\r\n  };\r\n\r\n  const onAddFile = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    const validationResult = checkFiles(files);\r\n    if (validationResult) addFiles(files);\r\n  };\r\n\r\n  const addFiles = (files) => {\r\n    let newAttachmnets = attachments;\r\n    newAttachmnets = [\r\n      ...newAttachmnets,\r\n      ...files.map((file, i) => ({\r\n        file,\r\n        id: `attach-${attachments.length + (i + 1)}`,\r\n      })),\r\n    ];\r\n    setAttachments(newAttachmnets);\r\n  };\r\n\r\n  const onRemoveFile = (attach) => {\r\n    setAttachments(\r\n      attachments.filter((a) => String(a.id) !== String(attach.id))\r\n    );\r\n  };\r\n\r\n  const onConfirm = () => {\r\n    onAdd(attachments);\r\n  };\r\n\r\n  const clear = () => {\r\n    setAttachments([]);\r\n  };\r\n\r\n  // effects\r\n  useEffect(() => {\r\n    if (reset) {\r\n      clear();\r\n    }\r\n  }, [reset]);\r\n  return (\r\n    <>\r\n      <DialogToggler\r\n        condition={open}\r\n        setCondition={setOpen}\r\n        width={600}\r\n        id={id}\r\n        dialogId={id}\r\n      >\r\n        <input\r\n          type={\"file\"}\r\n          className=\"d-none\"\r\n          ref={fileInputRef}\r\n          onChange={onAddFile}\r\n          multiple\r\n        />\r\n        <div className=\"w90 mxa\">\r\n          <ShowAttachments\r\n            medias={attachments}\r\n            isDeletable\r\n            deleteHandler={onRemoveFile}\r\n            preview={false}\r\n          />\r\n        </div>\r\n\r\n        <DialogButtons\r\n          primaryTitle=\"تایید\"\r\n          onPrimaryClick={onConfirm}\r\n          secondaryTitle=\"افزودن\"\r\n          onSecondaryClick={openFilePicker}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddAttachment;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Progress\\PageProgress.js",["930"],"import React, { Component } from \"react\";\r\nimport nprogress from \"nprogress\";\r\nimport \"nprogress/nprogress.css\";\r\nimport \"./style.css\";\r\n\r\nexport default class Progress extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentWillMount() {\r\n    nprogress.start();\r\n  }\r\n\r\n  componentDidMount() {\r\n    nprogress.done();\r\n  }\r\n\r\n  render() {\r\n    return <></>;\r\n  }\r\n}\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\DialogButtons.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\ConfirmDialog.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Loader\\Indetermine.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Excel\\Excel.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\helpers\\CheckBox\\CheckBoxGroup.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\hooks\\useInitials.js",["931","932","933"],"import React, { useContext, useEffect } from \"react\";\r\nimport { CommonAPI, InstanceManagementAPI } from \"../../apiCalls\";\r\nimport {\r\n  callAPI,\r\n  constants,\r\n  getFromLocalStorage,\r\n  saveToLocalStorage,\r\n} from \"../../helperFuncs\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\nconst useInitials = () => {\r\n  // store\r\n  const [store, dispatch] = useContext(AppStore);\r\n  const token = getFromLocalStorage(constants.SHAHRBIN_MANAGEMENT_AUTH_TOKEN);\r\n\r\n  // functions\r\n  const getInitials = async (instance_id) => {\r\n    let instance = {};\r\n\r\n    callAPI({\r\n      caller:\r\n        instance_id !== \"-1\"\r\n          ? InstanceManagementAPI.getInstanceById\r\n          : () => Promise.reject({}),\r\n      payload: instance_id,\r\n      successCallback: async (res) => {\r\n        if (res.data) {\r\n          instance = res.data;\r\n          saveToLocalStorage(constants.SHAHRBIN_MANAGEMENT_INSTANCE, instance);\r\n        }\r\n        const categoryPromise = new Promise((resolve, reject) => {\r\n          callAPI({\r\n            caller: CommonAPI.getSubjectGroups,\r\n            successCallback: (res) => {\r\n              resolve(res.data);\r\n            },\r\n            errorCallback: (err) => {\r\n              reject(err);\r\n            },\r\n          });\r\n        });\r\n\r\n        const regionsPromise = new Promise((resolve, reject) => {\r\n          callAPI({\r\n            caller: CommonAPI.getRegions,\r\n            successCallback: (res) => {\r\n              resolve(res.data);\r\n            },\r\n            errorCallback: (err) => {\r\n              reject(err);\r\n            },\r\n          });\r\n        });\r\n\r\n        const [categories, regions] = await Promise.all([\r\n          categoryPromise,\r\n          regionsPromise,\r\n        ]);\r\n        const payload = { categories, regions, instance };\r\n\r\n        dispatch({\r\n          type: \"setInitials\",\r\n          payload,\r\n        });\r\n      },\r\n      errorCallback: (err) => {},\r\n    });\r\n  };\r\n\r\n  // effects\r\n  useEffect(() => {\r\n    let instance_id;\r\n    if (token) {\r\n      instance_id = jwt_decode(token).instance_id;\r\n      getInitials(instance_id);\r\n    }\r\n  }, [token]);\r\n\r\n  return;\r\n};\r\n\r\nexport default useInitials;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\helpers\\Search.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\screens\\Complaints.js",["934","935"],"import React, { useEffect, useState } from \"react\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport { callAPI, complaintColumn, tableLightTheme } from \"../../helperFuncs\";\r\nimport { ComplaintsAPI } from \"../../apiCalls\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport ComplaintDialog from \"../commons/dataDisplay/ComplaintDialog\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport Tabs from \"../helpers/Tabs\";\r\nimport TabLabel from \"../helpers/Tabs/TabLabel\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\nconst tabs = [\r\n  {\r\n    id: \"new\",\r\n    title: \"جدید\",\r\n    caller: ComplaintsAPI.getComplaints,\r\n  },\r\n  {\r\n    id: \"live\",\r\n    title: \"در حال بررسی\",\r\n    caller: ComplaintsAPI.getLiveComplaints,\r\n  },\r\n];\r\n\r\nconst Complaints = () => {\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // other states\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(10);\r\n  const [dialogData, setDialogData] = useState({});\r\n  const [totalRows, setTotalRows] = useState(0);\r\n  const [currentTab, setCurrentTab] = useState(tabs[0]);\r\n\r\n  // flags\r\n  const [dialog, setDialog] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //   variables\r\n  const queries = {\r\n    page,\r\n    perPage: limit,\r\n  };\r\n  const tableActions = [\r\n    {\r\n      id: \"new-complaints-1\",\r\n      icon: \"fas fa-eye\",\r\n      title: \"بررسی\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n  ];\r\n\r\n  const moreButton = {\r\n    name: \"\",\r\n    cell: (row, index) => (\r\n      <TableActions\r\n        actions={tableActions}\r\n        rowData={row}\r\n        index={index}\r\n        total={data.length}\r\n        perPage={limit}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const tableScrollable = (window.innerHeight * 21) / 24 - 200;\r\n\r\n  //   functions\r\n  const getComplaints = (caller = tabs[0].caller) => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: caller,\r\n        successCallback: (res) => {\r\n          setData(res.data);\r\n          const pagination = res.headers[\"x-pagination\"];\r\n          const totalRows = JSON.parse(pagination)?.TotalCount;\r\n          setTotalRows(totalRows);\r\n        },\r\n        requestEnded: () => {\r\n          setLoading(false);\r\n        },\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const onPageChange = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setLimit(newPerPage);\r\n  };\r\n\r\n  const openDialog = (row) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n    setDialogData(row);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n  };\r\n\r\n  const refresh = () => {\r\n    getComplaints();\r\n  };\r\n\r\n  const onRowClicked = (row) => {\r\n    openDialog(row);\r\n  };\r\n\r\n  const onTabChange = (tabId) => {\r\n    const tab = tabs.find((t) => t.id === tabId);\r\n    setCurrentTab(tab);\r\n    getComplaints(tab.caller);\r\n  };\r\n\r\n  //   effects\r\n  useEffect(() => {\r\n    getComplaints(tabs[0].caller);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"w100 bg-white br1 mb2\">\r\n        <Tabs\r\n          mainClass=\"report-tab\"\r\n          activeClass=\"active\"\r\n          onTabChange={onTabChange}\r\n          wrapperClassName=\"scrollbar-h\"\r\n        >\r\n          {tabs.map((tab) => (\r\n            <div\r\n              id={tab.id}\r\n              label={<TabLabel tab={tab} activeTab={currentTab.id} />}\r\n              key={tab.id}\r\n            ></div>\r\n          ))}\r\n        </Tabs>\r\n      </div>\r\n\r\n      <MyDataTable\r\n        data={data}\r\n        columns={[...complaintColumn, moreButton]}\r\n        theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n        onPageChange={onPageChange}\r\n        onRowsPageChange={onRowsPageChange}\r\n        totalRows={totalRows}\r\n        loading={loading}\r\n        // filters={true}\r\n        // filterTypes={{ query: true, from: true, to: true }}\r\n        onRowClicked={onRowClicked}\r\n        fixedHeaders={true}\r\n        fixedHeaderScrollHeight={tableScrollable + \"px\"}\r\n      />\r\n\r\n      <DialogToggler\r\n        condition={dialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        setCondition={setDialog}\r\n        width={800}\r\n        node={modalRoot}\r\n        id=\"complaint-dialog\"\r\n      >\r\n        <ComplaintDialog\r\n          caller={ComplaintsAPI.getComplaintById}\r\n          childData={{ id: dialogData?.id }}\r\n          setDialog={setDialog}\r\n          refresh={refresh}\r\n          readOnly={currentTab.id === \"live\"}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Complaints;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ComplaintDialog.js",["936"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"../../../stylesheets/filters.module.css\";\r\nimport Tabs from \"../../helpers/Tabs\";\r\nimport CitizenInfo from \"./CitizenInfo\";\r\nimport Loader from \"../../helpers/Loader\";\r\nimport { callAPI } from \"../../../helperFuncs\";\r\nimport ComplaintDetails from \"./ComplaintDetails\";\r\nimport ComplaintReferral from \"../submission/ComplaintReferral\";\r\nimport ComplaintHistory from \"./ComplaintHistory\";\r\n\r\nconst modal = document && document.getElementById(\"modal-root\");\r\n\r\nconst ComplaintDialog = ({\r\n  setDialog,\r\n  refresh,\r\n  readOnly = false,\r\n  caller = (f) => f,\r\n  childData,\r\n  onNext = (f) => f,\r\n}) => {\r\n  // data states\r\n  const [data, setData] = useState({});\r\n  const [defaultTab, setDefaultTab] = useState(\"complaintsDetails\");\r\n\r\n  // flags\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (childData) {\r\n      getData();\r\n      setDefaultTab(\"complaintsDetails\");\r\n    }\r\n  }, [childData]);\r\n\r\n  const getData = () => {\r\n    setLoading(true);\r\n    callAPI({\r\n      caller: caller,\r\n      payload: childData?.id,\r\n      successCallback: (res) => setData(res.data),\r\n      errorCallback: () => modal.classList.remove(\"active\"),\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  const onTabChange = (tab) => {\r\n    setDefaultTab(tab);\r\n  };\r\n  return (\r\n    <>\r\n      {loading && <Loader absolute={true} />}\r\n      <section className={styles.filters}>\r\n        <Tabs\r\n          mainClass=\"complaint-tab\"\r\n          activeClass=\"active\"\r\n          contentClassName=\"scrollbar\"\r\n          onTabChange={onTabChange}\r\n          defaultActiveId={defaultTab}\r\n        >\r\n          <article label=\"جزییات شکایت\" id=\"complaintsDetails\">\r\n            <ComplaintDetails data={data} />\r\n          </article>\r\n          <article label=\"اطلاعات شهروند\" id=\"citizenInfo\">\r\n            <CitizenInfo data={data?.complainant} />\r\n          </article>\r\n          <article label=\"تاریخچه شکایت\" id=\"reportHistory\">\r\n            <ComplaintHistory data={data?.logs} />\r\n          </article>\r\n          {!readOnly && (\r\n            <article label=\"ارجاع\" id=\"finalize\">\r\n              <ComplaintReferral\r\n                data={data}\r\n                setDialog={setDialog}\r\n                refresh={refresh}\r\n              />\r\n            </article>\r\n          )}\r\n        </Tabs>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nComplaintDialog.propTypes = {\r\n  id: PropTypes.string,\r\n  setDialog: PropTypes.func,\r\n  refresh: PropTypes.func,\r\n  readOnly: PropTypes.bool,\r\n  caller: PropTypes.func,\r\n};\r\n\r\nexport default ComplaintDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ComplaintDetails.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\submission\\ComplaintReferral.js",["937","938"],"import React, { useState } from \"react\";\r\nimport styles from \"./styles.module.css\";\r\nimport Textarea from \"../../helpers/Textarea\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\nimport { callAPI, fixDigit } from \"../../../helperFuncs\";\r\nimport Button from \"../../helpers/Button\";\r\nimport { ComplaintsAPI } from \"../../../apiCalls\";\r\nimport { toast } from \"react-toastify\";\r\nimport TimeSelect from \"../dataDisplay/TimeSelect\";\r\n\r\nconst modal = document && document.getElementById(\"modal-root\");\r\n\r\nconst ComplaintReferral = ({\r\n  data,\r\n  setDialog = (f) => f,\r\n  refresh = (f) => f,\r\n}) => {\r\n  // states\r\n  const [referralData, setRefrerralData] = useState({\r\n    description: \"\",\r\n    referToId: \"\",\r\n    deadlineInMinutes: {\r\n      day: 0,\r\n      hour: 0,\r\n      minute: 0,\r\n    },\r\n  });\r\n  const [attachments, setAttachments] = useState([]);\r\n  const [referLoading, setReferLoading] = useState(false);\r\n  const [finishLoading, setFinishLoading] = useState(false);\r\n\r\n  // variables\r\n  const isDeadlineMandatory = referralData.referToId\r\n    ? data.referToOptions.find(\r\n        (o) => String(o.id) === String(referralData.referToId)\r\n      )?.isDeadlineMandatory\r\n    : true;\r\n\r\n  //   functions\r\n  const handleChange = (name, onlyDigit) => (e) => {\r\n    console.log(e, name);\r\n    let value = e.target ? e.target.value : e;\r\n    if (onlyDigit) {\r\n      value = fixDigit(value, true).replace(/[^-0-9]/, \"\");\r\n    }\r\n    setRefrerralData({ ...referralData, [name]: value });\r\n  };\r\n\r\n  const onRefer = () => {\r\n    if (!referralData.referToId)\r\n      return toast(\"مقصد ارجاع را مشخص نمایید.\", { type: \"error\" });\r\n    if (\r\n      isDeadlineMandatory &&\r\n      referralData.deadlineInMinutes.day === 0 &&\r\n      referralData.deadlineInMinutes.hour === 0 &&\r\n      referralData.deadlineInMinutes.minute === 0\r\n    )\r\n      return toast(\"ضرب العجل نمی‌تواند خالی باشد.\", { type: \"error\" });\r\n    setReferLoading(true);\r\n    const payload = new FormData();\r\n    payload.append(\"Id\", data.id);\r\n    payload.append(\"Description\", referralData.description);\r\n    if (isDeadlineMandatory)\r\n      payload.append(\r\n        \"DeadlineInMinutes\",\r\n        Number(\r\n          referralData.deadlineInMinutes.day * 24 * 60 +\r\n            referralData.deadlineInMinutes.hour * 60 +\r\n            referralData.deadlineInMinutes.minute\r\n        )\r\n      );\r\n    payload.append(\"ReferToId\", referralData.referToId);\r\n    attachments.forEach((a) => {\r\n      payload.append(\"Attachments\", a);\r\n    });\r\n    callAPI({\r\n      caller: ComplaintsAPI.referComplaint,\r\n      payload,\r\n      successCallback: (res) => {\r\n        toast(\"شکایت ارجاع داده شد.\", { type: \"success\" });\r\n        modal.classList.remove(\"active\");\r\n        setDialog(false);\r\n        refresh();\r\n      },\r\n      requestEnded: () => setReferLoading(false),\r\n    });\r\n  };\r\n\r\n  const onFinish = () => {\r\n    setFinishLoading(true);\r\n    const payload = new FormData();\r\n    payload.append(\"Id\", data.id);\r\n    payload.append(\"Description\", referralData.description);\r\n    attachments.forEach((a) => {\r\n      payload.append(\"Attachments\", a);\r\n    });\r\n    callAPI({\r\n      caller: ComplaintsAPI.finishComplaint,\r\n      payload,\r\n      successCallback: (res) => {\r\n        toast(\"بررسی شکایت به پایان رسید.\", { type: \"success\" });\r\n        modal.classList.remove(\"active\");\r\n        setDialog(false);\r\n        refresh();\r\n      },\r\n      requestEnded: () => setFinishLoading(false),\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <section className={styles.complaintRefferalWrapper}>\r\n        <div className={[`w90 mxa mt1 row`].join(\" \")}>\r\n          {/* <TextInput\r\n            title=\"ضرب‌العجل (روز)\"\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            name=\"deadlineInMinutes\"\r\n            value={referralData.deadlineInMinutes}\r\n            onlyDigit\r\n            disabled={!isDeadlineMandatory}\r\n          /> */}\r\n          <TimeSelect\r\n            label=\"ضرب‌العجل \"\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            name=\"deadlineInMinutes\"\r\n            value={referralData.deadlineInMinutes}\r\n            onChange={handleChange}\r\n            disabled={!isDeadlineMandatory}\r\n          />\r\n\r\n          {/* list of reasons */}\r\n          <SelectBox\r\n            label=\"ارجاع به:\"\r\n            staticData={true}\r\n            name=\"referToId\"\r\n            handleChange={handleChange}\r\n            options={data.referToOptions}\r\n            handle={[\"title\"]}\r\n            value={referralData.referToId}\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n          />\r\n        </div>\r\n        <div className={[\"w90 mxa mt1\"].join(\" \")}>\r\n          <Textarea\r\n            name=\"description\"\r\n            title=\"توضیحات\"\r\n            value={referralData.description}\r\n            handleChange={handleChange}\r\n            wrapperClassName=\"col-md-12\"\r\n            inputClassName=\"mh100\"\r\n          />\r\n        </div>\r\n        <div className=\"w90 frc mxa mt1\">\r\n          {/* <AttachmentToggle onAddAttachment={setAttachments} id=\"complaint-attachment\" /> */}\r\n        </div>\r\n\r\n        <div className=\"w80 mxa fre py1 px2 border-t-light mt1 fixed b0 bg-white\">\r\n          <Button\r\n            title=\"پایان\"\r\n            className=\"py1 br05 bg-success ml1\"\r\n            onClick={onFinish}\r\n            loading={finishLoading}\r\n          />\r\n          <Button\r\n            title=\"ارجاع\"\r\n            className=\"py1 br05 bg-primary\"\r\n            onClick={onRefer}\r\n            loading={referLoading}\r\n          />\r\n        </div>\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComplaintReferral;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\ComplaintsCategories.js",["939","940","941","942"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport { callAPI, fixDigit, tableLightTheme } from \"../../helperFuncs\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport { toast } from \"react-toastify\";\r\nimport { ComplaintsAPI } from \"../../apiCalls\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport AddComplaintCategoryDialog from \"../commons/dialogs/AddComplaintCategoryDialog\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst ComplaintsCategories = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // other states\r\n  const [currentUnit, setCurrentUnit] = useState(null);\r\n\r\n  //   flags\r\n  const [addUnitDialog, setAddCategoryDialog] = useState(false);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState(null);\r\n  const [createLoading, setCreateLoading] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getAllCategories();\r\n    }\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getAllCategories();\r\n  }, []);\r\n\r\n  const getAllCategories = () => {\r\n    setLoading(true);\r\n    callAPI({\r\n      caller: ComplaintsAPI.getComplaintsCategories,\r\n      successCallback: (res) => setData(getFlatData(res.data)),\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  const getFlatData = (data) => {\r\n    const flatData = [];\r\n    data[\"children\"].forEach((d) => {\r\n      const branches = getAllBranches(d);\r\n      flatData.push(d);\r\n      flatData.push(...branches);\r\n    });\r\n    return flatData;\r\n  };\r\n\r\n  const getAllBranches = (item) => {\r\n    const children = [];\r\n    item[\"children\"].forEach((child) => {\r\n      children.push(child);\r\n      children.push(...getAllBranches(child));\r\n    });\r\n    return children;\r\n  };\r\n\r\n  //   open category details dialog\r\n  const openDialog = (unit) => {\r\n    setDialogData(unit);\r\n    setCurrentUnit(unit);\r\n    setEditDialog(true);\r\n  };\r\n\r\n  const onCategoryCreated = () => {\r\n    toast(\"واحد جدید با موفقیت اضافه شد.\", { type: \"success\" });\r\n    setAddCategoryDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getAllCategories();\r\n  };\r\n\r\n  const onCategoryEdited = () => {\r\n    toast(\"دسته‌بندی با موفقیت ویرایش شد.\", { type: \"success\" });\r\n    setEditDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    setDialogData(null);\r\n    getAllCategories();\r\n  };\r\n\r\n  const getDisplayName = (row) => {\r\n    return `${row.title} ${\r\n      row?.user?.firstName ? `(${row.user.firstName} ${row.user.lastName})` : \"\"\r\n    }`;\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف دسته‌بندی (شکایات)\"\r\n          icon=\"fas fa-stream\"\r\n          onClick={() => setAddCategoryDialog(true)}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `orginaztion-1`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n  ];\r\n\r\n  //   table columns\r\n  const columns = [\r\n    {\r\n      name: \"عنوان\",\r\n      cell: (row) => (\r\n        <span className=\"text-right\">{fixDigit(getDisplayName(row))}</span>\r\n      ),\r\n    },\r\n    {\r\n      name: \"عملیات\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            total={data.length}\r\n            perPage={data.length}\r\n            rowData={row}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={columns}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          pagination={false}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      {/* create dialog */}\r\n      <DialogToggler\r\n        condition={addUnitDialog}\r\n        setCondition={setAddCategoryDialog}\r\n        width={700}\r\n        isUnique={false}\r\n        loading={createLoading}\r\n        id=\"add-OrganizationalUnit-dialog\"\r\n      >\r\n        <AddComplaintCategoryDialog\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onCategoryCreated}\r\n          mode={\"create\"}\r\n          categories={data}\r\n        />\r\n      </DialogToggler>\r\n\r\n      {/* edit dialog */}\r\n      <DialogToggler\r\n        condition={editDialog}\r\n        setCondition={setEditDialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        width={700}\r\n        loading={createLoading}\r\n        id=\"edit-OrganizationalUnit-dialog\"\r\n      >\r\n        <AddComplaintCategoryDialog\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onCategoryCreated}\r\n          categories={data}\r\n          mode={\"edit\"}\r\n          defaltValues={currentUnit}\r\n          categoryId={dialogData?.id}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComplaintsCategories;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\ComplaintsUnits.js",["943","944","945"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport { callAPI, fixDigit, tableLightTheme } from \"../../helperFuncs\";\r\nimport LayoutScrollable from \"../helpers/Layout/LayoutScrollable\";\r\nimport TableHeader from \"../commons/dataDisplay/Table/TableHeader\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport { ComplaintsAPI } from \"../../apiCalls\";\r\nimport { AppStore } from \"../../store/AppContext\";\r\nimport TableHeaderAction from \"../commons/dataDisplay/Table/TableHeaderAction\";\r\nimport { toast } from \"react-toastify\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\nimport AddComplaintUnitDialog from \"../commons/dialogs/AddComplaintUnitDialog\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst ComplaintsUnits = ({ match }) => {\r\n  const [store, dispatch] = useContext(AppStore);\r\n\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // other states\r\n  const [currentUnit, setCurrentUnit] = useState(null);\r\n\r\n  //   flags\r\n  const [addUnitDialog, setAddUnitDialog] = useState(false);\r\n  const [editDialog, setEditDialog] = useState(false);\r\n  const [dialogData, setDialogData] = useState(null);\r\n  const [createLoading, setCreateLoading] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (store.refresh.page === match.path) {\r\n      getAllUnits();\r\n    }\r\n  }, [store.refresh.call]);\r\n\r\n  useEffect(() => {\r\n    getAllUnits();\r\n  }, []);\r\n\r\n  const getAllUnits = () => {\r\n    setLoading(true);\r\n    callAPI({\r\n      caller: ComplaintsAPI.getComplaintsUnits,\r\n      successCallback: (res) => setData(getFlatData(res.data)),\r\n      requestEnded: () => setLoading(false),\r\n    });\r\n  };\r\n\r\n  const getFlatData = (data) => {\r\n    const flatData = [];\r\n    data[\"children\"].forEach((d) => {\r\n      const branches = getAllBranches(d);\r\n      flatData.push(d);\r\n      flatData.push(...branches);\r\n    });\r\n    return flatData;\r\n  };\r\n\r\n  const getAllBranches = (item) => {\r\n    const children = [];\r\n    item[\"children\"].forEach((child) => {\r\n      children.push(child);\r\n      children.push(...getAllBranches(child));\r\n    });\r\n    return children;\r\n  };\r\n\r\n  //   open category details dialog\r\n  const openDialog = (unit) => {\r\n    setDialogData(unit);\r\n    setCurrentUnit(unit);\r\n    setEditDialog(true);\r\n  };\r\n\r\n  const onUnitCreated = () => {\r\n    toast(\"واحد جدید با موفقیت اضافه شد.\", { type: \"success\" });\r\n    setAddUnitDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    getAllUnits();\r\n  };\r\n\r\n  const onUnitEdited = () => {\r\n    toast(\"واحد سازمانی با موفقیت ویرایش شد.\", { type: \"success\" });\r\n    setEditDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n    setDialogData(null);\r\n    getAllUnits();\r\n  };\r\n\r\n  const getDisplayName = (row) => {\r\n    return `${row.title} ${\r\n      row?.user?.firstName ? `(${row.user.firstName} ${row.user.lastName})` : \"\"\r\n    }`;\r\n  };\r\n\r\n  // renders\r\n  const renderTableHeader = () => {\r\n    return (\r\n      <>\r\n        <TableHeaderAction\r\n          title=\"تعریف واحد سازمانی (شکایات)\"\r\n          icon=\"fas fa-building\"\r\n          onClick={() => setAddUnitDialog(true)}\r\n        />\r\n      </>\r\n    );\r\n  };\r\n\r\n  const tableActions = [\r\n    {\r\n      id: `orginaztion-1`,\r\n      title: \"ویرایش\",\r\n      icon: \"far fa-edit\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n  ];\r\n\r\n  //   table columns\r\n  const columns = [\r\n    {\r\n      name: \"عنوان\",\r\n      cell: (row) => (\r\n        <span className=\"text-right\">{fixDigit(getDisplayName(row))}</span>\r\n      ),\r\n    },\r\n    {\r\n      name: \"عملیات\",\r\n      cell: (row, index) => (\r\n        <>\r\n          <TableActions\r\n            actions={tableActions}\r\n            total={data.length}\r\n            perPage={data.length}\r\n            rowData={row}\r\n            index={index}\r\n          />\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <TableHeader renderHeader={renderTableHeader} />\r\n\r\n      <LayoutScrollable clipped={(window.innerHeight * 3) / 48 + 10}>\r\n        <MyDataTable\r\n          data={data}\r\n          columns={columns}\r\n          theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n          loading={loading}\r\n          pagination={false}\r\n        />\r\n      </LayoutScrollable>\r\n\r\n      {/* create dialog */}\r\n      <DialogToggler\r\n        condition={addUnitDialog}\r\n        setCondition={setAddUnitDialog}\r\n        width={700}\r\n        isUnique={false}\r\n        loading={createLoading}\r\n        id=\"add-OrganizationalUnit-dialog\"\r\n      >\r\n        <AddComplaintUnitDialog\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onUnitCreated}\r\n          mode={\"create\"}\r\n          units={data}\r\n        />\r\n      </DialogToggler>\r\n\r\n      {/* edit dialog */}\r\n      <DialogToggler\r\n        condition={editDialog}\r\n        setCondition={setEditDialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        width={700}\r\n        loading={createLoading}\r\n        id=\"edit-OrganizationalUnit-dialog\"\r\n      >\r\n        <AddComplaintUnitDialog\r\n          setLoading={setCreateLoading}\r\n          onSuccess={onUnitEdited}\r\n          mode={\"edit\"}\r\n          defaltValues={currentUnit}\r\n          categoryId={dialogData?.id}\r\n          units={data}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ComplaintsUnits;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddComplaintCategoryDialog.js",["946","947","948","949","950","951","952","953","954","955","956"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  constants,\r\n  getFromLocalStorage,\r\n  serverError,\r\n  unKnownError,\r\n} from \"../../../helperFuncs\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport { ComplaintsAPI } from \"../../../apiCalls\";\r\nimport Button from \"../../helpers/Button\";\r\nimport TreeSystem from \"./TreeSystem\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\n\r\nconst AddComplaintCategoryDialog = ({\r\n  onSuccess = (f) => f,\r\n  mode = \"create\",\r\n  defaltValues,\r\n  categoryId,\r\n  category,\r\n  categories = {},\r\n}) => {\r\n  const isEditMode = mode === \"edit\";\r\n\r\n  // data states\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    parentId: \"\",\r\n  });\r\n  const [processes, setProcesses] = useState([]);\r\n  const [parents, setParents] = useState([]);\r\n  const [categoryDialog, setCategoryDialog] = useState(false);\r\n\r\n  const parentId = useRef(null);\r\n\r\n  // main states\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  // flags\r\n  const [createRequest, setCreateRequest] = useState(false);\r\n\r\n  const fillInputs = () => {\r\n    parentId.current = defaltValues.parentId;\r\n    setValues({\r\n      title: defaltValues.title,\r\n      parentId: defaltValues.parentId,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      fillInputs();\r\n    }\r\n  }, []);\r\n\r\n  const onParentChange = (name) => (e) => {\r\n    parentId.current = e.target.value;\r\n    setValues({...values, parentId: e.target.value})\r\n  };\r\n\r\n  const handleChange =\r\n    (name, options = {}) =>\r\n    (e) => {\r\n      let value = e?.target ? e.target.value : e;\r\n      if (options?.onlyDigits) {\r\n        value = String(value).replace(/\\D/g, \"\");\r\n      }\r\n      setValues({ ...values, [name]: value });\r\n    };\r\n\r\n  const createCategory = () => {\r\n    const payload = {\r\n      ...values,\r\n    };\r\n    setPayload(payload);\r\n    setCreateRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    isEditMode\r\n      ? ComplaintsAPI.updateCategoryComplaint\r\n      : ComplaintsAPI.createCategoryComplaint,\r\n    isEditMode ? 204 : 201,\r\n    createRequest,\r\n    payload,\r\n    (res) => {\r\n      setCreateRequest(false);\r\n      const status = isEditMode ? 204 : 201;\r\n      if (res && res.status === status) {\r\n        onSuccess();\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    categoryId\r\n  );\r\n  return (\r\n    <>\r\n      <form className=\"w100 mx-a relative\">\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            value={values.title}\r\n            title=\"عنوان\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n          {/* <MultiSelect\r\n            staticData={categories}\r\n            strings={{ label: \"پدر\" }}\r\n            isStatic={true}\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            nameKey=\"title\"\r\n            valueKey=\"id\"\r\n            maxHeight={300}\r\n            singleSelect={true}\r\n            defaultSelecteds={category ? [{ id: category.parentId }] : []}\r\n            isInDialog={true}\r\n            id=\"categories\"\r\n          /> */}\r\n          <SelectBox\r\n            label=\"پدر\"\r\n            options={categories}\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            handleChange={onParentChange}\r\n            staticData\r\n            name=\"parentId\"\r\n            value={values.parentId}\r\n          />\r\n        </div>\r\n      </form>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title={isEditMode ? \"ویرایش دسته‌بندی\" : \"ایجاد دسته‌بندی\"}\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={createCategory}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddComplaintCategoryDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dialogs\\AddComplaintUnitDialog.js",["957","958","959","960","961","962","963","964","965","966","967"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  constants,\r\n  getFromLocalStorage,\r\n  serverError,\r\n  unKnownError,\r\n} from \"../../../helperFuncs\";\r\nimport useMakeRequest from \"../../hooks/useMakeRequest\";\r\nimport { ComplaintsAPI, InstanceManagementAPI } from \"../../../apiCalls\";\r\nimport Button from \"../../helpers/Button\";\r\nimport TreeSystem from \"./TreeSystem\";\r\nimport TextInput from \"../../helpers/TextInput\";\r\nimport MultiSelect from \"../../helpers/MultiSelect\";\r\nimport SelectBox from \"../../helpers/SelectBox\";\r\n\r\nconst AddComplaintUnitDialog = ({\r\n  onSuccess = (f) => f,\r\n  mode = \"create\",\r\n  defaltValues,\r\n  categoryId,\r\n  category,\r\n  units = {},\r\n}) => {\r\n  const isEditMode = mode === \"edit\";\r\n\r\n  // data states\r\n  const [values, setValues] = useState({\r\n    title: \"\",\r\n    parentId: \"\",\r\n    inspectorUsername: \"\",\r\n    inspectorPassword: \"\",\r\n    inspectorFirstName: \"\",\r\n    inspectorLastName: \"\",\r\n    instanceId: null,\r\n  });\r\n  const [processes, setProcesses] = useState([]);\r\n  const [parents, setParents] = useState([]);\r\n  const [categoryDialog, setCategoryDialog] = useState(false);\r\n\r\n  const parentId = useRef(null);\r\n\r\n  // main states\r\n  const [payload, setPayload] = useState(null);\r\n\r\n  // flags\r\n  const [createRequest, setCreateRequest] = useState(false);\r\n\r\n  const fillInputs = () => {\r\n    parentId.current = defaltValues.parentId;\r\n    setValues({\r\n      title: defaltValues.title,\r\n      parentId: defaltValues.parentId,\r\n      inspectorFirstName: defaltValues.inspectorFirstName,\r\n      inspectorLastName: defaltValues.inspectorLastName,\r\n      inspectorUsername: defaltValues.inspectorUsername,\r\n      inspectorPassword: defaltValues.inspectorPassword,\r\n      instanceId: defaltValues.instanceId,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEditMode) {\r\n      fillInputs();\r\n    }\r\n  }, []);\r\n\r\n  const onParentChange = (name) => (e) => {\r\n    parentId.current = e.target.value;\r\n    setValues({ ...values, parentId: e.target.value });\r\n  };\r\n\r\n  const onInstanceChange = (name) => (e) => {\r\n    setValues({ ...values, instanceId: e.target.value });\r\n  };\r\n\r\n  const handleChange =\r\n    (name, options = {}) =>\r\n    (e) => {\r\n      let value = e?.target ? e.target.value : e;\r\n      if (options?.onlyDigits) {\r\n        value = String(value).replace(/\\D/g, \"\");\r\n      }\r\n      setValues({ ...values, [name]: value });\r\n    };\r\n\r\n  const createCategory = () => {\r\n    const payload = {\r\n      ...values,\r\n    };\r\n    setPayload(payload);\r\n    setCreateRequest(true);\r\n  };\r\n\r\n  const [, loading] = useMakeRequest(\r\n    isEditMode\r\n      ? ComplaintsAPI.updateOrganizationalUnitComplaint\r\n      : ComplaintsAPI.createOrganizationalUnitComplaint,\r\n    isEditMode ? 204 : 201,\r\n    createRequest,\r\n    payload,\r\n    (res) => {\r\n      setCreateRequest(false);\r\n      const status = isEditMode ? 204 : 201;\r\n      if (res && res.status === status) {\r\n        onSuccess();\r\n      } else if (serverError(res)) return;\r\n      else if (unKnownError(res)) return;\r\n    },\r\n    categoryId\r\n  );\r\n  return (\r\n    <>\r\n      <form className=\"w100 mx-a relative\">\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            value={values.title}\r\n            title=\"عنوان\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"title\"\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n          <SelectBox\r\n            label=\"پدر\"\r\n            options={units}\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            handleChange={onParentChange}\r\n            staticData\r\n            name=\"parentId\"\r\n            value={values.parentId}\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            value={values.inspectorUsername}\r\n            title=\"نام کاربری بازرس\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name={\"inspectorUsername\"}\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n          <TextInput\r\n            value={values.inspectorPassword}\r\n            title=\"رمز عبور بازرس\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"inspectorPassword\"\r\n            onChange={handleChange}\r\n            required={false}\r\n            type=\"password\"\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <TextInput\r\n            value={values.inspectorFirstName}\r\n            title=\"نام بازرس\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"inspectorFirstName\"\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n          <TextInput\r\n            value={values.inspectorLastName}\r\n            title=\"نام خانوادگی بازرس\"\r\n            wrapperClassName=\"col-md-6 col-sm-12\"\r\n            inputClassName=\"\"\r\n            name=\"inspectorLastName\"\r\n            onChange={handleChange}\r\n            required={false}\r\n          />\r\n        </div>\r\n        <div className=\"w100 mxa row\">\r\n          <SelectBox\r\n            label=\"شهر\"\r\n            caller={InstanceManagementAPI.getInstances}\r\n            wrapperClassName={\"col-md-6 col-sm-12\"}\r\n            handleChange={onInstanceChange}\r\n            name=\"instanceId\"\r\n            handle={[\"name\"]}\r\n            value={values.instanceId}\r\n          />\r\n        </div>\r\n      </form>\r\n      <div className=\"w100 mxa fre py1 px2 border-t-light mt1\">\r\n        <Button\r\n          title={isEditMode ? \"ویرایش واحد سازمانی\" : \"ایجاد واحد سازمانی\"}\r\n          className=\"py1 br05 bg-primary\"\r\n          onClick={createCategory}\r\n          loading={loading}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddComplaintUnitDialog;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\screens\\AllComplaints.js",["968","969"],"import React, { useEffect, useState } from \"react\";\r\nimport MyDataTable from \"../helpers/MyDataTable\";\r\nimport { callAPI, complaintColumn, tableLightTheme } from \"../../helperFuncs\";\r\nimport { ComplaintsAPI } from \"../../apiCalls\";\r\nimport TableActions from \"../commons/dataDisplay/TableActions\";\r\nimport ComplaintDialog from \"../commons/dataDisplay/ComplaintDialog\";\r\nimport DialogToggler from \"../helpers/DialogToggler\";\r\n\r\nconst modalRoot = document && document.getElementById(\"modal-root\");\r\n\r\nconst AllComplaints = () => {\r\n  // data states\r\n  const [data, setData] = useState([]);\r\n\r\n  // other states\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(10);\r\n  const [dialogData, setDialogData] = useState({});\r\n  const [totalRows, setTotalRows] = useState(0);\r\n\r\n  // flags\r\n  const [dialog, setDialog] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  //   variables\r\n  const queries = {\r\n    page,\r\n    perPage: limit,\r\n  };\r\n  const tableActions = [\r\n    {\r\n      id: \"new-complaints-1\",\r\n      icon: \"fas fa-eye\",\r\n      title: \"بررسی\",\r\n      onClick: (row) => openDialog(row),\r\n    },\r\n  ];\r\n\r\n  const moreButton = {\r\n    name: \"\",\r\n    cell: (row, index) => (\r\n      <TableActions\r\n        actions={tableActions}\r\n        rowData={row}\r\n        index={index}\r\n        total={data.length}\r\n        perPage={limit}\r\n      />\r\n    ),\r\n  };\r\n\r\n  const tableScrollable = (window.innerHeight * 21) / 24 - 200;\r\n\r\n  //   functions\r\n  const getComplaints = () => {\r\n    setLoading(true);\r\n    callAPI(\r\n      {\r\n        caller: ComplaintsAPI.getAllComplaints,\r\n        successCallback: (res) => {\r\n          setData(res.data);\r\n          const pagination = res.headers[\"x-pagination\"];\r\n          const totalRows = JSON.parse(pagination)?.TotalCount;\r\n          setTotalRows(totalRows);\r\n        },\r\n        requestEnded: () => {\r\n          setLoading(false);\r\n        },\r\n      },\r\n      queries\r\n    );\r\n  };\r\n\r\n  const onPageChange = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const onRowsPageChange = (newPerPage) => {\r\n    setLimit(newPerPage);\r\n  };\r\n\r\n  const openDialog = (row) => {\r\n    modalRoot.classList.add(\"active\");\r\n    setDialog(true);\r\n    setDialogData(row);\r\n  };\r\n\r\n  const closeDialog = () => {\r\n    setDialog(false);\r\n    modalRoot.classList.remove(\"active\");\r\n  };\r\n\r\n  const refresh = () => {\r\n    getComplaints();\r\n  };\r\n\r\n  const onRowClicked = (row) => {\r\n    openDialog(row);\r\n  };\r\n\r\n  //   effects\r\n  useEffect(() => {\r\n    getComplaints();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <MyDataTable\r\n        data={data}\r\n        columns={[...complaintColumn, moreButton]}\r\n        theme={{ initializer: tableLightTheme, name: \"light\" }}\r\n        onPageChange={onPageChange}\r\n        onRowsPageChange={onRowsPageChange}\r\n        totalRows={totalRows}\r\n        loading={loading}\r\n        // filters={true}\r\n        // filterTypes={{ query: true, from: true, to: true }}\r\n        onRowClicked={onRowClicked}\r\n        fixedHeaders={true}\r\n        fixedHeaderScrollHeight={tableScrollable + \"px\"}\r\n      />\r\n\r\n      <DialogToggler\r\n        condition={dialog}\r\n        dialogId={dialogData?.id}\r\n        data={dialogData}\r\n        setCondition={setDialog}\r\n        width={800}\r\n        node={modalRoot}\r\n        id=\"complaint-dialog\"\r\n      >\r\n        <ComplaintDialog\r\n          caller={ComplaintsAPI.getComplaintById}\r\n          childData={{ id: dialogData?.id }}\r\n          setDialog={setDialog}\r\n          refresh={refresh}\r\n          readOnly={true}\r\n        />\r\n      </DialogToggler>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllComplaints;\r\n","D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\ComplaintHistory.js",[],"D:\\projects\\shahrbin-admin\\src\\components\\commons\\dataDisplay\\TimeSelect.js",[],{"ruleId":"970","replacedBy":"971"},{"ruleId":"972","replacedBy":"973"},{"ruleId":"974","severity":1,"message":"975","line":6,"column":8,"nodeType":"976","messageId":"977","endLine":6,"endColumn":14},{"ruleId":"978","severity":1,"message":"979","line":649,"column":9,"nodeType":"976","messageId":"980","endLine":649,"endColumn":10},{"ruleId":"981","severity":1,"message":"982","line":650,"column":52,"nodeType":"983","messageId":"984","endLine":650,"endColumn":54},{"ruleId":"981","severity":1,"message":"982","line":653,"column":52,"nodeType":"983","messageId":"984","endLine":653,"endColumn":54},{"ruleId":"981","severity":1,"message":"982","line":883,"column":19,"nodeType":"983","messageId":"984","endLine":883,"endColumn":21},{"ruleId":"981","severity":1,"message":"982","line":893,"column":15,"nodeType":"983","messageId":"984","endLine":893,"endColumn":17},{"ruleId":"970","replacedBy":"985"},{"ruleId":"972","replacedBy":"986"},{"ruleId":"974","severity":1,"message":"987","line":1,"column":17,"nodeType":"976","messageId":"977","endLine":1,"endColumn":26},{"ruleId":"974","severity":1,"message":"988","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":17},{"ruleId":"974","severity":1,"message":"987","line":1,"column":29,"nodeType":"976","messageId":"977","endLine":1,"endColumn":38},{"ruleId":"974","severity":1,"message":"989","line":8,"column":3,"nodeType":"976","messageId":"977","endLine":8,"endColumn":13},{"ruleId":"974","severity":1,"message":"990","line":52,"column":10,"nodeType":"976","messageId":"977","endLine":52,"endColumn":23},{"ruleId":"974","severity":1,"message":"991","line":55,"column":10,"nodeType":"976","messageId":"977","endLine":55,"endColumn":20},{"ruleId":"974","severity":1,"message":"992","line":55,"column":22,"nodeType":"976","messageId":"977","endLine":55,"endColumn":35},{"ruleId":"974","severity":1,"message":"993","line":179,"column":9,"nodeType":"976","messageId":"977","endLine":179,"endColumn":20},{"ruleId":"970","replacedBy":"994"},{"ruleId":"972","replacedBy":"995"},{"ruleId":"974","severity":1,"message":"996","line":31,"column":9,"nodeType":"976","messageId":"977","endLine":31,"endColumn":22},{"ruleId":"974","severity":1,"message":"997","line":1,"column":17,"nodeType":"976","messageId":"977","endLine":1,"endColumn":23},{"ruleId":"974","severity":1,"message":"998","line":15,"column":8,"nodeType":"976","messageId":"977","endLine":15,"endColumn":14},{"ruleId":"974","severity":1,"message":"999","line":19,"column":8,"nodeType":"976","messageId":"977","endLine":19,"endColumn":21},{"ruleId":"974","severity":1,"message":"1000","line":20,"column":8,"nodeType":"976","messageId":"977","endLine":20,"endColumn":24},{"ruleId":"974","severity":1,"message":"1001","line":24,"column":8,"nodeType":"976","messageId":"977","endLine":24,"endColumn":13},{"ruleId":"974","severity":1,"message":"1002","line":42,"column":10,"nodeType":"976","messageId":"977","endLine":42,"endColumn":20},{"ruleId":"1003","severity":1,"message":"1004","line":53,"column":6,"nodeType":"1005","endLine":53,"endColumn":34,"suggestions":"1006"},{"ruleId":"1003","severity":1,"message":"1007","line":63,"column":6,"nodeType":"1005","endLine":63,"endColumn":26,"suggestions":"1008"},{"ruleId":"974","severity":1,"message":"1009","line":91,"column":9,"nodeType":"976","messageId":"977","endLine":91,"endColumn":23},{"ruleId":"974","severity":1,"message":"1010","line":122,"column":9,"nodeType":"976","messageId":"977","endLine":122,"endColumn":26},{"ruleId":"974","severity":1,"message":"1011","line":141,"column":9,"nodeType":"976","messageId":"977","endLine":141,"endColumn":19},{"ruleId":"974","severity":1,"message":"975","line":6,"column":8,"nodeType":"976","messageId":"977","endLine":6,"endColumn":14},{"ruleId":"974","severity":1,"message":"1012","line":13,"column":8,"nodeType":"976","messageId":"977","endLine":13,"endColumn":14},{"ruleId":"974","severity":1,"message":"1013","line":32,"column":10,"nodeType":"976","messageId":"977","endLine":32,"endColumn":17},{"ruleId":"1003","severity":1,"message":"1014","line":46,"column":6,"nodeType":"1005","endLine":46,"endColumn":8,"suggestions":"1015"},{"ruleId":"1003","severity":1,"message":"1016","line":54,"column":6,"nodeType":"1005","endLine":54,"endColumn":26,"suggestions":"1017"},{"ruleId":"974","severity":1,"message":"1018","line":177,"column":7,"nodeType":"976","messageId":"977","endLine":177,"endColumn":18},{"ruleId":"974","severity":1,"message":"998","line":16,"column":8,"nodeType":"976","messageId":"977","endLine":16,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1019","line":53,"column":6,"nodeType":"1005","endLine":53,"endColumn":26,"suggestions":"1020"},{"ruleId":"1003","severity":1,"message":"1021","line":57,"column":6,"nodeType":"1005","endLine":57,"endColumn":21,"suggestions":"1022"},{"ruleId":"974","severity":1,"message":"1023","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":19},{"ruleId":"974","severity":1,"message":"998","line":15,"column":8,"nodeType":"976","messageId":"977","endLine":15,"endColumn":14},{"ruleId":"974","severity":1,"message":"1024","line":18,"column":8,"nodeType":"976","messageId":"977","endLine":18,"endColumn":15},{"ruleId":"974","severity":1,"message":"1025","line":27,"column":10,"nodeType":"976","messageId":"977","endLine":27,"endColumn":16},{"ruleId":"974","severity":1,"message":"1026","line":28,"column":10,"nodeType":"976","messageId":"977","endLine":28,"endColumn":18},{"ruleId":"974","severity":1,"message":"1027","line":30,"column":20,"nodeType":"976","messageId":"977","endLine":30,"endColumn":31},{"ruleId":"974","severity":1,"message":"1028","line":31,"column":18,"nodeType":"976","messageId":"977","endLine":31,"endColumn":27},{"ruleId":"974","severity":1,"message":"1029","line":56,"column":9,"nodeType":"976","messageId":"977","endLine":56,"endColumn":18},{"ruleId":"974","severity":1,"message":"1030","line":58,"column":9,"nodeType":"976","messageId":"977","endLine":58,"endColumn":19},{"ruleId":"974","severity":1,"message":"1031","line":22,"column":8,"nodeType":"976","messageId":"977","endLine":22,"endColumn":21},{"ruleId":"974","severity":1,"message":"1032","line":24,"column":8,"nodeType":"976","messageId":"977","endLine":24,"endColumn":19},{"ruleId":"974","severity":1,"message":"1033","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":13},{"ruleId":"974","severity":1,"message":"1034","line":5,"column":8,"nodeType":"976","messageId":"977","endLine":5,"endColumn":12},{"ruleId":"974","severity":1,"message":"1035","line":11,"column":3,"nodeType":"976","messageId":"977","endLine":11,"endColumn":17},{"ruleId":"974","severity":1,"message":"998","line":16,"column":8,"nodeType":"976","messageId":"977","endLine":16,"endColumn":14},{"ruleId":"974","severity":1,"message":"975","line":20,"column":8,"nodeType":"976","messageId":"977","endLine":20,"endColumn":14},{"ruleId":"974","severity":1,"message":"1036","line":24,"column":8,"nodeType":"976","messageId":"977","endLine":24,"endColumn":17},{"ruleId":"974","severity":1,"message":"1037","line":33,"column":17,"nodeType":"976","messageId":"977","endLine":33,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1038","line":58,"column":6,"nodeType":"1005","endLine":58,"endColumn":26,"suggestions":"1039"},{"ruleId":"1003","severity":1,"message":"1040","line":66,"column":6,"nodeType":"1005","endLine":66,"endColumn":36,"suggestions":"1041"},{"ruleId":"1003","severity":1,"message":"1042","line":37,"column":6,"nodeType":"1005","endLine":37,"endColumn":17,"suggestions":"1043"},{"ruleId":"974","severity":1,"message":"1044","line":13,"column":7,"nodeType":"976","messageId":"977","endLine":13,"endColumn":13},{"ruleId":"1003","severity":1,"message":"1045","line":42,"column":6,"nodeType":"1005","endLine":42,"endColumn":17,"suggestions":"1046"},{"ruleId":"1047","severity":1,"message":"1048","line":59,"column":11,"nodeType":"1049","endLine":59,"endColumn":48},{"ruleId":"970","replacedBy":"1050"},{"ruleId":"972","replacedBy":"1051"},{"ruleId":"974","severity":1,"message":"1052","line":4,"column":8,"nodeType":"976","messageId":"977","endLine":4,"endColumn":14},{"ruleId":"974","severity":1,"message":"1053","line":5,"column":8,"nodeType":"976","messageId":"977","endLine":5,"endColumn":14},{"ruleId":"974","severity":1,"message":"1054","line":7,"column":3,"nodeType":"976","messageId":"977","endLine":7,"endColumn":19},{"ruleId":"974","severity":1,"message":"1055","line":33,"column":10,"nodeType":"976","messageId":"977","endLine":33,"endColumn":14},{"ruleId":"974","severity":1,"message":"1013","line":33,"column":16,"nodeType":"976","messageId":"977","endLine":33,"endColumn":23},{"ruleId":"974","severity":1,"message":"1052","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":14},{"ruleId":"970","replacedBy":"1056"},{"ruleId":"972","replacedBy":"1057"},{"ruleId":"1003","severity":1,"message":"1058","line":61,"column":6,"nodeType":"1005","endLine":61,"endColumn":44,"suggestions":"1059"},{"ruleId":"1003","severity":1,"message":"1060","line":65,"column":6,"nodeType":"1005","endLine":65,"endColumn":35,"suggestions":"1061"},{"ruleId":"1047","severity":1,"message":"1048","line":131,"column":9,"nodeType":"1049","messageId":"1062","endLine":131,"endColumn":26},{"ruleId":"1003","severity":1,"message":"1063","line":56,"column":6,"nodeType":"1005","endLine":56,"endColumn":17,"suggestions":"1064"},{"ruleId":"1003","severity":1,"message":"1065","line":113,"column":6,"nodeType":"1005","endLine":113,"endColumn":17,"suggestions":"1066"},{"ruleId":"1003","severity":1,"message":"1067","line":122,"column":6,"nodeType":"1005","endLine":122,"endColumn":20,"suggestions":"1068"},{"ruleId":"974","severity":1,"message":"1069","line":25,"column":10,"nodeType":"976","messageId":"977","endLine":25,"endColumn":18},{"ruleId":"974","severity":1,"message":"1070","line":25,"column":20,"nodeType":"976","messageId":"977","endLine":25,"endColumn":31},{"ruleId":"974","severity":1,"message":"1013","line":31,"column":16,"nodeType":"976","messageId":"977","endLine":31,"endColumn":23},{"ruleId":"1003","severity":1,"message":"1071","line":50,"column":13,"nodeType":"1072","endLine":55,"endColumn":4},{"ruleId":"1003","severity":1,"message":"1073","line":55,"column":6,"nodeType":"1005","endLine":55,"endColumn":14,"suggestions":"1074"},{"ruleId":"1003","severity":1,"message":"1075","line":131,"column":6,"nodeType":"1005","endLine":131,"endColumn":8,"suggestions":"1076"},{"ruleId":"974","severity":1,"message":"987","line":1,"column":17,"nodeType":"976","messageId":"977","endLine":1,"endColumn":26},{"ruleId":"974","severity":1,"message":"1077","line":6,"column":10,"nodeType":"976","messageId":"977","endLine":6,"endColumn":15},{"ruleId":"974","severity":1,"message":"1053","line":7,"column":8,"nodeType":"976","messageId":"977","endLine":7,"endColumn":14},{"ruleId":"974","severity":1,"message":"1078","line":17,"column":9,"nodeType":"976","messageId":"977","endLine":17,"endColumn":17},{"ruleId":"974","severity":1,"message":"1079","line":18,"column":9,"nodeType":"976","messageId":"977","endLine":18,"endColumn":16},{"ruleId":"974","severity":1,"message":"1080","line":20,"column":10,"nodeType":"976","messageId":"977","endLine":20,"endColumn":17},{"ruleId":"974","severity":1,"message":"1081","line":20,"column":19,"nodeType":"976","messageId":"977","endLine":20,"endColumn":29},{"ruleId":"974","severity":1,"message":"1082","line":21,"column":10,"nodeType":"976","messageId":"977","endLine":21,"endColumn":25},{"ruleId":"974","severity":1,"message":"1083","line":21,"column":27,"nodeType":"976","messageId":"977","endLine":21,"endColumn":45},{"ruleId":"1003","severity":1,"message":"1084","line":55,"column":6,"nodeType":"1005","endLine":55,"endColumn":17,"suggestions":"1085"},{"ruleId":"1003","severity":1,"message":"1086","line":61,"column":6,"nodeType":"1005","endLine":61,"endColumn":37,"suggestions":"1087"},{"ruleId":"1003","severity":1,"message":"1088","line":61,"column":25,"nodeType":"1089","endLine":61,"endColumn":36},{"ruleId":"974","severity":1,"message":"1090","line":7,"column":3,"nodeType":"976","messageId":"977","endLine":7,"endColumn":18},{"ruleId":"1003","severity":1,"message":"1091","line":36,"column":6,"nodeType":"1005","endLine":36,"endColumn":17,"suggestions":"1092"},{"ruleId":"974","severity":1,"message":"1053","line":7,"column":8,"nodeType":"976","messageId":"977","endLine":7,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1093","line":27,"column":6,"nodeType":"1005","endLine":27,"endColumn":40,"suggestions":"1094"},{"ruleId":"974","severity":1,"message":"1035","line":7,"column":3,"nodeType":"976","messageId":"977","endLine":7,"endColumn":17},{"ruleId":"974","severity":1,"message":"975","line":21,"column":8,"nodeType":"976","messageId":"977","endLine":21,"endColumn":14},{"ruleId":"974","severity":1,"message":"1037","line":33,"column":17,"nodeType":"976","messageId":"977","endLine":33,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1095","line":65,"column":6,"nodeType":"1005","endLine":65,"endColumn":42,"suggestions":"1096"},{"ruleId":"974","severity":1,"message":"1097","line":6,"column":10,"nodeType":"976","messageId":"977","endLine":6,"endColumn":17},{"ruleId":"974","severity":1,"message":"1098","line":6,"column":40,"nodeType":"976","messageId":"977","endLine":6,"endColumn":44},{"ruleId":"974","severity":1,"message":"1099","line":9,"column":7,"nodeType":"976","messageId":"977","endLine":9,"endColumn":19},{"ruleId":"974","severity":1,"message":"1100","line":30,"column":24,"nodeType":"976","messageId":"977","endLine":30,"endColumn":30},{"ruleId":"970","replacedBy":"1101"},{"ruleId":"972","replacedBy":"1102"},{"ruleId":"974","severity":1,"message":"1103","line":2,"column":33,"nodeType":"976","messageId":"977","endLine":2,"endColumn":44},{"ruleId":"1104","severity":1,"message":"1105","line":34,"column":11,"nodeType":"1106","endLine":34,"endColumn":36},{"ruleId":"974","severity":1,"message":"1055","line":21,"column":10,"nodeType":"976","messageId":"977","endLine":21,"endColumn":14},{"ruleId":"1107","severity":1,"message":"1108","line":41,"column":20,"nodeType":"976","messageId":"1109","endLine":41,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1110","line":60,"column":6,"nodeType":"1005","endLine":60,"endColumn":21,"suggestions":"1111"},{"ruleId":"974","severity":1,"message":"1112","line":95,"column":15,"nodeType":"976","messageId":"977","endLine":95,"endColumn":23},{"ruleId":"974","severity":1,"message":"1053","line":13,"column":8,"nodeType":"976","messageId":"977","endLine":13,"endColumn":14},{"ruleId":"974","severity":1,"message":"1113","line":22,"column":10,"nodeType":"976","messageId":"977","endLine":22,"endColumn":15},{"ruleId":"1003","severity":1,"message":"1114","line":50,"column":6,"nodeType":"1005","endLine":50,"endColumn":12,"suggestions":"1115"},{"ruleId":"974","severity":1,"message":"1053","line":6,"column":8,"nodeType":"976","messageId":"977","endLine":6,"endColumn":14},{"ruleId":"974","severity":1,"message":"1116","line":9,"column":8,"nodeType":"976","messageId":"977","endLine":9,"endColumn":17},{"ruleId":"974","severity":1,"message":"1117","line":4,"column":10,"nodeType":"976","messageId":"977","endLine":4,"endColumn":39},{"ruleId":"974","severity":1,"message":"1118","line":5,"column":8,"nodeType":"976","messageId":"977","endLine":5,"endColumn":23},{"ruleId":"1003","severity":1,"message":"1119","line":32,"column":6,"nodeType":"1005","endLine":32,"endColumn":25,"suggestions":"1120"},{"ruleId":"974","severity":1,"message":"997","line":1,"column":17,"nodeType":"976","messageId":"977","endLine":1,"endColumn":23},{"ruleId":"974","severity":1,"message":"1121","line":1,"column":8,"nodeType":"976","messageId":"977","endLine":1,"endColumn":13},{"ruleId":"1003","severity":1,"message":"1122","line":30,"column":6,"nodeType":"1005","endLine":30,"endColumn":22,"suggestions":"1123"},{"ruleId":"974","severity":1,"message":"1124","line":26,"column":10,"nodeType":"976","messageId":"977","endLine":26,"endColumn":15},{"ruleId":"974","severity":1,"message":"988","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":17},{"ruleId":"974","severity":1,"message":"1125","line":3,"column":8,"nodeType":"976","messageId":"977","endLine":3,"endColumn":19},{"ruleId":"974","severity":1,"message":"989","line":4,"column":3,"nodeType":"976","messageId":"977","endLine":4,"endColumn":13},{"ruleId":"974","severity":1,"message":"1126","line":11,"column":10,"nodeType":"976","messageId":"977","endLine":11,"endColumn":19},{"ruleId":"974","severity":1,"message":"1127","line":38,"column":10,"nodeType":"976","messageId":"977","endLine":38,"endColumn":16},{"ruleId":"1003","severity":1,"message":"1128","line":82,"column":6,"nodeType":"1005","endLine":82,"endColumn":8,"suggestions":"1129"},{"ruleId":"974","severity":1,"message":"1121","line":1,"column":8,"nodeType":"976","messageId":"977","endLine":1,"endColumn":13},{"ruleId":"1003","severity":1,"message":"1130","line":67,"column":6,"nodeType":"1005","endLine":67,"endColumn":8,"suggestions":"1131"},{"ruleId":"974","severity":1,"message":"1053","line":15,"column":8,"nodeType":"976","messageId":"977","endLine":15,"endColumn":14},{"ruleId":"974","severity":1,"message":"1132","line":21,"column":7,"nodeType":"976","messageId":"977","endLine":21,"endColumn":12},{"ruleId":"1003","severity":1,"message":"1133","line":54,"column":6,"nodeType":"1005","endLine":54,"endColumn":8,"suggestions":"1134"},{"ruleId":"1135","severity":1,"message":"1136","line":169,"column":19,"nodeType":"1072","messageId":"1137","endLine":169,"endColumn":21},{"ruleId":"974","severity":1,"message":"988","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":17},{"ruleId":"970","replacedBy":"1138"},{"ruleId":"972","replacedBy":"1139"},{"ruleId":"974","severity":1,"message":"1140","line":3,"column":8,"nodeType":"976","messageId":"977","endLine":3,"endColumn":18},{"ruleId":"1003","severity":1,"message":"1141","line":48,"column":6,"nodeType":"1005","endLine":48,"endColumn":19,"suggestions":"1142"},{"ruleId":"1003","severity":1,"message":"1143","line":115,"column":6,"nodeType":"1005","endLine":115,"endColumn":64,"suggestions":"1144"},{"ruleId":"1003","severity":1,"message":"1145","line":74,"column":6,"nodeType":"1005","endLine":74,"endColumn":8,"suggestions":"1146"},{"ruleId":"974","severity":1,"message":"998","line":15,"column":8,"nodeType":"976","messageId":"977","endLine":15,"endColumn":14},{"ruleId":"974","severity":1,"message":"1147","line":17,"column":8,"nodeType":"976","messageId":"977","endLine":17,"endColumn":23},{"ruleId":"974","severity":1,"message":"1148","line":38,"column":10,"nodeType":"976","messageId":"977","endLine":38,"endColumn":23},{"ruleId":"974","severity":1,"message":"1149","line":38,"column":25,"nodeType":"976","messageId":"977","endLine":38,"endColumn":41},{"ruleId":"1003","severity":1,"message":"1150","line":54,"column":6,"nodeType":"1005","endLine":54,"endColumn":26,"suggestions":"1151"},{"ruleId":"1003","severity":1,"message":"1152","line":58,"column":6,"nodeType":"1005","endLine":58,"endColumn":21,"suggestions":"1153"},{"ruleId":"974","severity":1,"message":"1154","line":86,"column":9,"nodeType":"976","messageId":"977","endLine":86,"endColumn":25},{"ruleId":"974","severity":1,"message":"1155","line":24,"column":10,"nodeType":"976","messageId":"977","endLine":24,"endColumn":17},{"ruleId":"974","severity":1,"message":"1156","line":27,"column":9,"nodeType":"976","messageId":"977","endLine":27,"endColumn":21},{"ruleId":"1003","severity":1,"message":"1157","line":34,"column":6,"nodeType":"1005","endLine":34,"endColumn":17,"suggestions":"1158"},{"ruleId":"974","severity":1,"message":"1159","line":78,"column":9,"nodeType":"976","messageId":"977","endLine":78,"endColumn":15},{"ruleId":"1003","severity":1,"message":"1160","line":132,"column":6,"nodeType":"1005","endLine":132,"endColumn":8,"suggestions":"1161"},{"ruleId":"974","severity":1,"message":"1052","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":14},{"ruleId":"974","severity":1,"message":"1162","line":3,"column":29,"nodeType":"976","messageId":"977","endLine":3,"endColumn":41},{"ruleId":"974","severity":1,"message":"1163","line":48,"column":10,"nodeType":"976","messageId":"977","endLine":48,"endColumn":19},{"ruleId":"974","severity":1,"message":"1164","line":49,"column":10,"nodeType":"976","messageId":"977","endLine":49,"endColumn":17},{"ruleId":"1003","severity":1,"message":"1165","line":99,"column":6,"nodeType":"1005","endLine":99,"endColumn":8,"suggestions":"1166"},{"ruleId":"1003","severity":1,"message":"1167","line":136,"column":6,"nodeType":"1005","endLine":136,"endColumn":8,"suggestions":"1168"},{"ruleId":"1135","severity":1,"message":"1169","line":226,"column":65,"nodeType":"1072","messageId":"1170","endLine":226,"endColumn":67},{"ruleId":"1104","severity":1,"message":"1105","line":144,"column":23,"nodeType":"1106","endLine":144,"endColumn":63},{"ruleId":"974","severity":1,"message":"1013","line":51,"column":10,"nodeType":"976","messageId":"977","endLine":51,"endColumn":17},{"ruleId":"1003","severity":1,"message":"1171","line":85,"column":6,"nodeType":"1005","endLine":85,"endColumn":18,"suggestions":"1172"},{"ruleId":"1003","severity":1,"message":"1173","line":91,"column":6,"nodeType":"1005","endLine":91,"endColumn":8,"suggestions":"1174"},{"ruleId":"1003","severity":1,"message":"1175","line":95,"column":6,"nodeType":"1005","endLine":95,"endColumn":12,"suggestions":"1176"},{"ruleId":"1135","severity":1,"message":"1136","line":103,"column":23,"nodeType":"1072","messageId":"1137","endLine":103,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1177","line":142,"column":6,"nodeType":"1005","endLine":142,"endColumn":15,"suggestions":"1178"},{"ruleId":"1003","severity":1,"message":"1179","line":185,"column":6,"nodeType":"1005","endLine":185,"endColumn":24,"suggestions":"1180"},{"ruleId":"974","severity":1,"message":"1181","line":268,"column":9,"nodeType":"976","messageId":"977","endLine":268,"endColumn":19},{"ruleId":"1182","severity":1,"message":"1183","line":287,"column":7,"nodeType":"1184","messageId":"984","endLine":287,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1185","line":346,"column":6,"nodeType":"1005","endLine":352,"endColumn":4,"suggestions":"1186"},{"ruleId":"974","severity":1,"message":"998","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":14},{"ruleId":"974","severity":1,"message":"1187","line":5,"column":8,"nodeType":"976","messageId":"977","endLine":5,"endColumn":22},{"ruleId":"974","severity":1,"message":"1188","line":11,"column":7,"nodeType":"976","messageId":"977","endLine":11,"endColumn":19},{"ruleId":"974","severity":1,"message":"1189","line":39,"column":16,"nodeType":"976","messageId":"977","endLine":39,"endColumn":23},{"ruleId":"974","severity":1,"message":"1190","line":40,"column":19,"nodeType":"976","messageId":"977","endLine":40,"endColumn":29},{"ruleId":"974","severity":1,"message":"1191","line":46,"column":10,"nodeType":"976","messageId":"977","endLine":46,"endColumn":28},{"ruleId":"1003","severity":1,"message":"1192","line":73,"column":6,"nodeType":"1005","endLine":73,"endColumn":8,"suggestions":"1193"},{"ruleId":"1003","severity":1,"message":"1194","line":214,"column":6,"nodeType":"1005","endLine":214,"endColumn":41,"suggestions":"1195"},{"ruleId":"974","severity":1,"message":"998","line":15,"column":8,"nodeType":"976","messageId":"977","endLine":15,"endColumn":14},{"ruleId":"974","severity":1,"message":"1147","line":17,"column":8,"nodeType":"976","messageId":"977","endLine":17,"endColumn":23},{"ruleId":"1003","severity":1,"message":"1196","line":51,"column":6,"nodeType":"1005","endLine":51,"endColumn":26,"suggestions":"1197"},{"ruleId":"1003","severity":1,"message":"1198","line":55,"column":6,"nodeType":"1005","endLine":55,"endColumn":21,"suggestions":"1199"},{"ruleId":"974","severity":1,"message":"1052","line":5,"column":8,"nodeType":"976","messageId":"977","endLine":5,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1200","line":59,"column":6,"nodeType":"1005","endLine":59,"endColumn":8,"suggestions":"1201"},{"ruleId":"974","severity":1,"message":"998","line":15,"column":8,"nodeType":"976","messageId":"977","endLine":15,"endColumn":14},{"ruleId":"974","severity":1,"message":"1147","line":17,"column":8,"nodeType":"976","messageId":"977","endLine":17,"endColumn":23},{"ruleId":"1003","severity":1,"message":"1202","line":52,"column":6,"nodeType":"1005","endLine":52,"endColumn":26,"suggestions":"1203"},{"ruleId":"1003","severity":1,"message":"1204","line":56,"column":6,"nodeType":"1005","endLine":56,"endColumn":21,"suggestions":"1205"},{"ruleId":"974","severity":1,"message":"1052","line":5,"column":8,"nodeType":"976","messageId":"977","endLine":5,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1200","line":73,"column":6,"nodeType":"1005","endLine":73,"endColumn":8,"suggestions":"1206"},{"ruleId":"1047","severity":1,"message":"1048","line":128,"column":13,"nodeType":"1049","messageId":"1062","endLine":128,"endColumn":40},{"ruleId":"974","severity":1,"message":"998","line":11,"column":8,"nodeType":"976","messageId":"977","endLine":11,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1207","line":48,"column":6,"nodeType":"1005","endLine":48,"endColumn":26,"suggestions":"1208"},{"ruleId":"1003","severity":1,"message":"1209","line":56,"column":6,"nodeType":"1005","endLine":56,"endColumn":36,"suggestions":"1210"},{"ruleId":"1003","severity":1,"message":"1211","line":23,"column":6,"nodeType":"1005","endLine":23,"endColumn":8,"suggestions":"1212"},{"ruleId":"1213","severity":1,"message":"1214","line":50,"column":9,"nodeType":"1215","messageId":"984","endLine":50,"endColumn":11},{"ruleId":"974","severity":1,"message":"1216","line":13,"column":7,"nodeType":"976","messageId":"977","endLine":13,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1217","line":50,"column":6,"nodeType":"1005","endLine":50,"endColumn":17,"suggestions":"1218"},{"ruleId":"1003","severity":1,"message":"1219","line":127,"column":6,"nodeType":"1005","endLine":127,"endColumn":17,"suggestions":"1220"},{"ruleId":"1003","severity":1,"message":"1067","line":136,"column":6,"nodeType":"1005","endLine":136,"endColumn":20,"suggestions":"1221"},{"ruleId":"1003","severity":1,"message":"1222","line":88,"column":6,"nodeType":"1005","endLine":88,"endColumn":8,"suggestions":"1223"},{"ruleId":"1104","severity":1,"message":"1105","line":11,"column":7,"nodeType":"1106","endLine":17,"endColumn":9},{"ruleId":"1003","severity":1,"message":"1019","line":50,"column":6,"nodeType":"1005","endLine":50,"endColumn":26,"suggestions":"1224"},{"ruleId":"1003","severity":1,"message":"1021","line":54,"column":6,"nodeType":"1005","endLine":54,"endColumn":21,"suggestions":"1225"},{"ruleId":"974","severity":1,"message":"1124","line":47,"column":10,"nodeType":"976","messageId":"977","endLine":47,"endColumn":15},{"ruleId":"974","severity":1,"message":"1226","line":4,"column":8,"nodeType":"976","messageId":"977","endLine":4,"endColumn":16},{"ruleId":"974","severity":1,"message":"1227","line":4,"column":3,"nodeType":"976","messageId":"977","endLine":4,"endColumn":10},{"ruleId":"974","severity":1,"message":"1052","line":12,"column":8,"nodeType":"976","messageId":"977","endLine":12,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1228","line":57,"column":6,"nodeType":"1005","endLine":57,"endColumn":8,"suggestions":"1229"},{"ruleId":"1104","severity":1,"message":"1105","line":183,"column":9,"nodeType":"1106","endLine":188,"endColumn":11},{"ruleId":"974","severity":1,"message":"1053","line":6,"column":8,"nodeType":"976","messageId":"977","endLine":6,"endColumn":14},{"ruleId":"974","severity":1,"message":"997","line":1,"column":40,"nodeType":"976","messageId":"977","endLine":1,"endColumn":46},{"ruleId":"974","severity":1,"message":"1230","line":15,"column":10,"nodeType":"976","messageId":"977","endLine":15,"endColumn":20},{"ruleId":"974","severity":1,"message":"1231","line":15,"column":22,"nodeType":"976","messageId":"977","endLine":15,"endColumn":33},{"ruleId":"1003","severity":1,"message":"1232","line":82,"column":6,"nodeType":"1005","endLine":82,"endColumn":8,"suggestions":"1233"},{"ruleId":"1135","severity":1,"message":"1136","line":111,"column":34,"nodeType":"1072","messageId":"1137","endLine":111,"endColumn":36},{"ruleId":"1135","severity":1,"message":"1169","line":341,"column":26,"nodeType":"1072","messageId":"1170","endLine":341,"endColumn":28},{"ruleId":"974","severity":1,"message":"1077","line":14,"column":10,"nodeType":"976","messageId":"977","endLine":14,"endColumn":15},{"ruleId":"974","severity":1,"message":"1234","line":43,"column":19,"nodeType":"976","messageId":"977","endLine":43,"endColumn":29},{"ruleId":"1003","severity":1,"message":"1235","line":57,"column":6,"nodeType":"1005","endLine":57,"endColumn":26,"suggestions":"1236"},{"ruleId":"1003","severity":1,"message":"1237","line":68,"column":6,"nodeType":"1005","endLine":68,"endColumn":21,"suggestions":"1238"},{"ruleId":"974","severity":1,"message":"1239","line":7,"column":3,"nodeType":"976","messageId":"977","endLine":7,"endColumn":10},{"ruleId":"974","severity":1,"message":"1147","line":11,"column":8,"nodeType":"976","messageId":"977","endLine":11,"endColumn":23},{"ruleId":"974","severity":1,"message":"1240","line":13,"column":8,"nodeType":"976","messageId":"977","endLine":13,"endColumn":22},{"ruleId":"974","severity":1,"message":"998","line":18,"column":8,"nodeType":"976","messageId":"977","endLine":18,"endColumn":14},{"ruleId":"974","severity":1,"message":"1241","line":35,"column":10,"nodeType":"976","messageId":"977","endLine":35,"endColumn":15},{"ruleId":"974","severity":1,"message":"1132","line":36,"column":10,"nodeType":"976","messageId":"977","endLine":36,"endColumn":15},{"ruleId":"1003","severity":1,"message":"1242","line":161,"column":6,"nodeType":"1005","endLine":161,"endColumn":26,"suggestions":"1243"},{"ruleId":"1003","severity":1,"message":"1244","line":165,"column":6,"nodeType":"1005","endLine":165,"endColumn":43,"suggestions":"1245"},{"ruleId":"974","severity":1,"message":"1246","line":1,"column":36,"nodeType":"976","messageId":"977","endLine":1,"endColumn":44},{"ruleId":"974","severity":1,"message":"988","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":17},{"ruleId":"974","severity":1,"message":"1077","line":4,"column":10,"nodeType":"976","messageId":"977","endLine":4,"endColumn":15},{"ruleId":"974","severity":1,"message":"1247","line":5,"column":10,"nodeType":"976","messageId":"977","endLine":5,"endColumn":25},{"ruleId":"974","severity":1,"message":"1248","line":9,"column":3,"nodeType":"976","messageId":"977","endLine":9,"endColumn":14},{"ruleId":"974","severity":1,"message":"1249","line":10,"column":3,"nodeType":"976","messageId":"977","endLine":10,"endColumn":13},{"ruleId":"974","severity":1,"message":"1231","line":12,"column":22,"nodeType":"976","messageId":"977","endLine":12,"endColumn":33},{"ruleId":"974","severity":1,"message":"1250","line":13,"column":8,"nodeType":"976","messageId":"977","endLine":13,"endColumn":13},{"ruleId":"974","severity":1,"message":"1053","line":14,"column":8,"nodeType":"976","messageId":"977","endLine":14,"endColumn":14},{"ruleId":"1003","severity":1,"message":"1251","line":29,"column":6,"nodeType":"1005","endLine":29,"endColumn":8,"suggestions":"1252"},{"ruleId":"974","severity":1,"message":"987","line":1,"column":29,"nodeType":"976","messageId":"977","endLine":1,"endColumn":38},{"ruleId":"974","severity":1,"message":"1253","line":11,"column":10,"nodeType":"976","messageId":"977","endLine":11,"endColumn":21},{"ruleId":"974","severity":1,"message":"1037","line":12,"column":17,"nodeType":"976","messageId":"977","endLine":12,"endColumn":25},{"ruleId":"974","severity":1,"message":"1253","line":15,"column":10,"nodeType":"976","messageId":"977","endLine":15,"endColumn":21},{"ruleId":"974","severity":1,"message":"1254","line":2,"column":8,"nodeType":"976","messageId":"977","endLine":2,"endColumn":16},{"ruleId":"974","severity":1,"message":"1255","line":3,"column":8,"nodeType":"976","messageId":"977","endLine":3,"endColumn":12},{"ruleId":"1104","severity":1,"message":"1105","line":19,"column":9,"nodeType":"1106","endLine":19,"endColumn":67},{"ruleId":"1104","severity":1,"message":"1105","line":21,"column":11,"nodeType":"1106","endLine":27,"endColumn":13},{"ruleId":"974","severity":1,"message":"1031","line":4,"column":8,"nodeType":"976","messageId":"977","endLine":4,"endColumn":21},{"ruleId":"1104","severity":1,"message":"1105","line":54,"column":9,"nodeType":"1106","endLine":54,"endColumn":58},{"ruleId":"974","severity":1,"message":"987","line":1,"column":29,"nodeType":"976","messageId":"977","endLine":1,"endColumn":38},{"ruleId":"974","severity":1,"message":"998","line":17,"column":8,"nodeType":"976","messageId":"977","endLine":17,"endColumn":14},{"ruleId":"974","severity":1,"message":"1037","line":31,"column":17,"nodeType":"976","messageId":"977","endLine":31,"endColumn":25},{"ruleId":"974","severity":1,"message":"1256","line":47,"column":10,"nodeType":"976","messageId":"977","endLine":47,"endColumn":24},{"ruleId":"974","severity":1,"message":"1257","line":49,"column":27,"nodeType":"976","messageId":"977","endLine":49,"endColumn":45},{"ruleId":"1213","severity":1,"message":"1214","line":140,"column":9,"nodeType":"1215","messageId":"984","endLine":140,"endColumn":11},{"ruleId":"974","severity":1,"message":"1258","line":25,"column":10,"nodeType":"976","messageId":"977","endLine":25,"endColumn":16},{"ruleId":"974","severity":1,"message":"1259","line":25,"column":18,"nodeType":"976","messageId":"977","endLine":25,"endColumn":27},{"ruleId":"1260","severity":1,"message":"1261","line":7,"column":3,"nodeType":"1262","messageId":"1263","endLine":9,"endColumn":4},{"ruleId":"974","severity":1,"message":"1121","line":1,"column":8,"nodeType":"976","messageId":"977","endLine":1,"endColumn":13},{"ruleId":"974","severity":1,"message":"1124","line":14,"column":10,"nodeType":"976","messageId":"977","endLine":14,"endColumn":15},{"ruleId":"1003","severity":1,"message":"1264","line":78,"column":6,"nodeType":"1005","endLine":78,"endColumn":13,"suggestions":"1265"},{"ruleId":"974","severity":1,"message":"993","line":103,"column":9,"nodeType":"976","messageId":"977","endLine":103,"endColumn":20},{"ruleId":"1003","severity":1,"message":"1266","line":125,"column":6,"nodeType":"1005","endLine":125,"endColumn":8,"suggestions":"1267"},{"ruleId":"1003","severity":1,"message":"1042","line":34,"column":6,"nodeType":"1005","endLine":34,"endColumn":17,"suggestions":"1268"},{"ruleId":"974","severity":1,"message":"1036","line":4,"column":8,"nodeType":"976","messageId":"977","endLine":4,"endColumn":17},{"ruleId":"974","severity":1,"message":"1269","line":29,"column":23,"nodeType":"976","messageId":"977","endLine":29,"endColumn":37},{"ruleId":"974","severity":1,"message":"1037","line":17,"column":17,"nodeType":"976","messageId":"977","endLine":17,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1270","line":36,"column":6,"nodeType":"1005","endLine":36,"endColumn":26,"suggestions":"1271"},{"ruleId":"1003","severity":1,"message":"1272","line":40,"column":6,"nodeType":"1005","endLine":40,"endColumn":8,"suggestions":"1273"},{"ruleId":"974","severity":1,"message":"1154","line":84,"column":9,"nodeType":"976","messageId":"977","endLine":84,"endColumn":25},{"ruleId":"974","severity":1,"message":"1037","line":17,"column":17,"nodeType":"976","messageId":"977","endLine":17,"endColumn":25},{"ruleId":"1003","severity":1,"message":"1274","line":36,"column":6,"nodeType":"1005","endLine":36,"endColumn":26,"suggestions":"1275"},{"ruleId":"1003","severity":1,"message":"1276","line":40,"column":6,"nodeType":"1005","endLine":40,"endColumn":8,"suggestions":"1277"},{"ruleId":"974","severity":1,"message":"1278","line":3,"column":3,"nodeType":"976","messageId":"977","endLine":3,"endColumn":12},{"ruleId":"974","severity":1,"message":"1279","line":4,"column":3,"nodeType":"976","messageId":"977","endLine":4,"endColumn":22},{"ruleId":"974","severity":1,"message":"1280","line":11,"column":8,"nodeType":"976","messageId":"977","endLine":11,"endColumn":18},{"ruleId":"974","severity":1,"message":"1281","line":13,"column":8,"nodeType":"976","messageId":"977","endLine":13,"endColumn":19},{"ruleId":"974","severity":1,"message":"1163","line":31,"column":10,"nodeType":"976","messageId":"977","endLine":31,"endColumn":19},{"ruleId":"974","severity":1,"message":"1282","line":31,"column":21,"nodeType":"976","messageId":"977","endLine":31,"endColumn":33},{"ruleId":"974","severity":1,"message":"1164","line":32,"column":10,"nodeType":"976","messageId":"977","endLine":32,"endColumn":17},{"ruleId":"974","severity":1,"message":"1283","line":32,"column":19,"nodeType":"976","messageId":"977","endLine":32,"endColumn":29},{"ruleId":"974","severity":1,"message":"1284","line":33,"column":10,"nodeType":"976","messageId":"977","endLine":33,"endColumn":24},{"ruleId":"974","severity":1,"message":"1285","line":33,"column":26,"nodeType":"976","messageId":"977","endLine":33,"endColumn":43},{"ruleId":"1003","severity":1,"message":"1165","line":55,"column":6,"nodeType":"1005","endLine":55,"endColumn":8,"suggestions":"1286"},{"ruleId":"974","severity":1,"message":"1278","line":3,"column":3,"nodeType":"976","messageId":"977","endLine":3,"endColumn":12},{"ruleId":"974","severity":1,"message":"1279","line":4,"column":3,"nodeType":"976","messageId":"977","endLine":4,"endColumn":22},{"ruleId":"974","severity":1,"message":"1280","line":11,"column":8,"nodeType":"976","messageId":"977","endLine":11,"endColumn":18},{"ruleId":"974","severity":1,"message":"1281","line":13,"column":8,"nodeType":"976","messageId":"977","endLine":13,"endColumn":19},{"ruleId":"974","severity":1,"message":"1163","line":36,"column":10,"nodeType":"976","messageId":"977","endLine":36,"endColumn":19},{"ruleId":"974","severity":1,"message":"1282","line":36,"column":21,"nodeType":"976","messageId":"977","endLine":36,"endColumn":33},{"ruleId":"974","severity":1,"message":"1164","line":37,"column":10,"nodeType":"976","messageId":"977","endLine":37,"endColumn":17},{"ruleId":"974","severity":1,"message":"1283","line":37,"column":19,"nodeType":"976","messageId":"977","endLine":37,"endColumn":29},{"ruleId":"974","severity":1,"message":"1284","line":38,"column":10,"nodeType":"976","messageId":"977","endLine":38,"endColumn":24},{"ruleId":"974","severity":1,"message":"1285","line":38,"column":26,"nodeType":"976","messageId":"977","endLine":38,"endColumn":43},{"ruleId":"1003","severity":1,"message":"1165","line":65,"column":6,"nodeType":"1005","endLine":65,"endColumn":8,"suggestions":"1287"},{"ruleId":"974","severity":1,"message":"993","line":88,"column":9,"nodeType":"976","messageId":"977","endLine":88,"endColumn":20},{"ruleId":"1003","severity":1,"message":"1266","line":104,"column":6,"nodeType":"1005","endLine":104,"endColumn":8,"suggestions":"1288"},"no-native-reassign",["1289"],"no-negated-in-lhs",["1290"],"no-unused-vars","'NoData' is defined but never used.","Identifier","unusedVar","no-redeclare","'i' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["1289"],["1290"],"'useEffect' is defined but never used.","'PropTypes' is defined but never used.","'getRegions' is defined but never used.","'categoryTitle' is assigned a value but never used.","'dialogData' is assigned a value but never used.","'setDialogData' is assigned a value but never used.","'closeDialog' is assigned a value but never used.",["1289"],["1290"],"'formatPieData' is assigned a value but never used.","'useRef' is defined but never used.","'Button' is defined but never used.","'DialogToggler' is defined but never used.","'EditReportDialog' is defined but never used.","'Excel' is defined but never used.","'editDialog' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getReports'. Either include it or remove the dependency array.","ArrayExpression",["1291"],"React Hook useEffect has missing dependencies: 'dispatch', 'getReports', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1292"],"'openEditDialog' is assigned a value but never used.","'onEditDialogClose' is assigned a value but never used.","'isOperator' is assigned a value but never used.","'Search' is defined but never used.","'loading' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSources'. Either include it or remove the dependency array.",["1293"],"React Hook useEffect has missing dependencies: 'getSources', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1294"],"'TableLegend' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getPolls', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1295"],"React Hook useEffect has a missing dependency: 'getPolls'. Either include it or remove the dependency array.",["1296"],"'layoutStyle' is defined but never used.","'Filters' is defined but never used.","'dialog' is assigned a value but never used.","'dialogId' is assigned a value but never used.","'setFromDate' is assigned a value but never used.","'setToDate' is assigned a value but never used.","'toggleRef' is assigned a value but never used.","'openDialog' is assigned a value but never used.","'shahrbinTitle' is defined but never used.","'headerImage' is defined but never used.","'Title' is defined but never used.","'Tabs' is defined but never used.","'defaultFilters' is defined but never used.","'TextInput' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getComments', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1297"],"React Hook useEffect has a missing dependency: 'getComments'. Either include it or remove the dependency array.",["1298"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["1299"],"'RADIAN' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setCategoryTitle'. Either include it or remove the dependency array. If 'setCategoryTitle' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1300"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["1289"],["1290"],"'styles' is defined but never used.","'Loader' is defined but never used.","'rolesDisplayName' is defined but never used.","'data' is assigned a value but never used.",["1289"],["1290"],"React Hook useEffect has unnecessary dependencies: 'inputRef.current' and 'wrapperRef.current'. Either exclude them or remove the dependency array. Mutable values like 'wrapperRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1301"],"React Hook useEffect has an unnecessary dependency: 'inputRef.current'. Either exclude it or remove the dependency array. Mutable values like 'inputRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1302"],"noDuplicateProps","React Hook useEffect has missing dependencies: 'closeModal' and 'openModal'. Either include them or remove the dependency array.",["1303"],"React Hook useEffect has missing dependencies: 'isOnTop', 'outSideClick', 'setCondition', and 'store.modals.length'. Either include them or remove the dependency array. If 'setCondition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1304"],"React Hook useEffect has missing dependencies: 'id' and 'setIsClicked'. Either include them or remove the dependency array.",["1305"],"'bounding' is assigned a value but never used.","'setBounding' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'feature' and 'map'. Either include them or remove the dependency array.",["1306"],"React Hook useEffect has missing dependencies: 'clickable', 'coords', 'handleMapClick', and 'zoom'. Either include them or remove the dependency array.",["1307"],"'toast' is defined but never used.","'location' is assigned a value but never used.","'history' is assigned a value but never used.","'payload' is assigned a value but never used.","'setPayload' is assigned a value but never used.","'makeSaveRequest' is assigned a value but never used.","'setMakeSaveRequest' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'defaultAddress', 'defaultCoordinates.latitude', 'defaultCoordinates.longitude', 'store.initials.instance.latitude', and 'store.initials.instance.longitude'. Either include them or remove the dependency array. If 'setCoordinates' needs the current value of 'defaultCoordinates.latitude', you can also switch to useReducer instead of useState and read 'defaultCoordinates.latitude' in the reducer.",["1308"],"React Hook useEffect has a missing dependency: 'condition'. Either include it or remove the dependency array. Mutable values like 'inputRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1309"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","TemplateLiteral","'checkLoginState' is defined but never used.","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.",["1310"],"React Hook useEffect has a missing dependency: 'children'. Either include it or remove the dependency array. If 'setActiveTab' needs the current value of 'children', you can also switch to useReducer instead of useState and read 'children' in the reducer.",["1311"],"React Hook useEffect has a missing dependency: 'getTasks'. Either include it or remove the dependency array.",["1312"],"'Tooltip' is defined but never used.","'Cell' is defined but never used.","'renderLegend' is assigned a value but never used.","'height' is assigned a value but never used.",["1289"],["1290"],"'ZoomControl' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-const-assign","'level' is constant.","const","React Hook useEffect has missing dependencies: 'selectBoxes', 'setCategoryId', and 'values'. Either include them or remove the dependency array. If 'setCategoryId' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1313"],"'subjects' is assigned a value but never used.","'state' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'formData'. Either include it or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.",["1314"],"'StageForm' is defined but never used.","'convertserverTimeToDateString' is defined but never used.","'ShowAttachments' is defined but never used.","React Hook useEffect has missing dependencies: 'event' and 'whitelists'. Either include them or remove the dependency array.",["1315"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'callback', 'listenTo', and 'once'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1316"],"'store' is assigned a value but never used.","'inputStyles' is defined but never used.","'CommonAPI' is defined but never used.","'medias' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'report'. Either include it or remove the dependency array.",["1317"],"React Hook useEffect has a missing dependency: 'callBack'. Either include it or remove the dependency array. If 'callBack' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1318"],"'roles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleSelectedActors' and 'showActors'. Either include them or remove the dependency array.",["1319"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside",["1289"],["1290"],"'DatePicker' is defined but never used.","React Hook useEffect has missing dependencies: 'name', 'onSelect', and 'showCalender'. Either include them or remove the dependency array. If 'onSelect' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1320"],"React Hook useEffect has missing dependencies: 'dispatch', 'handleInDialog', 'id', 'isInDialog', and 'store.modals'. Either include them or remove the dependency array. Mutable values like 'calenderRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1321"],"React Hook useEffect has missing dependencies: 'media' and 'type'. Either include them or remove the dependency array.",["1322"],"'DropdownWrapper' is defined but never used.","'createLoading' is assigned a value but never used.","'setCreateLoading' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getCategories', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1323"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["1324"],"'onCategoryEdited' is assigned a value but never used.","'markers' is assigned a value but never used.","'locationsRef' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addMarkerLayer' and 'map'. Either include them or remove the dependency array.",["1325"],"'onZoom' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'center' and 'zoom'. Either include them or remove the dependency array.",["1326"],"'ProcessesAPI' is defined but never used.","'processes' is assigned a value but never used.","'parents' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fillInputs' and 'isEditMode'. Either include them or remove the dependency array.",["1327"],"React Hook useEffect has a missing dependency: 'getOptions'. Either include it or remove the dependency array.",["1328"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'isStatic'. Either include it or remove the dependency array.",["1329"],"React Hook useEffect has missing dependencies: 'getData' and 'isStatic'. Either include them or remove the dependency array.",["1330"],"React Hook useEffect has a missing dependency: 'formatData'. Either include it or remove the dependency array.",["1331"],"React Hook useEffect has a missing dependency: 'formatSelectedStrings'. Either include it or remove the dependency array.",["1332"],"React Hook useEffect has missing dependencies: 'handleDefaultSelecteds' and 'options'. Either include them or remove the dependency array.",["1333"],"'wrapperRef' is assigned a value but never used.","no-dupe-keys","Duplicate key 'display'.","ObjectExpression","React Hook useEffect has missing dependencies: 'dispatch', 'handleInDialog', 'handleRegular', 'id', 'isInDialog', and 'store.modals'. Either include them or remove the dependency array. Mutable values like 'inputRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1334"],"'useMakeRequest' is defined but never used.","'buttonsStyle' is assigned a value but never used.","'setData' is assigned a value but never used.","'setAllData' is assigned a value but never used.","'confirmedSelecteds' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'defaultSelecteds', 'getFlatData', 'isStatic', and 'staticData'. Either include them or remove the dependency array. If 'setSelecteds' needs the current value of 'defaultSelecteds', you can also switch to useReducer instead of useState and read 'defaultSelecteds' in the reducer.",["1335"],"React Hook useEffect has an unnecessary dependency: 'searchInputRef.current'. Either exclude it or remove the dependency array. Mutable values like 'searchInputRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["1336"],"React Hook useEffect has missing dependencies: 'dispatch', 'getProccesses', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1337"],"React Hook useEffect has a missing dependency: 'getProccesses'. Either include it or remove the dependency array.",["1338"],"React Hook useEffect has missing dependencies: 'getData' and 'isEditMode'. Either include them or remove the dependency array.",["1339"],"React Hook useEffect has missing dependencies: 'dispatch', 'getAllOrgans', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1340"],"React Hook useEffect has a missing dependency: 'getAllOrgans'. Either include it or remove the dependency array.",["1341"],["1342"],"React Hook useEffect has missing dependencies: 'getViolations', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1343"],"React Hook useEffect has missing dependencies: 'dispatch' and 'getViolations'. Either include them or remove the dependency array.",["1344"],"React Hook useEffect has missing dependencies: 'dialogData?.comment?.text', 'dialogData?.report?.comments', and 'type'. Either include them or remove the dependency array. If 'setComments' needs the current value of 'dialogData.report.comments', you can also switch to useReducer instead of useState and read 'dialogData.report.comments' in the reducer.",["1345"],"no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","'multiSelectWrapper' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handleData', 'hideDialog', and 'showDialog'. Either include them or remove the dependency array.",["1346"],"React Hook useEffect has missing dependencies: 'isOnTop', 'outSideClick', and 'setCondition'. Either include them or remove the dependency array. If 'setCondition' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1347"],["1348"],"React Hook useEffect has a missing dependency: 'handleData'. Either include it or remove the dependency array.",["1349"],["1350"],["1351"],"'Textarea' is defined but never used.","'callAPI' is defined but never used.","React Hook useEffect has missing dependencies: 'defaltValues' and 'isEditMode'. Either include them or remove the dependency array.",["1352"],"'useHistory' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'pollData'. Either include it or remove the dependency array.",["1353"],"'setFilters' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1354"],"React Hook useEffect has missing dependencies: 'isScatterMap' and 'selectedChartId'. Either include them or remove the dependency array.",["1355"],"'hasRole' is defined but never used.","'dropdownStyles' is defined but never used.","'query' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'getAllUsers', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1356"],"React Hook useEffect has a missing dependency: 'getAllUsers'. Either include it or remove the dependency array.",["1357"],"'useState' is defined but never used.","'AuthenticateAPI' is defined but never used.","'serverError' is defined but never used.","'signUserIn' is defined but never used.","'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["1358"],"'openVisible' is assigned a value but never used.","'shahrbin' is defined but never used.","'fava' is defined but never used.","'categoryTitles' is assigned a value but never used.","'setGroupCategories' is assigned a value but never used.","'isOpen' is assigned a value but never used.","'setIsOpen' is assigned a value but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","React Hook useEffect has a missing dependency: 'getInitials'. Either include it or remove the dependency array.",["1359"],"React Hook useEffect has a missing dependency: 'getComplaints'. Either include it or remove the dependency array.",["1360"],["1361"],"'setAttachments' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllCategories', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1362"],"React Hook useEffect has a missing dependency: 'getAllCategories'. Either include it or remove the dependency array.",["1363"],"React Hook useEffect has missing dependencies: 'getAllUnits', 'match.path', and 'store.refresh.page'. Either include them or remove the dependency array.",["1364"],"React Hook useEffect has a missing dependency: 'getAllUnits'. Either include it or remove the dependency array.",["1365"],"'constants' is defined but never used.","'getFromLocalStorage' is defined but never used.","'TreeSystem' is defined but never used.","'MultiSelect' is defined but never used.","'setProcesses' is assigned a value but never used.","'setParents' is assigned a value but never used.","'categoryDialog' is assigned a value but never used.","'setCategoryDialog' is assigned a value but never used.",["1366"],["1367"],["1368"],"no-global-assign","no-unsafe-negation",{"desc":"1369","fix":"1370"},{"desc":"1371","fix":"1372"},{"desc":"1373","fix":"1374"},{"desc":"1375","fix":"1376"},{"desc":"1377","fix":"1378"},{"desc":"1379","fix":"1380"},{"desc":"1381","fix":"1382"},{"desc":"1383","fix":"1384"},{"desc":"1385","fix":"1386"},{"desc":"1387","fix":"1388"},{"desc":"1389","fix":"1390"},{"desc":"1391","fix":"1392"},{"desc":"1393","fix":"1394"},{"desc":"1395","fix":"1396"},{"desc":"1397","fix":"1398"},{"desc":"1399","fix":"1400"},{"desc":"1401","fix":"1402"},{"desc":"1403","fix":"1404"},{"desc":"1405","fix":"1406"},{"desc":"1407","fix":"1408"},{"desc":"1409","fix":"1410"},{"desc":"1411","fix":"1412"},{"desc":"1413","fix":"1414"},{"desc":"1415","fix":"1416"},{"desc":"1417","fix":"1418"},{"desc":"1419","fix":"1420"},{"desc":"1421","fix":"1422"},{"desc":"1423","fix":"1424"},{"desc":"1425","fix":"1426"},{"desc":"1427","fix":"1428"},{"desc":"1429","fix":"1430"},{"desc":"1431","fix":"1432"},{"desc":"1433","fix":"1434"},{"desc":"1435","fix":"1436"},{"desc":"1437","fix":"1438"},{"desc":"1439","fix":"1440"},{"desc":"1441","fix":"1442"},{"desc":"1443","fix":"1444"},{"desc":"1445","fix":"1446"},{"desc":"1447","fix":"1448"},{"desc":"1449","fix":"1450"},{"desc":"1451","fix":"1452"},{"desc":"1453","fix":"1454"},{"desc":"1455","fix":"1456"},{"desc":"1457","fix":"1458"},{"desc":"1405","fix":"1459"},{"desc":"1460","fix":"1461"},{"desc":"1462","fix":"1463"},{"desc":"1464","fix":"1465"},{"desc":"1466","fix":"1467"},{"desc":"1468","fix":"1469"},{"desc":"1464","fix":"1470"},{"desc":"1471","fix":"1472"},{"desc":"1473","fix":"1474"},{"desc":"1475","fix":"1476"},{"desc":"1477","fix":"1478"},{"desc":"1479","fix":"1480"},{"desc":"1397","fix":"1481"},{"desc":"1482","fix":"1483"},{"desc":"1377","fix":"1484"},{"desc":"1379","fix":"1485"},{"desc":"1486","fix":"1487"},{"desc":"1488","fix":"1489"},{"desc":"1490","fix":"1491"},{"desc":"1492","fix":"1493"},{"desc":"1494","fix":"1495"},{"desc":"1496","fix":"1497"},{"desc":"1498","fix":"1499"},{"desc":"1500","fix":"1501"},{"desc":"1502","fix":"1503"},{"desc":"1385","fix":"1504"},{"desc":"1505","fix":"1506"},{"desc":"1507","fix":"1508"},{"desc":"1509","fix":"1510"},{"desc":"1511","fix":"1512"},{"desc":"1441","fix":"1513"},{"desc":"1441","fix":"1514"},{"desc":"1502","fix":"1515"},"Update the dependencies array to be: [store.filters, page, limit, getReports]",{"range":"1516","text":"1517"},"Update the dependencies array to be: [dispatch, getReports, match.path, store.refresh.call, store.refresh.page]",{"range":"1518","text":"1519"},"Update the dependencies array to be: [getSources]",{"range":"1520","text":"1521"},"Update the dependencies array to be: [getSources, match.path, store.refresh.call, store.refresh.page]",{"range":"1522","text":"1523"},"Update the dependencies array to be: [dispatch, getPolls, match.path, store.refresh.call, store.refresh.page]",{"range":"1524","text":"1525"},"Update the dependencies array to be: [getPolls, store.filters]",{"range":"1526","text":"1527"},"Update the dependencies array to be: [getComments, match.path, store.refresh.call, store.refresh.page]",{"range":"1528","text":"1529"},"Update the dependencies array to be: [store.filters, page, perPage, getComments]",{"range":"1530","text":"1531"},"Update the dependencies array to be: [childData, getData]",{"range":"1532","text":"1533"},"Update the dependencies array to be: [selecteds, setCategoryTitle]",{"range":"1534","text":"1535"},"Update the dependencies array to be: []",{"range":"1536","text":"1537"},"Update the dependencies array to be: [autoFocus]",{"range":"1538","text":"1539"},"Update the dependencies array to be: [closeModal, condition, openModal]",{"range":"1540","text":"1541"},"Update the dependencies array to be: [isClicked, isOnTop, outSideClick, setCondition, store.modals.length]",{"range":"1542","text":"1543"},"Update the dependencies array to be: [id, setIsClicked, store.modals]",{"range":"1544","text":"1545"},"Update the dependencies array to be: [center, feature, map]",{"range":"1546","text":"1547"},"Update the dependencies array to be: [clickable, coords, handleMapClick, zoom]",{"range":"1548","text":"1549"},"Update the dependencies array to be: [condition, defaultAddress, defaultCoordinates.latitude, defaultCoordinates.longitude, store.initials.instance.latitude, store.initials.instance.longitude]",{"range":"1550","text":"1551"},"Update the dependencies array to be: [condition]",{"range":"1552","text":"1553"},"Update the dependencies array to be: [condition, init]",{"range":"1554","text":"1555"},"Update the dependencies array to be: [children, children.length, defaultActiveId]",{"range":"1556","text":"1557"},"Update the dependencies array to be: [roleId, page, limit, store.filters, getTasks]",{"range":"1558","text":"1559"},"Update the dependencies array to be: [selectBoxes, setCategoryId, values, values.length]",{"range":"1560","text":"1561"},"Update the dependencies array to be: [data, formData]",{"range":"1562","text":"1563"},"Update the dependencies array to be: [isActive, element, whitelists, event]",{"range":"1564","text":"1565"},"Update the dependencies array to be: [ref, condition, callback, listenTo, once]",{"range":"1566","text":"1567"},"Update the dependencies array to be: [report]",{"range":"1568","text":"1569"},"Update the dependencies array to be: [callBack]",{"range":"1570","text":"1571"},"Update the dependencies array to be: [handleSelectedActors, showActors]",{"range":"1572","text":"1573"},"Update the dependencies array to be: [name, onSelect, selectedDay, showCalender]",{"range":"1574","text":"1575"},"Update the dependencies array to be: [calender, windowWidth, windowHeight, isInDialog, handleInDialog, dispatch, store.modals, id]",{"range":"1576","text":"1577"},"Update the dependencies array to be: [media, type]",{"range":"1578","text":"1579"},"Update the dependencies array to be: [dispatch, getCategories, match.path, store.refresh.call, store.refresh.page]",{"range":"1580","text":"1581"},"Update the dependencies array to be: [getCategories, store.filters]",{"range":"1582","text":"1583"},"Update the dependencies array to be: [addMarkerLayer, locations, map]",{"range":"1584","text":"1585"},"Update the dependencies array to be: [center, zoom]",{"range":"1586","text":"1587"},"Update the dependencies array to be: [fillInputs, isEditMode]",{"range":"1588","text":"1589"},"Update the dependencies array to be: [getOptions]",{"range":"1590","text":"1591"},"Update the dependencies array to be: [isStatic, staticData]",{"range":"1592","text":"1593"},"Update the dependencies array to be: [getData, isStatic]",{"range":"1594","text":"1595"},"Update the dependencies array to be: [data, formatData]",{"range":"1596","text":"1597"},"Update the dependencies array to be: [formatSelectedStrings, options]",{"range":"1598","text":"1599"},"Update the dependencies array to be: [defaultSelecteds, handleDefaultSelecteds, options]",{"range":"1600","text":"1601"},"Update the dependencies array to be: [isActive, windowWidth, windowHeight, isInDialog, handleInDialog, handleRegular, dispatch, store.modals, id]",{"range":"1602","text":"1603"},"Update the dependencies array to be: [defaultSelecteds, getFlatData, isStatic, staticData]",{"range":"1604","text":"1605"},{"range":"1606","text":"1553"},"Update the dependencies array to be: [dispatch, getProccesses, match.path, store.refresh.call, store.refresh.page]",{"range":"1607","text":"1608"},"Update the dependencies array to be: [getProccesses, store.filters]",{"range":"1609","text":"1610"},"Update the dependencies array to be: [getData, isEditMode]",{"range":"1611","text":"1612"},"Update the dependencies array to be: [dispatch, getAllOrgans, match.path, store.refresh.call, store.refresh.page]",{"range":"1613","text":"1614"},"Update the dependencies array to be: [getAllOrgans, store.filters]",{"range":"1615","text":"1616"},{"range":"1617","text":"1612"},"Update the dependencies array to be: [getViolations, match.path, store.refresh.call, store.refresh.page]",{"range":"1618","text":"1619"},"Update the dependencies array to be: [dispatch, getViolations, page, perPage, store.filters]",{"range":"1620","text":"1621"},"Update the dependencies array to be: [dialogData?.comment?.text, dialogData?.report?.comments, type]",{"range":"1622","text":"1623"},"Update the dependencies array to be: [condition, handleData, hideDialog, showDialog]",{"range":"1624","text":"1625"},"Update the dependencies array to be: [isClicked, isOnTop, outSideClick, setCondition]",{"range":"1626","text":"1627"},{"range":"1628","text":"1545"},"Update the dependencies array to be: [handleData]",{"range":"1629","text":"1630"},{"range":"1631","text":"1525"},{"range":"1632","text":"1527"},"Update the dependencies array to be: [defaltValues, isEditMode]",{"range":"1633","text":"1634"},"Update the dependencies array to be: [pollData]",{"range":"1635","text":"1636"},"Update the dependencies array to be: [dispatch, match.path, store.refresh.call, store.refresh.page]",{"range":"1637","text":"1638"},"Update the dependencies array to be: [isScatterMap, selectedChartId, store.filters]",{"range":"1639","text":"1640"},"Update the dependencies array to be: [dispatch, getAllUsers, match.path, store.refresh.call, store.refresh.page]",{"range":"1641","text":"1642"},"Update the dependencies array to be: [store.filters, currentPage, perPage, getAllUsers]",{"range":"1643","text":"1644"},"Update the dependencies array to be: [history]",{"range":"1645","text":"1646"},"Update the dependencies array to be: [getInitials, token]",{"range":"1647","text":"1648"},"Update the dependencies array to be: [getComplaints]",{"range":"1649","text":"1650"},{"range":"1651","text":"1533"},"Update the dependencies array to be: [getAllCategories, match.path, store.refresh.call, store.refresh.page]",{"range":"1652","text":"1653"},"Update the dependencies array to be: [getAllCategories]",{"range":"1654","text":"1655"},"Update the dependencies array to be: [getAllUnits, match.path, store.refresh.call, store.refresh.page]",{"range":"1656","text":"1657"},"Update the dependencies array to be: [getAllUnits]",{"range":"1658","text":"1659"},{"range":"1660","text":"1589"},{"range":"1661","text":"1589"},{"range":"1662","text":"1650"},[1761,1789],"[store.filters, page, limit, getReports]",[1991,2011],"[dispatch, getReports, match.path, store.refresh.call, store.refresh.page]",[1454,1456],"[getSources]",[1622,1642],"[getSources, match.path, store.refresh.call, store.refresh.page]",[1847,1867],"[dispatch, getPolls, match.path, store.refresh.call, store.refresh.page]",[1916,1931],"[getPolls, store.filters]",[2266,2286],"[getComments, match.path, store.refresh.call, store.refresh.page]",[2437,2467],"[store.filters, page, perPage, getComments]",[1119,1130],"[childData, getData]",[1196,1207],"[selecteds, setCategoryTitle]",[1363,1401],"[]",[1480,1509],"[autoFocus]",[1588,1599],"[closeModal, condition, openModal]",[2952,2963],"[isClicked, isOnTop, outSideClick, setCondition, store.modals.length]",[3233,3247],"[id, setIsClicked, store.modals]",[1604,1612],"[center, feature, map]",[3504,3506],"[clickable, coords, handleMapClick, zoom]",[1777,1788],"[condition, defaultAddress, defaultCoordinates.latitude, defaultCoordinates.longitude, store.initials.instance.latitude, store.initials.instance.longitude]",[1902,1933],"[condition]",[821,832],"[condition, init]",[658,692],"[children, children.length, defaultActiveId]",[2147,2183],"[roleId, page, limit, store.filters, getTasks]",[1603,1618],"[selectBoxes, setCategoryId, values, values.length]",[1761,1767],"[data, formData]",[827,846],"[isActive, element, whitelists, event]",[764,780],"[ref, condition, callback, listenTo, once]",[2964,2966],"[report]",[1840,1842],"[callBack]",[1966,1968],"[handleSelectedActors, showActors]",[1394,1407],"[name, onSelect, selectedDay, showCalender]",[3103,3161],"[calender, windowWidth, windowHeight, isInDialog, handleInDialog, dispatch, store.modals, id]",[1923,1925],"[media, type]",[1883,1903],"[dispatch, getCategories, match.path, store.refresh.call, store.refresh.page]",[1957,1972],"[getCategories, store.filters]",[945,956],"[addMarkerLayer, locations, map]",[3398,3400],"[center, zoom]",[2680,2682],"[fillInputs, isEditMode]",[4789,4791],"[getOptions]",[2194,2206],"[isStatic, staticData]",[2285,2287],"[getData, isStatic]",[2342,2348],"[data, formatData]",[3516,3525],"[formatSelectedStrings, options]",[4594,4612],"[defaultSelecteds, handleDefaultSelecteds, options]",[8855,8964],"[isActive, windowWidth, windowHeight, isInDialog, handleInDialog, handleRegular, dispatch, store.modals, id]",[2097,2099],"[defaultSelecteds, getFlatData, isStatic, staticData]",[5599,5634],[1709,1729],"[dispatch, getProccesses, match.path, store.refresh.call, store.refresh.page]",[1783,1798],"[getProccesses, store.filters]",[1559,1561],"[getData, isEditMode]",[1791,1811],"[dispatch, getAllOrgans, match.path, store.refresh.call, store.refresh.page]",[1864,1879],"[getAllOrgans, store.filters]",[2035,2037],[1758,1778],"[getViolations, match.path, store.refresh.call, store.refresh.page]",[1928,1958],"[dispatch, getViolations, page, perPage, store.filters]",[866,868],"[dialogData?.comment?.text, dialogData?.report?.comments, type]",[1483,1494],"[condition, handleData, hideDialog, showDialog]",[3352,3363],"[isClicked, isOnTop, outSideClick, setCondition]",[3633,3647],[2800,2802],"[handleData]",[1655,1675],[1724,1739],[1517,1519],"[defaltValues, isEditMode]",[2688,2690],"[pollData]",[2250,2270],"[dispatch, match.path, store.refresh.call, store.refresh.page]",[2520,2535],"[isScatterMap, selectedChartId, store.filters]",[4690,4710],"[dispatch, getAllUsers, match.path, store.refresh.call, store.refresh.page]",[4762,4799],"[store.filters, currentPage, perPage, getAllUsers]",[847,849],"[history]",[2145,2152],"[getInitials, token]",[3052,3054],"[getComplaints]",[1021,1032],[1481,1501],"[getAllCategories, match.path, store.refresh.call, store.refresh.page]",[1558,1560],"[getAllCategories]",[1459,1479],"[getAllUnits, match.path, store.refresh.call, store.refresh.page]",[1531,1533],"[getAllUnits]",[1432,1434],[1860,1862],[2534,2536]]